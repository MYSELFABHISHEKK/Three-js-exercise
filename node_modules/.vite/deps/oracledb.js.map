{
  "version": 3,
  "sources": ["../../oracledb/lib/version.js", "../../oracledb/lib/constants.js", "browser-external:buffer", "browser-external:util", "../../oracledb/lib/types.js", "../../oracledb/lib/impl/datahandlers/constants.js", "../../oracledb/lib/impl/datahandlers/buffer.js", "../../oracledb/lib/impl/datahandlers/vector.js", "../../oracledb/lib/settings.js", "../../oracledb/lib/errors.js", "browser-external:process", "../../oracledb/package.json", "../../oracledb/lib/util.js", "../../oracledb/lib/impl/aqDeqOptions.js", "../../oracledb/lib/impl/aqEnqOptions.js", "../../oracledb/lib/impl/aqMessage.js", "../../oracledb/lib/impl/aqQueue.js", "../../oracledb/lib/impl/dbObject.js", "../../oracledb/lib/impl/connection.js", "../../oracledb/lib/impl/lob.js", "../../oracledb/lib/impl/pool.js", "../../oracledb/lib/future.js", "browser-external:stream", "../../oracledb/lib/lob.js", "../../oracledb/lib/impl/datahandlers/oson.js", "../../oracledb/lib/impl/resultset.js", "../../oracledb/lib/impl/sodaCollection.js", "../../oracledb/lib/impl/sodaDatabase.js", "../../oracledb/lib/impl/sodaDocCursor.js", "../../oracledb/lib/impl/sodaDocument.js", "../../oracledb/lib/impl/sodaOperation.js", "../../oracledb/lib/impl/index.js", "../../oracledb/lib/aqDeqOptions.js", "../../oracledb/lib/aqEnqOptions.js", "../../oracledb/lib/aqMessage.js", "../../oracledb/lib/queryStream.js", "../../oracledb/lib/resultset.js", "../../oracledb/lib/transformer.js", "../../oracledb/lib/dbObject.js", "../../oracledb/lib/aqQueue.js", "../../oracledb/lib/sodaDocument.js", "../../oracledb/lib/sodaDocCursor.js", "../../oracledb/lib/sodaOperation.js", "../../oracledb/lib/sodaCollection.js", "../../oracledb/lib/sodaDatabase.js", "browser-external:events", "../../oracledb/lib/connection.js", "../../oracledb/lib/poolStatistics.js", "../../oracledb/lib/pool.js", "browser-external:path", "../../oracledb/lib/thin/protocol/constants.js", "browser-external:crypto", "../../oracledb/lib/thin/protocol/utils.js", "../../oracledb/lib/thin/protocol/messages/base.js", "../../oracledb/lib/thin/protocol/messages/lobOp.js", "../../oracledb/lib/thin/lob.js", "../../oracledb/lib/thin/dbObject.js", "../../oracledb/lib/thin/protocol/messages/withData.js", "../../oracledb/lib/thin/protocol/messages/execute.js", "../../oracledb/lib/thin/protocol/messages/fetch.js", "../../oracledb/lib/thin/resultSet.js", "../../oracledb/lib/thin/protocol/capabilities.js", "../../oracledb/lib/thin/protocol/packet.js", "../../oracledb/lib/thin/protocol/protocol.js", "../../oracledb/lib/thin/sqlnet/constants.js", "../../oracledb/lib/thin/sqlnet/packet.js", "browser-external:net", "browser-external:tls", "browser-external:http", "browser-external:timers", "../../oracledb/lib/thin/sqlnet/nvStrToNvPair.js", "../../oracledb/lib/thin/sqlnet/ntTcp.js", "browser-external:fs", "../../oracledb/lib/thin/sqlnet/sessionAtts.js", "browser-external:os", "browser-external:dns", "../../oracledb/lib/thin/util.js", "../../oracledb/lib/thin/sqlnet/navNodes.js", "../../oracledb/lib/thin/sqlnet/connStrategy.js", "../../oracledb/lib/thin/sqlnet/ezConnectResolver.js", "browser-external:readline", "../../oracledb/lib/thin/sqlnet/paramParser.js", "../../oracledb/lib/thin/sqlnet/networkSession.js", "../../oracledb/lib/thin/statement.js", "../../oracledb/lib/thin/protocol/encryptDecrypt.js", "../../oracledb/lib/thin/protocol/messages/auth.js", "../../oracledb/lib/thin/protocol/messages/commit.js", "../../oracledb/lib/thin/protocol/messages/dataType.js", "../../oracledb/lib/thin/protocol/messages/logOff.js", "../../oracledb/lib/thin/protocol/messages/ping.js", "../../oracledb/lib/thin/protocol/messages/protocol.js", "../../oracledb/lib/thin/protocol/messages/rollback.js", "../../oracledb/lib/thin/protocol/messages/sessionRelease.js", "../../oracledb/lib/thin/protocol/messages/fastAuth.js", "../../oracledb/lib/thin/protocol/messages/index.js", "../../oracledb/lib/thin/statementCache.js", "../../oracledb/lib/thin/connection.js", "../../oracledb/lib/thin/pool.js", "../../oracledb/lib/thin/index.js", "../../oracledb/lib/oracledb.js", "../../oracledb/index.js"],
  "sourcesContent": ["// Copyright (c) 2023, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n// Version information.\n// Keep in sync with package.json.\n// Leave the suffix an empty string for production releases.\n\nmodule.exports = {\n  VERSION_MAJOR: 6,\n  VERSION_MINOR: 5,\n  VERSION_PATCH: 1,\n  VERSION_SUFFIX: ''\n};\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n// This file contains values for implementation and public constants.\n//\n// All public constants are later exposed to node-oracledb apps via the exports\n// of oracledb.js.\n\n'use strict';\n\nconst version = require('./version.js');\n\nconst VERSION_STRING =\n  version.VERSION_MAJOR + '.' +\n  version.VERSION_MINOR + '.' +\n  version.VERSION_PATCH +\n  version.VERSION_SUFFIX;\n\nmodule.exports = {\n\n  // version information\n  VERSION_MAJOR: version.VERSION_MAJOR,\n  VERSION_MINOR: version.VERSION_MINOR,\n  VERSION_PATCH: version.VERSION_PATCH,\n  VERSION_SUFFIX: version.VERSION_SUFFIX,\n  VERSION_STRING: VERSION_STRING,\n\n  // defaults for initOracleClient()\n  DEFAULT_DRIVER_NAME: \"node-oracledb : \" + VERSION_STRING,\n  DEFAULT_ERROR_URL: \"https://node-oracledb.readthedocs.io/en/latest/user_guide/installation.html\",\n\n  // default for maxSize for OUT and IN/OUT binds\n  DEFAULT_MAX_SIZE_FOR_OUT_BINDS: 200,\n\n  // character set forms (internal use)\n  CSFRM_IMPLICIT: 1,\n  CSFRM_NCHAR: 2,\n\n  // CQN operation codes\n  CQN_OPCODE_ALL_OPS: 0,\n  CQN_OPCODE_ALL_ROWS: 1,\n  CQN_OPCODE_ALTER: 16,\n  CQN_OPCODE_DELETE: 8,\n  CQN_OPCODE_DROP: 32,\n  CQN_OPCODE_INSERT: 2,\n  CQN_OPCODE_UPDATE: 4,\n\n  // fetchInfo type defaulting\n  DEFAULT: 0,\n\n  // statement types\n  STMT_TYPE_UNKNOWN: 0,\n  STMT_TYPE_SELECT: 1,\n  STMT_TYPE_UPDATE: 2,\n  STMT_TYPE_DELETE: 3,\n  STMT_TYPE_INSERT: 4,\n  STMT_TYPE_CREATE: 5,\n  STMT_TYPE_DROP: 6,\n  STMT_TYPE_ALTER: 7,\n  STMT_TYPE_BEGIN: 8,\n  STMT_TYPE_DECLARE: 9,\n  STMT_TYPE_CALL: 10,\n  STMT_TYPE_EXPLAIN_PLAN: 15,\n  STMT_TYPE_MERGE: 16,\n  STMT_TYPE_ROLLBACK: 17,\n  STMT_TYPE_COMMIT: 21,\n\n  // shutdown modes\n  SHUTDOWN_MODE_DEFAULT: 0,\n  SHUTDOWN_MODE_TRANSACTIONAL: 1,\n  SHUTDOWN_MODE_TRANSACTIONAL_LOCAL: 2,\n  SHUTDOWN_MODE_IMMEDIATE: 3,\n  SHUTDOWN_MODE_ABORT: 4,\n  SHUTDOWN_MODE_FINAL: 5,\n\n  // startup modes\n  STARTUP_MODE_DEFAULT: 0,\n  STARTUP_MODE_FORCE: 1,\n  STARTUP_MODE_RESTRICT: 2,\n\n  // subscription event types\n  SUBSCR_EVENT_TYPE_SHUTDOWN: 2,\n  SUBSCR_EVENT_TYPE_SHUTDOWN_ANY: 3,\n  SUBSCR_EVENT_TYPE_STARTUP: 1,\n  SUBSCR_EVENT_TYPE_DEREG: 5,\n  SUBSCR_EVENT_TYPE_OBJ_CHANGE: 6,\n  SUBSCR_EVENT_TYPE_QUERY_CHANGE: 7,\n  SUBSCR_EVENT_TYPE_AQ: 100,\n\n  // subscription grouping classes\n  SUBSCR_GROUPING_CLASS_TIME: 1,\n\n  // subscription grouping types\n  SUBSCR_GROUPING_TYPE_SUMMARY: 1,\n  SUBSCR_GROUPING_TYPE_LAST: 2,\n\n  // subscription namespaces\n  SUBSCR_NAMESPACE_AQ: 1,\n  SUBSCR_NAMESPACE_DBCHANGE: 2,\n\n  // subscription quality of service flags\n  SUBSCR_QOS_BEST_EFFORT: 0x10,\n  SUBSCR_QOS_DEREG_NFY: 0x02,\n  SUBSCR_QOS_QUERY: 0x08,\n  SUBSCR_QOS_RELIABLE: 0x01,\n  SUBSCR_QOS_ROWIDS: 0x04,\n\n  // privileges\n  SYSASM: 0x00008000,\n  SYSBACKUP: 0x00020000,\n  SYSDBA: 0x00000002,\n  SYSDG: 0x00040000,\n  SYSKM: 0x00080000,\n  SYSOPER: 0x00000004,\n  SYSPRELIM: 0x00000008,\n  SYSRAC: 0x00100000,\n\n  // bind directions\n  BIND_IN: 3001,\n  BIND_INOUT: 3002,\n  BIND_OUT: 3003,\n\n  // outFormat values\n  OUT_FORMAT_ARRAY: 4001,\n  OUT_FORMAT_OBJECT: 4002,\n\n  // SODA collection creation modes\n  SODA_COLL_MAP_MODE: 5001,\n\n  // pool statuses\n  POOL_STATUS_OPEN: 6000,\n  POOL_STATUS_DRAINING: 6001,\n  POOL_STATUS_CLOSED: 6002,\n  POOL_STATUS_RECONFIGURING: 6003,\n\n  // purity values\n  PURITY_DEFAULT: 0,\n  PURITY_NEW: 1,\n  PURITY_SELF: 2,\n\n  // AQ dequeue wait options\n  AQ_DEQ_NO_WAIT: 0,\n  AQ_DEQ_WAIT_FOREVER: 4294967295,\n\n  // AQ dequeue modes\n  AQ_DEQ_MODE_BROWSE: 1,\n  AQ_DEQ_MODE_LOCKED: 2,\n  AQ_DEQ_MODE_REMOVE: 3,\n  AQ_DEQ_MODE_REMOVE_NO_DATA: 4,\n\n  // AQ dequeue navigation flags\n  AQ_DEQ_NAV_FIRST_MSG: 1,\n  AQ_DEQ_NAV_NEXT_TRANSACTION: 2,\n  AQ_DEQ_NAV_NEXT_MSG: 3,\n\n  // AQ message delivery modes\n  AQ_MSG_DELIV_MODE_PERSISTENT: 1,\n  AQ_MSG_DELIV_MODE_BUFFERED: 2,\n  AQ_MSG_DELIV_MODE_PERSISTENT_OR_BUFFERED: 3,\n\n  // AQ message states\n  AQ_MSG_STATE_READY: 0,\n  AQ_MSG_STATE_WAITING: 1,\n  AQ_MSG_STATE_PROCESSED: 2,\n  AQ_MSG_STATE_EXPIRED: 3,\n\n  // AQ visibility flags\n  AQ_VISIBILITY_IMMEDIATE: 1,\n  AQ_VISIBILITY_ON_COMMIT: 2,\n\n  // TPC/XA begin flags Constants\n  TPC_BEGIN_JOIN: 0x00000002,\n  TPC_BEGIN_NEW: 0x00000001,\n  TPC_BEGIN_PROMOTE: 0x00000008,\n  TPC_BEGIN_RESUME: 0x00000004,\n\n  // TPC/XA two-phase commit flags\n  TPC_END_NORMAL: 0,\n  TPC_END_SUSPEND: 0x00100000,\n\n  // vector types\n  VECTOR_FORMAT_FLOAT32: 2,\n  VECTOR_FORMAT_FLOAT64: 3,\n  VECTOR_FORMAT_INT8: 4,\n\n};\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"buffer\" has been externalized for browser compatibility. Cannot access \"buffer.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"util\" has been externalized for browser compatibility. Cannot access \"util.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst util = require('util');\n\nconst dbTypeByNum = new Map();\nconst dbTypeByOraTypeNum = new Map();\nconst dbTypeByColumnTypeName = new Map();\n\n// define class used for database types\nclass DbType {\n\n  constructor(num, name, columnTypeName, options) {\n    this.num = num;\n    this.name = name;\n    this.columnTypeName = columnTypeName;\n    this._bufferSizeFactor = options.bufferSizeFactor || 0;\n    this._oraTypeNum = options.oraTypeNum || 0;\n    this._csfrm = options.csfrm || 0;\n    dbTypeByNum.set(num, this);\n    const key = (options.csfrm || 0) * 256 + options.oraTypeNum;\n    dbTypeByOraTypeNum.set(key, this);\n    dbTypeByColumnTypeName.set(columnTypeName, this);\n  }\n\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return this.num;\n      default:\n        return this.toString();\n    }\n  }\n\n  [util.inspect.custom]() {\n    return this.toString();\n  }\n\n  toString() {\n    return `[DbType ${this.name}]`;\n  }\n\n}\n\n//-----------------------------------------------------------------------------\n// getTypeByColumnTypeName()\n//\n// Return the type given a column type name. If the column type name cannot be\n// found an exception is thrown.\n//-----------------------------------------------------------------------------\nfunction getTypeByColumnTypeName(name) {\n  const dbType = dbTypeByColumnTypeName.get(name);\n  if (!dbType)\n    errors.throwErr(errors.ERR_UNKNOWN_COLUMN_TYPE_NAME, name);\n  return dbType;\n}\n\n//-----------------------------------------------------------------------------\n// getTypeByNum()\n//\n// Return the type given the type number. If the type number is incorrect an\n// exception is thrown.\n//-----------------------------------------------------------------------------\nfunction getTypeByNum(num) {\n  const dbType = dbTypeByNum.get(num);\n  if (!dbType)\n    errors.throwErr(errors.ERR_INVALID_TYPE_NUM, num);\n  return dbType;\n}\n\n//-----------------------------------------------------------------------------\n// getTypeByOraTypeNum()\n//\n// Return the type given the Oracle type number and character set form. If the\n// Oracle type number and character set form are incorrect an exception is\n// thrown.\n//-----------------------------------------------------------------------------\nfunction getTypeByOraTypeNum(oraTypeNum, csfrm) {\n  const key = (csfrm || 0) * 256 + oraTypeNum;\n  const dbType = dbTypeByOraTypeNum.get(key);\n  if (!dbType)\n    errors.throwErr(errors.ERR_INVALID_ORACLE_TYPE_NUM, oraTypeNum, csfrm);\n  return dbType;\n}\n\nconst DB_TYPE_BFILE = new DbType(2020,\n  \"DB_TYPE_BFILE\", \"BFILE\",\n  { oraTypeNum: 114, bufferSizeFactor: 112 });\nconst DB_TYPE_BINARY_DOUBLE = new DbType(2008,\n  \"DB_TYPE_BINARY_DOUBLE\", \"BINARY_DOUBLE\",\n  { oraTypeNum: 101, bufferSizeFactor: 8 });\nconst DB_TYPE_BINARY_FLOAT = new DbType(2007,\n  \"DB_TYPE_BINARY_FLOAT\", \"BINARY_FLOAT\",\n  { oraTypeNum: 100, bufferSizeFactor: 4 });\nconst DB_TYPE_BINARY_INTEGER = new DbType(2009,\n  \"DB_TYPE_BINARY_INTEGER\", \"BINARY_INTEGER\",\n  { oraTypeNum: 3, bufferSizeFactor: 22 });\nconst DB_TYPE_BLOB = new DbType(2019,\n  \"DB_TYPE_BLOB\", \"BLOB\",\n  { oraTypeNum: 113, bufferSizeFactor: 112 });\nconst DB_TYPE_BOOLEAN = new DbType(2022,\n  \"DB_TYPE_BOOLEAN\", \"BOOLEAN\",\n  { oraTypeNum: 252, bufferSizeFactor: 4 });\nconst DB_TYPE_CHAR = new DbType(2003,\n  \"DB_TYPE_CHAR\", \"CHAR\",\n  { oraTypeNum: 96, csfrm: constants.CSFRM_IMPLICIT, bufferSizeFactor: 4 });\nconst DB_TYPE_CLOB = new DbType(2017,\n  \"DB_TYPE_CLOB\", \"CLOB\",\n  { oraTypeNum: 112, csfrm: constants.CSFRM_IMPLICIT, bufferSizeFactor: 112 });\nconst DB_TYPE_CURSOR = new DbType(2021,\n  \"DB_TYPE_CURSOR\", \"CURSOR\",\n  { oraTypeNum: 102, bufferSizeFactor: 4 });\nconst DB_TYPE_DATE = new DbType(2011,\n  \"DB_TYPE_DATE\", \"DATE\",\n  { oraTypeNum: 12, bufferSizeFactor: 7 });\nconst DB_TYPE_INTERVAL_DS = new DbType(2015,\n  \"DB_TYPE_INTERVAL_DS\", \"INTERVAL DAY TO SECOND\",\n  { oraTypeNum: 183, bufferSizeFactor: 11 });\nconst DB_TYPE_INTERVAL_YM = new DbType(2016,\n  \"DB_TYPE_INTERVAL_YM\", \"INTERVAL YEAR TO MONTH\",\n  { oraTypeNum: 182 });\nconst DB_TYPE_JSON = new DbType(2027,\n  \"DB_TYPE_JSON\", \"JSON\",\n  { oraTypeNum: 119 });\nconst DB_TYPE_LONG = new DbType(2024,\n  \"DB_TYPE_LONG\", \"LONG\",\n  { oraTypeNum: 8, csfrm: constants.CSFRM_IMPLICIT,\n    bufferSizeFactor: 2 ** 31 - 1 });\nconst DB_TYPE_LONG_NVARCHAR = new DbType(2031,\n  \"DB_TYPE_LONG_NVARCHAR\", \"LONG\",\n  { oraTypeNum: 8, csfrm: constants.CSFRM_NCHAR,\n    bufferSizeFactor: 2 ** 31 - 1 });\nconst DB_TYPE_LONG_RAW = new DbType(2025,\n  \"DB_TYPE_LONG_RAW\", \"LONG RAW\",\n  { oraTypeNum: 24, bufferSizeFactor: 2 ** 31 - 1 });\nconst DB_TYPE_NCHAR = new DbType(2004,\n  \"DB_TYPE_NCHAR\", \"NCHAR\",\n  { oraTypeNum: 96, csfrm: constants.CSFRM_NCHAR, bufferSizeFactor: 4 });\nconst DB_TYPE_NCLOB = new DbType(2018,\n  \"DB_TYPE_NCLOB\", \"NCLOB\",\n  { oraTypeNum: 112, csfrm: constants.CSFRM_NCHAR, bufferSizeFactor: 112 });\nconst DB_TYPE_NUMBER = new DbType(2010,\n  \"DB_TYPE_NUMBER\", \"NUMBER\",\n  { oraTypeNum: 2, bufferSizeFactor: 22 });\nconst DB_TYPE_NVARCHAR = new DbType(2002,\n  \"DB_TYPE_NVARCHAR\", \"NVARCHAR2\",\n  { oraTypeNum: 1, csfrm: constants.CSFRM_NCHAR, bufferSizeFactor: 4 });\nconst DB_TYPE_OBJECT = new DbType(2023,\n  \"DB_TYPE_OBJECT\", \"OBJECT\",\n  { oraTypeNum: 109 });\nconst DB_TYPE_RAW = new DbType(2006,\n  \"DB_TYPE_RAW\", \"RAW\",\n  { oraTypeNum: 23, bufferSizeFactor: 1 });\nconst DB_TYPE_ROWID = new DbType(2005,\n  \"DB_TYPE_ROWID\", \"ROWID\",\n  { oraTypeNum: 11, bufferSizeFactor: 18 });\nconst DB_TYPE_TIMESTAMP = new DbType(2012,\n  \"DB_TYPE_TIMESTAMP\", \"TIMESTAMP\",\n  { oraTypeNum: 180, bufferSizeFactor: 11 });\nconst DB_TYPE_TIMESTAMP_LTZ = new DbType(2014,\n  \"DB_TYPE_TIMESTAMP_LTZ\", \"TIMESTAMP WITH LOCAL TIME ZONE\",\n  { oraTypeNum: 231, bufferSizeFactor: 11 });\nconst DB_TYPE_TIMESTAMP_TZ = new DbType(2013,\n  \"DB_TYPE_TIMESTAMP_TZ\", \"TIMESTAMP WITH TIME ZONE\",\n  { oraTypeNum: 181, bufferSizeFactor: 13 });\nconst DB_TYPE_UROWID = new DbType(2030,\n  \"DB_TYPE_UROWID\", \"UROWID\",\n  { oraTypeNum: 208 });\nconst DB_TYPE_VARCHAR = new DbType(2001,\n  \"DB_TYPE_VARCHAR\", \"VARCHAR2\",\n  { oraTypeNum: 1, csfrm: constants.CSFRM_IMPLICIT, bufferSizeFactor: 4 });\nconst DB_TYPE_XMLTYPE = new DbType(2032,\n  \"DB_TYPE_XMLTYPE\", \"XMLTYPE\",\n  { oraTypeNum: 109, csfrm: constants.CSFRM_IMPLICIT, bufferSizeFactor: 2147483647 });\nconst DB_TYPE_VECTOR = new DbType(2033,\n  \"DB_TYPE_VECTOR\", \"VECTOR\",\n  { oraTypeNum: 127 });\n\n// database type conversion map: the top level key refers to the database\n// type being fetched and the value is another map; this map's key is the\n// type requested by the user and its value is the actual type that will be\n// used in the define call; only entries are included where the database type\n// and the requested fetch type are different\nconst DB_TYPE_CONVERSION_MAP = new Map([\n  [DB_TYPE_BINARY_DOUBLE, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]\n  ])],\n  [DB_TYPE_BINARY_FLOAT, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]\n  ])],\n  [DB_TYPE_BLOB, new Map([\n    [DB_TYPE_RAW, DB_TYPE_LONG_RAW],\n    [DB_TYPE_LONG_RAW, DB_TYPE_LONG_RAW]\n  ])],\n  [DB_TYPE_CHAR, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]\n  ])],\n  [DB_TYPE_CLOB, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_LONG],\n    [DB_TYPE_LONG, DB_TYPE_LONG]\n  ])],\n  [DB_TYPE_DATE, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR],\n    [DB_TYPE_TIMESTAMP_LTZ, DB_TYPE_TIMESTAMP_LTZ]\n  ])],\n  [DB_TYPE_JSON, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]\n  ])],\n  [DB_TYPE_LONG, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_LONG]\n  ])],\n  [DB_TYPE_LONG_RAW, new Map([\n    [DB_TYPE_RAW, DB_TYPE_LONG_RAW]\n  ])],\n  [DB_TYPE_NCHAR, new Map([\n    [DB_TYPE_CHAR, DB_TYPE_NCHAR],\n    [DB_TYPE_VARCHAR, DB_TYPE_NVARCHAR],\n    [DB_TYPE_NVARCHAR, DB_TYPE_NVARCHAR]\n  ])],\n  [DB_TYPE_NCLOB, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_LONG_NVARCHAR],\n    [DB_TYPE_NVARCHAR, DB_TYPE_LONG_NVARCHAR],\n    [DB_TYPE_LONG, DB_TYPE_LONG_NVARCHAR],\n    [DB_TYPE_LONG_NVARCHAR, DB_TYPE_LONG_NVARCHAR]\n  ])],\n  [DB_TYPE_NUMBER, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]\n  ])],\n  [DB_TYPE_NVARCHAR, new Map([\n    [DB_TYPE_CHAR, DB_TYPE_NCHAR],\n    [DB_TYPE_NCHAR, DB_TYPE_NCHAR],\n    [DB_TYPE_VARCHAR, DB_TYPE_NVARCHAR]\n  ])],\n  [DB_TYPE_RAW, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR]\n  ])],\n  [DB_TYPE_ROWID, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_ROWID]\n  ])],\n  [DB_TYPE_TIMESTAMP, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR],\n    [DB_TYPE_TIMESTAMP_LTZ, DB_TYPE_TIMESTAMP_LTZ]\n  ])],\n  [DB_TYPE_TIMESTAMP_LTZ, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR],\n    [DB_TYPE_TIMESTAMP_TZ, DB_TYPE_TIMESTAMP_TZ]\n  ])],\n  [DB_TYPE_TIMESTAMP_TZ, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR],\n    [DB_TYPE_TIMESTAMP_LTZ, DB_TYPE_TIMESTAMP_LTZ]\n  ])],\n  [DB_TYPE_UROWID, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_ROWID]\n  ])],\n  [DB_TYPE_VECTOR, new Map([\n    [DB_TYPE_VARCHAR, DB_TYPE_LONG],\n    [DB_TYPE_LONG, DB_TYPE_LONG],\n    [DB_TYPE_CLOB, DB_TYPE_CLOB]\n  ])],\n]);\n\n// default fetch type map\nconst DB_TYPE_FETCH_TYPE_MAP = new Map([\n  [DB_TYPE_BFILE, DB_TYPE_BFILE],\n  [DB_TYPE_BINARY_DOUBLE, DB_TYPE_BINARY_DOUBLE],\n  [DB_TYPE_BINARY_FLOAT, DB_TYPE_BINARY_FLOAT],\n  [DB_TYPE_BINARY_INTEGER, DB_TYPE_BINARY_INTEGER],\n  [DB_TYPE_BLOB, DB_TYPE_BLOB],\n  [DB_TYPE_BOOLEAN, DB_TYPE_BOOLEAN],\n  [DB_TYPE_CHAR, DB_TYPE_CHAR],\n  [DB_TYPE_CLOB, DB_TYPE_CLOB],\n  [DB_TYPE_CURSOR, DB_TYPE_CURSOR],\n  [DB_TYPE_DATE, DB_TYPE_DATE],\n  [DB_TYPE_INTERVAL_DS, DB_TYPE_INTERVAL_DS],\n  [DB_TYPE_INTERVAL_YM, DB_TYPE_INTERVAL_YM],\n  [DB_TYPE_JSON, DB_TYPE_JSON],\n  [DB_TYPE_LONG, DB_TYPE_LONG],\n  [DB_TYPE_LONG_NVARCHAR, DB_TYPE_LONG_NVARCHAR],\n  [DB_TYPE_LONG_RAW, DB_TYPE_LONG_RAW],\n  [DB_TYPE_NCHAR, DB_TYPE_NCHAR],\n  [DB_TYPE_NCLOB, DB_TYPE_NCLOB],\n  [DB_TYPE_NUMBER, DB_TYPE_NUMBER],\n  [DB_TYPE_NVARCHAR, DB_TYPE_NVARCHAR],\n  [DB_TYPE_OBJECT, DB_TYPE_OBJECT],\n  [DB_TYPE_RAW, DB_TYPE_RAW],\n  [DB_TYPE_ROWID, DB_TYPE_ROWID],\n  [DB_TYPE_TIMESTAMP, DB_TYPE_TIMESTAMP],\n  [DB_TYPE_TIMESTAMP_LTZ, DB_TYPE_TIMESTAMP_TZ],\n  [DB_TYPE_TIMESTAMP_TZ, DB_TYPE_TIMESTAMP_TZ],\n  [DB_TYPE_UROWID, DB_TYPE_UROWID],\n  [DB_TYPE_VARCHAR, DB_TYPE_VARCHAR],\n  [DB_TYPE_XMLTYPE, DB_TYPE_XMLTYPE],\n  [DB_TYPE_VECTOR, DB_TYPE_VECTOR]\n]);\n\n// additional aliases for types by column type name\ndbTypeByColumnTypeName.set(\"DOUBLE PRECISION\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"FLOAT\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"INTEGER\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"PL/SQL BOOLEAN\", DB_TYPE_BOOLEAN);\ndbTypeByColumnTypeName.set(\"PL/SQL BINARY INTEGER\", DB_TYPE_BINARY_INTEGER);\ndbTypeByColumnTypeName.set(\"PL/SQL PLS INTEGER\", DB_TYPE_BINARY_INTEGER);\ndbTypeByColumnTypeName.set(\"REAL\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"SMALLINT\", DB_TYPE_NUMBER);\ndbTypeByColumnTypeName.set(\"TIMESTAMP WITH LOCAL TZ\", DB_TYPE_TIMESTAMP_LTZ);\ndbTypeByColumnTypeName.set(\"TIMESTAMP WITH TZ\", DB_TYPE_TIMESTAMP_TZ);\n\n// It abstracts the autogenerated SODA Document key.\nclass JsonId extends Uint8Array {\n  toJSON() {\n    return (Buffer.from(this.buffer).toString('hex'));\n  }\n}\n\nmodule.exports = {\n  DbType,\n  DB_TYPE_BFILE,\n  DB_TYPE_BINARY_DOUBLE,\n  DB_TYPE_BINARY_FLOAT,\n  DB_TYPE_BINARY_INTEGER,\n  DB_TYPE_BLOB,\n  DB_TYPE_BOOLEAN,\n  DB_TYPE_CHAR,\n  DB_TYPE_CLOB,\n  DB_TYPE_CURSOR,\n  DB_TYPE_DATE,\n  DB_TYPE_INTERVAL_DS,\n  DB_TYPE_INTERVAL_YM,\n  DB_TYPE_JSON,\n  DB_TYPE_LONG,\n  DB_TYPE_LONG_NVARCHAR,\n  DB_TYPE_LONG_RAW,\n  DB_TYPE_NCHAR,\n  DB_TYPE_NCLOB,\n  DB_TYPE_NUMBER,\n  DB_TYPE_NVARCHAR,\n  DB_TYPE_OBJECT,\n  DB_TYPE_RAW,\n  DB_TYPE_ROWID,\n  DB_TYPE_TIMESTAMP,\n  DB_TYPE_TIMESTAMP_LTZ,\n  DB_TYPE_TIMESTAMP_TZ,\n  DB_TYPE_UROWID,\n  DB_TYPE_VARCHAR,\n  DB_TYPE_VECTOR,\n  DB_TYPE_CONVERSION_MAP,\n  DB_TYPE_FETCH_TYPE_MAP,\n  DB_TYPE_XMLTYPE,\n  getTypeByColumnTypeName,\n  getTypeByNum,\n  getTypeByOraTypeNum,\n  JsonId\n};\n", "// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('../../constants.js');\n\nmodule.exports = {\n\n  // vector constants\n  TNS_VECTOR_MAGIC_BYTE: 0xDB,\n  TNS_VECTOR_VERSION: 0,\n\n  // vector flags\n  TNS_VECTOR_FLAG_NORMSRC: 0x0010,\n  TNS_VECTOR_FLAG_NORM: 0x0002,\n\n  // base JSON constants\n  TNS_JSON_MAGIC_BYTE_1: 0xff,\n  TNS_JSON_MAGIC_BYTE_2: 0x4a,       // 'J'\n  TNS_JSON_MAGIC_BYTE_3: 0x5a,       // 'Z'\n  TNS_JSON_VERSION_MAX_FNAME_255: 1,\n  TNS_JSON_VERSION_MAX_FNAME_65535: 3,\n  TNS_JSON_FLAG_HASH_ID_UINT8: 0x0100,\n  TNS_JSON_FLAG_HASH_ID_UINT16: 0x0200,\n  TNS_JSON_FLAG_NUM_FNAMES_UINT16: 0x0400,\n  TNS_JSON_FLAG_FNAMES_SEG_UINT32: 0x0800,\n  TNS_JSON_FLAG_TINY_NODES_STAT: 0x2000,\n  TNS_JSON_FLAG_TREE_SEG_UINT32: 0x1000,\n  TNS_JSON_FLAG_REL_OFFSET_MODE: 0x01,\n  TNS_JSON_FLAG_INLINE_LEAF: 0x02,\n  TNS_JSON_FLAG_LEN_IN_PCODE: 0x04,\n  TNS_JSON_FLAG_NUM_FNAMES_UINT32: 0x08,\n  TNS_JSON_FLAG_IS_SCALAR: 0x10,\n  TNS_JSON_FLAG_SEC_FNAMES_SEG_UINT16: 0x100,\n\n  // JSON data types\n  TNS_JSON_TYPE_NULL: 0x30,\n  TNS_JSON_TYPE_TRUE: 0x31,\n  TNS_JSON_TYPE_FALSE: 0x32,\n  TNS_JSON_TYPE_STRING_LENGTH_UINT8: 0x33,\n  TNS_JSON_TYPE_NUMBER_LENGTH_UINT8: 0x34,\n  TNS_JSON_TYPE_BINARY_DOUBLE: 0x36,\n  TNS_JSON_TYPE_STRING_LENGTH_UINT16: 0x37,\n  TNS_JSON_TYPE_STRING_LENGTH_UINT32: 0x38,\n  TNS_JSON_TYPE_TIMESTAMP: 0x39,\n  TNS_JSON_TYPE_BINARY_LENGTH_UINT16: 0x3a,\n  TNS_JSON_TYPE_BINARY_LENGTH_UINT32: 0x3b,\n  TNS_JSON_TYPE_DATE: 0x3c,\n  TNS_JSON_TYPE_INTERVAL_YM: 0x3d,\n  TNS_JSON_TYPE_INTERVAL_DS: 0x3e,\n  TNS_JSON_TYPE_TIMESTAMP_TZ: 0x7c,\n  TNS_JSON_TYPE_TIMESTAMP7: 0x7d,\n  TNS_JSON_TYPE_BINARY_FLOAT: 0x7f,\n  TNS_JSON_TYPE_OBJECT: 0x84,\n  TNS_JSON_TYPE_ARRAY: 0xc0,\n  TNS_JSON_TYPE_EXTENDED: 0x7b,\n  TNS_JSON_TYPE_VECTOR: 0x01,\n  TNS_JSON_TYPE_ID: 0x7e,\n\n  // timezone offsets\n  TZ_HOUR_OFFSET: 20,\n  TZ_MINUTE_OFFSET: 60,\n\n  // general constants\n  TNS_MAX_SHORT_LENGTH: 252,\n  TNS_DURATION_MID: 0x80000000,\n  TNS_DURATION_OFFSET: 60,\n  TNS_CHUNK_SIZE: 32767,\n  TNS_HAS_REGION_ID: 0x80,\n  NUMBER_MAX_DIGITS: 40,\n  BUFFER_CHUNK_SIZE: 65536,\n  CSFRM_IMPLICIT: constants.CSFRM_IMPLICIT,\n\n  // vector generic constants\n  VECTOR_FORMAT_FLOAT32: constants.VECTOR_FORMAT_FLOAT32,\n  VECTOR_FORMAT_FLOAT64: constants.VECTOR_FORMAT_FLOAT64,\n  VECTOR_FORMAT_INT8: constants.VECTOR_FORMAT_INT8,\n\n  TNS_NULL_LENGTH_INDICATOR: 255,\n  TNS_LONG_LENGTH_INDICATOR: 254,\n\n};\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require(\"./constants.js\");\nconst errors = require(\"../../errors.js\");\nconst types = require(\"../../types.js\");\nconst nodbUtil = require(\"../../util.js\");\n\n/**\n * Base buffer class used for managing buffered data without unnecessary\n * copying.\n */\nclass BaseBuffer {\n\n  //---------------------------------------------------------------------------\n  // constructor()\n  //\n  // The initializer is either an integer specifying the size of the buffer, or\n  // an existing Buffer, which is used directly.\n  //---------------------------------------------------------------------------\n  constructor(initializer) {\n    if (typeof initializer === 'number') {\n      this.buf = Buffer.alloc(initializer);\n      this.size = 0;\n      this.maxSize = initializer;\n    } else if (initializer) {\n      this.buf = initializer;\n      this.size = this.maxSize = initializer.length;\n    }\n    this.pos = 0;\n  }\n\n  //---------------------------------------------------------------------------\n  // _grow()\n  //\n  // Called when the buffer needs to grow. The base function simply raises an\n  // error.\n  //---------------------------------------------------------------------------\n  _grow(numBytes) {\n    errors.throwErr(errors.ERR_BUFFER_LENGTH_INSUFFICIENT, this.numBytesLeft(),\n      numBytes);\n  }\n\n  //---------------------------------------------------------------------------\n  // _readBytesWithLength()\n  //\n  // Helper function that processes the number of bytes (if needed) and then\n  // acquires the specified number of bytes from the buffer. The base function\n  // simply uses the length as given.\n  //---------------------------------------------------------------------------\n  _readBytesWithLength(numBytes) {\n    return this.readBytes(numBytes);\n  }\n\n  //---------------------------------------------------------------------------\n  // _readInteger()\n  //\n  // Read an integer from the buffer of the specified maximum size and returns\n  // it. The signed flag indicates whether the value is allowed to be signed or\n  // not and the skip flag indicates whether the data should simply be skipped.\n  //---------------------------------------------------------------------------\n  _readInteger(maxSize, signed, skip) {\n    let isNegative = false;\n    let size = this.readUInt8();\n    if (size === 0) {\n      return 0;\n    } else if (size & 0x80) {\n      if (!signed) {\n        errors.throwErr(errors.ERR_UNEXPECTED_NEGATIVE_INTEGER, this.pos, this.packetNum);\n      }\n      isNegative = true;\n      size = size & 0x7f;\n    }\n    if (size > maxSize) {\n      errors.throwErr(errors.ERR_INTEGER_TOO_LARGE, size, maxSize, this.pos, this.packetNum);\n    }\n    if (skip) {\n      this.skipBytes(size);\n    } else {\n      const buf = this.readBytes(size);\n      const value = buf.readUIntBE(0, size);\n      return (isNegative) ? -value : value;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // numBytesLeft()\n  //\n  // Returns the number of bytes that are remaining in the buffer.\n  //---------------------------------------------------------------------------\n  numBytesLeft() {\n    return this.size - this.pos;\n  }\n\n  //---------------------------------------------------------------------------\n  // parseBinaryDouble()\n  //\n  // Parses a binary double from the supplied buffer and returns a Number.\n  // It is assumed at this point that the size of the buffer is 8 bytes. A copy\n  // is made of the buffer in order to ensure that the original buffer is not\n  // modified. If it is and data spans multiple packets, incorrect data may be\n  // returned!\n  //---------------------------------------------------------------------------\n  parseBinaryDouble(buf) {\n    buf = Buffer.from(buf);\n    if (buf[0] & 0x80) {\n      buf[0] &= 0x7f;\n    } else {\n      // complement the bits for a negative number\n      buf[0] ^= 0xff;\n      buf[1] ^= 0xff;\n      buf[2] ^= 0xff;\n      buf[3] ^= 0xff;\n      buf[4] ^= 0xff;\n      buf[5] ^= 0xff;\n      buf[6] ^= 0xff;\n      buf[7] ^= 0xff;\n    }\n    return buf.readDoubleBE();\n  }\n\n  //---------------------------------------------------------------------------\n  // parseBinaryFloat()\n  //\n  // Parses a binary float from the supplied buffer and returns a Number.  It\n  // is assumed at this point that the size of the buffer is 4 bytes. A copy is\n  // made of the buffer in order to ensure that the original buffer is not\n  // modified. If it is and data spans multiple packets, incorrect data may be\n  // returned!\n  //---------------------------------------------------------------------------\n  parseBinaryFloat(buf) {\n    buf = Buffer.from(buf);\n    if (buf[0] & 0x80) {\n      buf[0] &= 0x7f;\n    } else {\n      // complement the bits for a negative number\n      buf[0] ^= 0xff;\n      buf[1] ^= 0xff;\n      buf[2] ^= 0xff;\n      buf[3] ^= 0xff;\n    }\n    return buf.readFloatBE();\n  }\n\n  //---------------------------------------------------------------------------\n  // parseOracleDate()\n  //\n  // Parses an Oracle date from the supplied buffer and returns a Date. It is\n  // assumed at this point that the size of the buffer is either 7 bytes (date\n  // or compressed timestamp), 11 bytes (timestamp) or 13 bytes (timestamp with\n  // time zone). Time zone information is discarded because Node.js uses UTC\n  // timestamps and the server returns the data in that format, too. The Date\n  // type in Node.js doesn't support time zone information.\n  //---------------------------------------------------------------------------\n  parseOracleDate(buf, useLocalTime = true) {\n    let fseconds = 0;\n    if (buf.length >= 11) {\n      fseconds = Math.floor(buf.readUInt32BE(7) / (1000 * 1000));\n    }\n    const year = (buf[0] - 100) * 100 + buf[1] - 100;\n    return nodbUtil.makeDate(useLocalTime, year, buf[2], buf[3], buf[4] - 1,\n      buf[5] - 1, buf[6] - 1, fseconds, 0);\n  }\n\n  //---------------------------------------------------------------------------\n  // parseOracleNumber()\n  //\n  // Parses an Oracle number from the supplied buffer and returns a Number. It\n  // is assumed at this point that the buffer only contains the encoded numeric\n  // data.\n  //---------------------------------------------------------------------------\n  parseOracleNumber(buf) {\n\n    // the first byte is the exponent; positive numbers have the highest\n    // order bit set, whereas negative numbers have the highest order bit\n    // cleared and the bits inverted\n    let exponent = buf[0];\n    const isPositive = Boolean(exponent & 0x80);\n    if (!isPositive) {\n      exponent = (exponent ^ 0xFF);\n    }\n    exponent -= 193;\n    let decimalPointIndex = exponent * 2 + 2;\n\n    // a mantissa length of 0 implies a value of 0 (if positive) or a value\n    // of -1e126 (if negative)\n    if (buf.length === 1) {\n      if (isPositive) {\n        return \"0\";\n      }\n      return \"-1e126\";\n    }\n\n    // check for the trailing 102 byte for negative numbers and, if present,\n    // reduce the number of mantissa digits\n    let numBytes = buf.length;\n    if (!isPositive && buf[buf.length - 1] === 102) {\n      numBytes -= 1;\n    }\n\n    // process the mantissa bytes which are the remaining bytes; each\n    // mantissa byte is a base-100 digit\n    let base100Digit;\n    const digits = [];\n    for (let i = 1; i < numBytes; i++) {\n\n      // positive numbers have 1 added to them; negative numbers are\n      // subtracted from the value 101\n      if (isPositive) {\n        base100Digit = buf[i] - 1;\n      } else {\n        base100Digit = 101 - buf[i];\n      }\n\n      // process the first digit; leading zeroes are ignored\n      let digit = Math.floor(base100Digit / 10);\n      if (digit === 0 && i === 1) {\n        decimalPointIndex -= 1;\n      } else if (digit === 10) {\n        digits.push(\"1\");\n        digits.push(\"0\");\n        decimalPointIndex += 1;\n      } else if (digit !== 0 || i > 1) {\n        digits.push(digit.toString());\n      }\n\n      // process the second digit; trailing zeroes are ignored\n      digit = base100Digit % 10;\n      if (digit !== 0 || i < numBytes - 1) {\n        digits.push(digit.toString());\n      }\n    }\n\n    // create string of digits for transformation to JS value\n    const chars = [];\n\n    // if negative, include the sign\n    if (!isPositive) {\n      chars.push(\"-\");\n    }\n\n    // if the decimal point index is 0 or less, add the decimal point and\n    // any leading zeroes that are needed\n    if (decimalPointIndex <= 0) {\n      chars.push(\".\");\n      if (decimalPointIndex < 0)\n        chars.push(\"0\".repeat(-decimalPointIndex));\n    }\n\n    // add each of the digits\n    for (let i = 0; i < digits.length; i++) {\n      if (i > 0 && i === decimalPointIndex) {\n        chars.push(\".\");\n      }\n      chars.push(digits[i]);\n    }\n\n    // if the decimal point index exceeds the number of digits, add any\n    // trailing zeroes that are needed\n    if (decimalPointIndex > digits.length) {\n      for (let i = digits.length; i < decimalPointIndex; i++) {\n        chars.push(\"0\");\n      }\n    }\n\n    // convert result to a Number\n    return chars.join(\"\");\n  }\n\n  //---------------------------------------------------------------------------\n  // readBinaryDouble()\n  //\n  // Reads a binary double value from the buffer and returns a Number or a\n  // String, depending on the desired type.\n  //---------------------------------------------------------------------------\n  readBinaryDouble() {\n    const buf = this.readBytesWithLength();\n    if (!buf) {\n      return null;\n    }\n    return this.parseBinaryDouble(buf);\n  }\n\n  //---------------------------------------------------------------------------\n  // readBinaryFloat()\n  //\n  // Reads a binary float value from the buffer and returns a Number or a\n  // String, depending on the desired type.\n  //---------------------------------------------------------------------------\n  readBinaryFloat() {\n    const buf = this.readBytesWithLength();\n    if (!buf) {\n      return null;\n    }\n    return this.parseBinaryFloat(buf);\n  }\n\n  //---------------------------------------------------------------------------\n  // readBinaryInteger()\n  //\n  // Reads a binary integer value from the buffer and returns a Number\n  //---------------------------------------------------------------------------\n  readBinaryInteger() {\n    const buf = this.readBytesWithLength();\n    if (!buf) {\n      return 0;\n    }\n    if (buf.length > 4) {\n      errors.throwErr(errors.ERR_INTEGER_TOO_LARGE, buf.length, 4, this.pos, this.packetNum);\n    }\n    return (buf.readIntBE(0, buf.length));\n  }\n\n  //---------------------------------------------------------------------------\n  // readBool()\n  //\n  // Reads a boolean value from the buffer and returns a Boolean.\n  //---------------------------------------------------------------------------\n  readBool() {\n    const buf = this.readBytesWithLength();\n    if (!buf) {\n      return null;\n    }\n    return (buf[buf.length - 1] === 1);\n  }\n\n  //---------------------------------------------------------------------------\n  // readBytes()\n  //\n  // Returns a Buffer containing the specified number of bytes. If an\n  // insufficient number of bytes are available an error is thrown.\n  //---------------------------------------------------------------------------\n  readBytes(numBytes) {\n    const numBytesLeft = this.numBytesLeft();\n    if (numBytes > numBytesLeft) {\n      errors.throwErr(errors.ERR_UNEXPECTED_END_OF_DATA, numBytes,\n        numBytesLeft);\n    }\n    const buf = this.buf.subarray(this.pos, this.pos + numBytes);\n    this.pos += numBytes;\n    return buf;\n  }\n\n  //---------------------------------------------------------------------------\n  // readBytesWithLength()\n  //\n  // Reads the length from the buffer and then returns a Buffer containing the\n  // specified number of bytes. If the length is 0 or the special null length\n  // indicator value, null is returned instead.\n  //---------------------------------------------------------------------------\n  readBytesWithLength() {\n    const numBytes = this.readUInt8();\n    if (numBytes === 0 || numBytes === constants.TNS_NULL_LENGTH_INDICATOR)\n      return null;\n    return this._readBytesWithLength(numBytes);\n  }\n\n  //---------------------------------------------------------------------------\n  // readDbObject()\n  //\n  // Reads a database object from the buffer and returns the implementation\n  // object (or null, if the object is atomically null).\n  //---------------------------------------------------------------------------\n  readDbObject() {\n    const obj = {};\n    let numBytes = this.readUB4();\n    if (numBytes > 0)\n      obj.toid = Buffer.from(this.readBytesWithLength());\n    numBytes = this.readUB4();\n    if (numBytes > 0)\n      obj.oid = Buffer.from(this.readBytesWithLength());\n    numBytes = this.readUB4();\n    if (numBytes > 0)\n      obj.snapshot = Buffer.from(this.readBytesWithLength());\n    this.skipUB2();                     // version\n    numBytes = this.readUB4();\n    this.skipUB2();                     // flags\n    if (numBytes > 0)\n      obj.packedData = Buffer.from(this.readBytesWithLength());\n    return obj;\n  }\n\n  //---------------------------------------------------------------------------\n  // readInt8()\n  //\n  // Reads a signed 8-bit integer from the buffer.\n  //---------------------------------------------------------------------------\n  readInt8() {\n    const buf = this.readBytes(1);\n    return buf.readInt8();\n  }\n\n  //---------------------------------------------------------------------------\n  // readOracleDate()\n  //\n  // Reads an Oracle date from the buffer and returns a Date or a String,\n  // depending on the desired type.\n  //---------------------------------------------------------------------------\n  readOracleDate(useLocalTime) {\n    const buf = this.readBytesWithLength();\n    if (!buf) {\n      return null;\n    }\n    return this.parseOracleDate(buf, useLocalTime);\n  }\n\n  //---------------------------------------------------------------------------\n  // readOracleNumber()\n  //\n  // Reads an Oracle number from the buffer and returns a Number or a String,\n  // depending on the desired type.\n  //---------------------------------------------------------------------------\n  readOracleNumber() {\n    const buf = this.readBytesWithLength();\n    if (!buf) {\n      return null;\n    }\n    return this.parseOracleNumber(buf);\n  }\n\n  //---------------------------------------------------------------------------\n  // readSB2()\n  //\n  // Reads a signed, variable length integer of up to 2 bytes in length.\n  //---------------------------------------------------------------------------\n  readSB2() {\n    return this._readInteger(2, true, false);\n  }\n\n  //---------------------------------------------------------------------------\n  // readSB4()\n  //\n  // Reads a signed, variable length integer of up to 4 bytes in length.\n  //---------------------------------------------------------------------------\n  readSB4() {\n    return this._readInteger(4, true, false);\n  }\n\n  //---------------------------------------------------------------------------\n  // readSB8()\n  //\n  // Reads a signed, variable length integer of up to 8 bytes in length.\n  //---------------------------------------------------------------------------\n  readSB8() {\n    return this._readInteger(8, true, false);\n  }\n\n  //---------------------------------------------------------------------------\n  // readStr()\n  //\n  // Reads a string from the buffer in the specified character set form.\n  //---------------------------------------------------------------------------\n  readStr(csfrm) {\n    const buf = this.readBytesWithLength();\n    if (!buf) {\n      return null;\n    }\n    if (csfrm === constants.CSFRM_IMPLICIT)\n      return buf.toString();\n\n    // need a copy of the buffer since swap16() changes the buffer in place and\n    // it is possible that the buffer may need to be rescanned (for the case\n    // where insufficient packets are available during the initial scan)\n    return Buffer.from(buf).swap16().toString('utf16le');\n  }\n\n  //---------------------------------------------------------------------------\n  // readUB2()\n  //\n  // Reads an unsigned, variable length integer of up to 2 bytes in length.\n  //---------------------------------------------------------------------------\n  readUB2() {\n    return this._readInteger(2, false, false);\n  }\n\n  //---------------------------------------------------------------------------\n  // readUB4()\n  //\n  // Reads an unsigned, variable length integer of up to 4 bytes in length.\n  //---------------------------------------------------------------------------\n  readUB4() {\n    return this._readInteger(4, false, false);\n  }\n\n  //---------------------------------------------------------------------------\n  // readUB8()\n  //\n  // Reads an unsigned, variable length integer of up to 8 bytes in length.\n  //---------------------------------------------------------------------------\n  readUB8() {\n    return this._readInteger(8, false, false);\n  }\n\n  //---------------------------------------------------------------------------\n  // readUInt8()\n  //\n  // Reads an unsigned 8-bit integer from the buffer.\n  //---------------------------------------------------------------------------\n  readUInt8() {\n    const buf = this.readBytes(1);\n    return buf[0];\n  }\n\n  //---------------------------------------------------------------------------\n  // readUInt16BE()\n  //\n  // Reads an unsigned 16-bit integer from the buffer in big endian order.\n  //---------------------------------------------------------------------------\n  readUInt16BE() {\n    const buf = this.readBytes(2);\n    return buf.readUInt16BE();\n  }\n\n  //---------------------------------------------------------------------------\n  // readUInt16LE()\n  //\n  // Reads an unsigned 16-bit integer from the buffer in little endian order.\n  //---------------------------------------------------------------------------\n  readUInt16LE() {\n    const buf = this.readBytes(2);\n    return buf.readUInt16LE();\n  }\n\n  //---------------------------------------------------------------------------\n  // readUInt32BE()\n  //\n  // Reads an unsigned 32-bit integer from the buffer in big endian order.\n  //---------------------------------------------------------------------------\n  readUInt32BE() {\n    const buf = this.readBytes(4);\n    return buf.readUInt32BE();\n  }\n\n  //---------------------------------------------------------------------------\n  // reserveBytes()\n  //\n  // Reserves the specified number of bytes in the buffer. If not enough bytes\n  // remain in the buffer, the buffer is grown.\n  //---------------------------------------------------------------------------\n  reserveBytes(numBytes) {\n    if (numBytes > this.numBytesLeft()) {\n      this._grow(this.pos + numBytes);\n    }\n    const pos = this.pos;\n    this.pos += numBytes;\n    return pos;\n  }\n\n  //---------------------------------------------------------------------------\n  // skipBytes()\n  //\n  // Skips the specified number of bytes in the buffer.\n  //---------------------------------------------------------------------------\n  skipBytes(numBytes) {\n    if (numBytes > this.numBytesLeft())\n      errors.throwErr(errors.ERR_UNEXPECTED_END_OF_DATA);\n    this.pos += numBytes;\n  }\n\n  //---------------------------------------------------------------------------\n  // skipSB4()\n  //\n  // Skips a signed, variable length integer of up to 4 bytes in length.\n  //---------------------------------------------------------------------------\n  skipSB4() {\n    return this._readInteger(4, true, true);\n  }\n\n  //---------------------------------------------------------------------------\n  // skipUB1()\n  //\n  // Skips a single byte integer in the buffer.\n  //---------------------------------------------------------------------------\n  skipUB1() {\n    this.skipBytes(1);\n  }\n\n  //---------------------------------------------------------------------------\n  // skipUB2()\n  //\n  // Skips an unsigned, variable length integer of up to 2 bytes in length.\n  //---------------------------------------------------------------------------\n  skipUB2() {\n    return this._readInteger(2, false, true);\n  }\n\n  //---------------------------------------------------------------------------\n  // skipUB4()\n  //\n  // Skips an unsigned, variable length integer of up to 4 bytes in length.\n  //---------------------------------------------------------------------------\n  skipUB4() {\n    return this._readInteger(4, false, true);\n  }\n\n  //---------------------------------------------------------------------------\n  // skipUB8()\n  //\n  // Skips an unsigned, variable length integer of up to 8 bytes in length.\n  //---------------------------------------------------------------------------\n  skipUB8() {\n    return this._readInteger(8, false, true);\n  }\n\n  //---------------------------------------------------------------------------\n  // writeBinaryDouble()\n  //\n  // Writes the number in binary double format to the buffer.\n  //---------------------------------------------------------------------------\n  writeBinaryDouble(n, pos) {\n    if (!pos) {\n      pos = this.reserveBytes(8);\n    }\n    this.buf.writeDoubleBE(n, pos);\n    if ((this.buf[pos] & 0x80) === 0) {\n      this.buf[pos] |= 0x80;\n    } else {\n      // We complement the bits for a negative number\n      this.buf[pos] ^= 0xff;\n      this.buf[pos + 1] ^= 0xff;\n      this.buf[pos + 2] ^= 0xff;\n      this.buf[pos + 3] ^= 0xff;\n      this.buf[pos + 4] ^= 0xff;\n      this.buf[pos + 5] ^= 0xff;\n      this.buf[pos + 6] ^= 0xff;\n      this.buf[pos + 7] ^= 0xff;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // writeBinaryFloat()\n  //\n  // Writes the number in binary float format to the buffer.\n  //---------------------------------------------------------------------------\n  writeBinaryFloat(n, pos) {\n    if (!pos) {\n      pos = this.reserveBytes(4);\n    }\n    this.buf.writeFloatBE(n, pos);\n    if ((this.buf[pos] & 0x80) === 0) {\n      this.buf[pos] |= 0x80;\n    } else {\n      // We complement the bits for a negative number\n      this.buf[pos] ^= 0xff;\n      this.buf[pos + 1] ^= 0xff;\n      this.buf[pos + 2] ^= 0xff;\n      this.buf[pos + 3] ^= 0xff;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // writeBytes()\n  //\n  // Writes the bytes in the supplied buffer to the buffer.\n  //---------------------------------------------------------------------------\n  writeBytes(value) {\n    let start = 0;\n    let valueLen = value.length;\n    while (valueLen > 0) {\n      const bytesLeft = this.numBytesLeft();\n      if (bytesLeft === 0) {\n        this._grow(this.pos + valueLen);\n      }\n      const bytesToWrite = Math.min(bytesLeft, valueLen);\n      value.copy(this.buf, this.pos, start, start + bytesToWrite);\n      this.pos += bytesToWrite;\n      start += bytesToWrite;\n      valueLen -= bytesToWrite;\n    }\n  }\n\n  // _writeRawBytesAndLength()\n  //\n  // Writes the length in the format required before\n  // writing the bytes.\n  //---------------------------------------------------------------------------\n  _writeRawBytesAndLength(value, numBytes) {\n    if (numBytes <= constants.TNS_MAX_SHORT_LENGTH) {\n      this.writeUInt8(numBytes);\n      if (numBytes > 0) {\n        this.writeBytes(value);\n      }\n    } else {\n      let start = 0;\n      this.writeUInt8(constants.TNS_LONG_LENGTH_INDICATOR);\n      while (numBytes > 0) {\n        const chunkLen = Math.min(numBytes, constants.BUFFER_CHUNK_SIZE);\n        this.writeUB4(chunkLen);\n        this.writeBytes(value.subarray(start, start + chunkLen));\n        numBytes -= chunkLen;\n        start += chunkLen;\n      }\n      this.writeUB4(0);\n    }\n  }\n  //---------------------------------------------------------------------------\n  // writeBytesWithLength()\n  //\n  // Writes the bytes in the supplied buffer to the buffer, but first writes\n  // the length. If the length exceeds a fixed value, the value is written in\n  // chunks instead.\n  //---------------------------------------------------------------------------\n  writeBytesWithLength(value) {\n    const numBytes = value.length;\n    this._writeRawBytesAndLength(value, numBytes);\n  }\n\n  //---------------------------------------------------------------------------\n  // writeDbObject()\n  //\n  // Writes a database object to the buffer.\n  //---------------------------------------------------------------------------\n  writeDbObject(obj) {\n    this.writeUB4(obj.toid.length);\n    this.writeBytesWithLength(obj.toid);\n    if (obj.oid) {\n      this.writeUB4(obj.oid.length);\n      this.writeBytesWithLength(obj.oid);\n    } else {\n      this.writeUB4(0);\n    }\n    this.writeUB4(0);                   // snapshot\n    this.writeUB4(0);                   // version\n    const packedData = obj._getPackedData();\n    this.writeUB4(packedData.length);\n    this.writeUB4(obj.flags);\n    this.writeBytesWithLength(packedData);\n  }\n\n  //---------------------------------------------------------------------------\n  // writeOracleDate()\n  //\n  // Writes the date to the buffer using the given Oracle type. Note that if a\n  // timestamp with zero milliseconds is written, the type is automatically\n  // changed to DB_TYPE_DATE (except for DB_TYPE_TIMESTAMP_TZ which requires\n  // the full amount to be written).\n  //---------------------------------------------------------------------------\n  writeOracleDate(date, type, writeLength = true) {\n    let fsec;\n    let length = type._bufferSizeFactor;\n    if (length > 7) {\n      fsec = date.getUTCMilliseconds() * 1000 * 1000;\n      if (fsec === 0 && length <= 11)\n        length = 7;\n    }\n    if (writeLength) {\n      this.writeUInt8(length);\n    }\n    const pos = this.reserveBytes(length);\n    if (type === types.DB_TYPE_DATE || type == types.DB_TYPE_TIMESTAMP) {\n      const year = date.getFullYear();\n      this.buf[pos] = Math.trunc(year / 100) + 100;\n      this.buf[pos + 1] = year % 100 + 100;\n      this.buf[pos + 2] = date.getMonth() + 1;\n      this.buf[pos + 3] = date.getDate();\n      this.buf[pos + 4] = date.getHours() + 1;\n      this.buf[pos + 5] = date.getMinutes() + 1;\n      this.buf[pos + 6] = date.getSeconds() + 1;\n    } else {\n      const year = date.getUTCFullYear();\n      this.buf[pos] = Math.trunc(year / 100) + 100;\n      this.buf[pos + 1] = year % 100 + 100;\n      this.buf[pos + 2] = date.getUTCMonth() + 1;\n      this.buf[pos + 3] = date.getUTCDate();\n      this.buf[pos + 4] = date.getUTCHours() + 1;\n      this.buf[pos + 5] = date.getUTCMinutes() + 1;\n      this.buf[pos + 6] = date.getUTCSeconds() + 1;\n    }\n    if (length > 7) {\n      this.buf.writeInt32BE(fsec, pos + 7);\n      if (length > 11) {\n        this.buf[pos + 11] = constants.TZ_HOUR_OFFSET;\n        this.buf[pos + 12] = constants.TZ_MINUTE_OFFSET;\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // writeOracleNumber()\n  //\n  // Writes the number (in string form) in Oracle Number format to the buffer.\n  //---------------------------------------------------------------------------\n  writeOracleNumber(value) {\n\n    // determine if number is negative\n    let isNegative = false;\n    if (value[0] === '-') {\n      isNegative = true;\n      value = value.substring(1);\n    }\n\n    // parse the exponent, if one is present\n    let exponent = 0;\n    const exponentPos = value.indexOf('e');\n    if (exponentPos > 0) {\n      exponent = Number(value.substring(exponentPos + 1));\n      value = value.substring(0, exponentPos);\n    }\n\n    // adjust the exponent and the value if there is a decimal point\n    const decimalPos = value.indexOf('.');\n    if (decimalPos > 0) {\n      exponent -= (value.length - decimalPos - 1);\n      value = value.substring(0, decimalPos) + value.substring(decimalPos + 1);\n    }\n\n    // strip any leading zeroes\n    if (value[0] === '0') {\n      value = value.replace(/^0+/, \"\");\n    }\n\n    // strip any trailing zeroes\n    if (value.length > 0 && value[value.length - 1] === '0') {\n      const trimmedValue = value.replace(/0+$/, \"\");\n      exponent += (value.length - trimmedValue.length);\n      value = trimmedValue;\n    }\n\n    // throw exception if number cannot be represented as an Oracle Number\n    if (value.length > constants.NUMBER_MAX_DIGITS || exponent >= 126 ||\n        exponent <= -131) {\n      errors.throwErr(errors.ERR_ORACLE_NUMBER_NO_REPR);\n    }\n\n    // if the exponent is odd, append a zero\n    if ((exponent > 0 && exponent % 2 === 1) ||\n        (exponent < 0 && exponent % 2 === -1)) {\n      exponent--;\n      value += \"0\";\n    }\n\n    // add a leading zero if the number of digits is odd\n    if (value.length % 2 === 1) {\n      value = \"0\" + value;\n    }\n\n    // write the encoded data to the wire\n    const appendSentinel =\n      (isNegative && value.length < constants.NUMBER_MAX_DIGITS);\n    const numPairs = value.length / 2;\n    let exponentOnWire = ((exponent + value.length) / 2) + 192;\n    if (isNegative) {\n      exponentOnWire = (exponentOnWire ^ 0xFF);\n    } else if (value.length === 0 && exponent === 0) {\n      exponentOnWire = 128;\n    }\n    let pos = this.reserveBytes(numPairs + 2 + appendSentinel);\n    this.buf[pos++] = numPairs + 1 + appendSentinel;\n    this.buf[pos++] = exponentOnWire;\n    for (let i = 0; i < value.length; i += 2) {\n      const base100Digit = Number(value.substring(i, i + 2));\n      if (isNegative) {\n        this.buf[pos++] = 101 - base100Digit;\n      } else {\n        this.buf[pos++] = base100Digit + 1;\n      }\n    }\n    if (appendSentinel) {\n      this.buf[pos] = 102;\n    }\n\n  }\n\n  //---------------------------------------------------------------------------\n  // writeStr()\n  //\n  // Writes the string to the buffer.\n  //---------------------------------------------------------------------------\n  writeStr(s) {\n    this.writeBytes(Buffer.from(s));\n  }\n\n  //---------------------------------------------------------------------------\n  // writeInt32BE()\n  //\n  // Writes a signed 32-bit integer to the buffer in big endian order.\n  //---------------------------------------------------------------------------\n  writeInt32BE(n) {\n    const pos = this.reserveBytes(4);\n    this.buf.writeInt32BE(n, pos);\n  }\n\n  //---------------------------------------------------------------------------\n  // writeUB4()\n  //\n  // Writes an unsigned integer (up to 4 bytes in length) in variable length\n  // format to the buffer.\n  //---------------------------------------------------------------------------\n  writeUB4(value) {\n    if (value === 0) {\n      this.writeUInt8(0);\n    } else if (value <= 0xff) {\n      this.writeUInt8(1);\n      this.writeUInt8(value);\n    } else if (value <= 0xffff) {\n      this.writeUInt8(2);\n      this.writeUInt16BE(value);\n    } else {\n      this.writeUInt8(4);\n      this.writeUInt32BE(value);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // writeUB2()\n  //\n  // Writes an unsigned integer (up to 2 bytes in length) in variable length\n  // format to the buffer.\n  //---------------------------------------------------------------------------\n  writeUB2(value) {\n    if (value === 0) {\n      this.writeUInt8(0);\n    } else if (value <= 0xff) {\n      this.writeUInt8(1);\n      this.writeUInt8(value);\n    } else {\n      this.writeUInt8(2);\n      this.writeUInt16BE(value);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // writeUB8()\n  //\n  // Writes an unsigned integer (up to 8 bytes in length) in variable length\n  // format to the buffer.\n  //---------------------------------------------------------------------------\n  writeUB8(value) {\n    if (value === 0) {\n      this.writeUInt8(0);\n    } else if (value <= 0xff) {\n      this.writeUInt8(1);\n      this.writeUInt8(value);\n    } else if (value <= 0xffff) {\n      this.writeUInt8(2);\n      this.writeUInt16BE(value);\n    } else if (value <= 0xffffffff) {\n      this.writeUInt8(4);\n      this.writeUInt32BE(value);\n    } else {\n      this.writeUInt8(8);\n      this.writeUInt64BE(value);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // writeUInt8()\n  //\n  // Writes an unsigned 8-bit integer to the buffer.\n  //---------------------------------------------------------------------------\n  writeUInt8(n) {\n    const pos = this.reserveBytes(1);\n    this.buf[pos] = n;\n  }\n\n  // writeSB1()\n  //\n  // Writes an signed 8-bit integer to the buffer.\n  //---------------------------------------------------------------------------\n  writeSB1(n) {\n    const pos = this.reserveBytes(1);\n    this.buf[pos] = n;\n  }\n\n  //---------------------------------------------------------------------------\n  // writeUInt16BE()\n  //\n  // Writes an unsigned 16-bit integer to the buffer in big endian order.\n  //---------------------------------------------------------------------------\n  writeUInt16BE(n) {\n    const pos = this.reserveBytes(2);\n    this.buf.writeUInt16BE(n, pos);\n  }\n\n  //---------------------------------------------------------------------------\n  // writeUInt32BE()\n  //\n  // Writes an unsigned 32-bit integer to the buffer in big endian order.\n  //---------------------------------------------------------------------------\n  writeUInt32BE(n) {\n    const pos = this.reserveBytes(4);\n    this.buf.writeUInt32BE(n, pos);\n  }\n\n  //---------------------------------------------------------------------------\n  // writeUInt64BE()\n  //\n  // Writes an unsigned 64-bit integer to the buffer in big endian order. Since\n  // Node.js doesn't support anything above 32-bits without using BigInt, the\n  // higher order bits are simply written as 0.\n  //---------------------------------------------------------------------------\n  writeUInt64BE(n) {\n    const pos = this.reserveBytes(8);\n    this.buf.writeUInt32BE(0, pos);\n    this.buf.writeUInt32BE(n, pos + 4);\n  }\n\n  //---------------------------------------------------------------------------\n  // writeUInt16LE()\n  //\n  // Writes an unsigned 16-bit integer to the buffer in little endian order.\n  //---------------------------------------------------------------------------\n  writeUInt16LE(n) {\n    const pos = this.reserveBytes(2);\n    this.buf.writeUInt16LE(n, pos);\n  }\n\n}\n\nclass GrowableBuffer extends BaseBuffer {\n\n  //---------------------------------------------------------------------------\n  // constructor()\n  //\n  // Initializes the buffer with an initial fixed chunk size.\n  //---------------------------------------------------------------------------\n  constructor(initializer) {\n    if (initializer) {\n      super(initializer);\n    } else {\n      super(constants.BUFFER_CHUNK_SIZE);\n      this.size = this.maxSize;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _grow()\n  //\n  // Called when the buffer needs to grow. Ensures that sufficient space is\n  // allocated to include the requested number of bytes, rounded to the nearest\n  // chunk size.\n  //---------------------------------------------------------------------------\n  _grow(numBytes) {\n    const remainder = numBytes % constants.BUFFER_CHUNK_SIZE;\n    if (remainder > 0) {\n      numBytes += (constants.BUFFER_CHUNK_SIZE - remainder);\n    }\n    const buf = Buffer.allocUnsafe(numBytes);\n    this.buf.copy(buf);\n    this.buf = buf;\n    this.maxSize = this.size = numBytes;\n  }\n}\n\nmodule.exports = {\n  BaseBuffer,\n  GrowableBuffer\n};\n", "// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { BaseBuffer, GrowableBuffer } = require('./buffer.js');\nconst { Buffer } = require('buffer');\nconst constants = require(\"./constants.js\");\nconst errors = require(\"../../errors.js\");\n\n/**\n * Class used for decoding\n */\nclass VectorDecoder extends BaseBuffer {\n\n  //---------------------------------------------------------------------------\n  // decode()\n  //\n  // Decodes the VECTOR image and returns a JavaScript array corresponding to\n  // its contents.\n  //---------------------------------------------------------------------------\n  decode() {\n\n    // parse header\n    const magicByte = this.readUInt8();\n    if (magicByte != constants.TNS_VECTOR_MAGIC_BYTE)\n      errors.throwErr(errors.ERR_UNEXPECTED_DATA,\n        Buffer.from([magicByte]).toString('hex'));\n    const version = this.readUInt8();\n    if (version != constants.TNS_VECTOR_VERSION)\n      errors.throwErr(errors.ERR_VECTOR_VERSION_NOT_SUPPORTED, version);\n    const flags = this.readUInt16BE();\n    const vectorFormat = this.readUInt8();\n    const numElements = this.readUInt32BE();\n    let elementSize, result;\n    if (vectorFormat === constants.VECTOR_FORMAT_FLOAT32) {\n      elementSize = 4;\n      result = new Float32Array(numElements);\n    } else if (vectorFormat === constants.VECTOR_FORMAT_FLOAT64) {\n      elementSize = 8;\n      result = new Float64Array(numElements);\n    } else if (vectorFormat === constants.VECTOR_FORMAT_INT8) {\n      elementSize = 1;\n      result = new Int8Array(numElements);\n    } else {\n      errors.throwErr(errors.ERR_VECTOR_FORMAT_NOT_SUPPORTED, vectorFormat);\n    }\n    if (flags & constants.TNS_VECTOR_FLAG_NORM)\n      this.skipBytes(8);\n\n    // parse data\n    for (let i = 0; i < numElements; i++) {\n      const buf = this.readBytes(elementSize);\n      if (vectorFormat === constants.VECTOR_FORMAT_FLOAT32) {\n        result[i] = this.parseBinaryFloat(buf);\n      } else if (vectorFormat === constants.VECTOR_FORMAT_FLOAT64)  {\n        result[i] = this.parseBinaryDouble(buf);\n      } else {\n        result[i] = buf[0];\n      }\n    }\n\n    return result;\n  }\n\n}\n\nclass VectorEncoder extends GrowableBuffer {\n\n  //---------------------------------------------------------------------------\n  // encode()\n  //\n  // Encodes the value as OSON and returns a buffer containing the OSON bytes.\n  //---------------------------------------------------------------------------\n  encode(value) {\n\n    // determine some basic information about the vector\n    let vectorFormat = constants.VECTOR_FORMAT_FLOAT32;\n    let writeFn = this.writeBinaryFloat.bind(this);\n\n    if (Array.isArray(value) || value instanceof Float64Array) {\n      vectorFormat = constants.VECTOR_FORMAT_FLOAT64;\n      writeFn = this.writeBinaryDouble.bind(this);\n    } else if (value instanceof Int8Array) {\n      vectorFormat = constants.VECTOR_FORMAT_INT8;\n      writeFn = this.writeSB1.bind(this);\n    }\n\n    // Let server generate the norm (TNS_VECTOR_FLAG_NORMSRC)\n    const flags = constants.TNS_VECTOR_FLAG_NORM\n      | constants.TNS_VECTOR_FLAG_NORMSRC;\n\n    // write header\n    this.writeUInt8(constants.TNS_VECTOR_MAGIC_BYTE);\n    this.writeUInt8(constants.TNS_VECTOR_VERSION);\n    this.writeUInt16BE(flags);\n    this.writeUInt8(vectorFormat);\n    this.writeUInt32BE(value.length);\n    this.reserveBytes(8);\n\n    // write data\n    value.forEach((element) => {\n      writeFn(element);\n    });\n\n    return this.buf.subarray(0, this.pos);\n  }\n\n}\n\nmodule.exports = {\n  VectorDecoder,\n  VectorEncoder\n};\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst types = require('./types.js');\nconst nodbUtil = require(\"./util.js\");\nconst vector = require('./impl/datahandlers/vector.js');\n\nclass Settings {\n\n  constructor() {\n    this.autoCommit = false;\n    this.connectionClass = '';\n    this.dbObjectAsPojo = false;\n    this.edition = '';\n    this.errorOnConcurrentExecute = false;\n    this.events = false;\n    this.externalAuth = false;\n    this.fetchArraySize = 100;\n    this.fetchAsBuffer = [];\n    this.fetchAsString = [];\n    this.lobPrefetchSize = 16384;\n    this.maxRows = 0;\n    this.outFormat = constants.OUT_FORMAT_ARRAY;\n    this.poolIncrement = 1;\n    this.poolMax = 4;\n    this.poolMaxPerShard = 0;\n    this.poolMin = 0;\n    this.poolPingInterval = 60;\n    this.poolPingTimeout = 5000;\n    this.poolTimeout = 60;\n    this.prefetchRows = 2;\n    this.queueTimeout = 60000;\n    this.queueMax = 500;\n    this.stmtCacheSize = 30;\n    this.thin = true;\n    this.thinDriverInitialized = false;\n    this.createFetchTypeMap(this.fetchAsString, this.fetchAsBuffer);\n    this.fetchTypeHandler = undefined;\n    this._JsonId = types.JsonId;\n  }\n\n  //---------------------------------------------------------------------------\n  // _getDateComponents()\n  //\n  // Returns the components of a date. DATE and TIMESTAMP data from the\n  // database are returned as though they used the JavaScript time zone\n  // setting. TIMESTAMP WITH TIME ZONE and TIMESTAMP WITH LOCAL TIME ZONE data\n  // are returned in native JavaScript format (since they contain time zone\n  // information). This is used only in Thick mode (from node-oracledb 6.0.0).\n  //---------------------------------------------------------------------------\n  _getDateComponents(useLocal, date) {\n    if (useLocal) {\n      return [\n        date.getFullYear(),\n        date.getMonth() + 1,\n        date.getDate(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds(),\n        date.getMilliseconds() * 1000 * 1000\n      ];\n    } else {\n      return [\n        date.getUTCFullYear(),\n        date.getUTCMonth() + 1,\n        date.getUTCDate(),\n        date.getUTCHours(),\n        date.getUTCMinutes(),\n        date.getUTCSeconds(),\n        date.getUTCMilliseconds() * 1000 * 1000\n      ];\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _makeDate()\n  //\n  // Returns a date from the given components. DATE and TIMESTAMP data from the\n  // database are returned as though they used the JavaScript time zone\n  // setting. TIMESTAMP WITH TIME ZONE and TIMESTAMP WITH LOCAL TIME ZONE data\n  // are returned in native JavaScript format (since they contain time zone\n  // information).\n  //---------------------------------------------------------------------------\n  _makeDate(useLocal, year, month, day, hour, minute, second, fseconds, offset) {\n    return nodbUtil.makeDate(useLocal, year, month, day, hour, minute, second, fseconds, offset);\n  }\n\n  //---------------------------------------------------------------------------\n  // _decodeVector()\n  //\n  // Returns a typed array by decoding buffer.\n  //\n  //---------------------------------------------------------------------------\n  _decodeVector(buffer) {\n    const decoder = new vector.VectorDecoder(buffer);\n    return decoder.decode();\n  }\n\n  //---------------------------------------------------------------------------\n  // _encodeVector()\n  //\n  // Create a Vector image from typedarray\n  //\n  //---------------------------------------------------------------------------\n  _encodeVector(value) {\n    const encoder = new vector.VectorEncoder();\n    return encoder.encode(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // addToOptions()\n  //\n  // Adds the named settingsto the options, if no option has already been\n  // specified.\n  //---------------------------------------------------------------------------\n  addToOptions(options) {\n    for (let i = 1; i < arguments.length; i++) {\n      const key = arguments[i];\n      if (options[key] === undefined)\n        options[key] = this[key];\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // createFetchTypeMap()\n  //\n  // Creates the fetch type map. This overrides the default fetch type mapping\n  // used by the driver with the contents of the fetchAsString and\n  // fetchAsBuffer arrays. The error checking is performed here as well in\n  // order to eliminate repeated code.\n  // ---------------------------------------------------------------------------\n  createFetchTypeMap(fetchAsString, fetchAsBuffer) {\n\n    // create a copy of the default fetch type map\n    const map = new Map(types.DB_TYPE_FETCH_TYPE_MAP);\n\n    // adjust map for fetchAsString settings\n    for (const element of fetchAsString) {\n      switch (element) {\n        case types.DB_TYPE_NUMBER:\n          map.set(types.DB_TYPE_BINARY_DOUBLE, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_BINARY_FLOAT, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_BINARY_INTEGER, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_NUMBER, types.DB_TYPE_VARCHAR);\n          break;\n        case types.DB_TYPE_TIMESTAMP:\n          map.set(types.DB_TYPE_DATE, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_TIMESTAMP, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_TIMESTAMP_TZ, types.DB_TYPE_VARCHAR);\n          map.set(types.DB_TYPE_TIMESTAMP_LTZ, types.DB_TYPE_VARCHAR);\n          break;\n        case types.DB_TYPE_CLOB:\n        case types.DB_TYPE_NCLOB:\n          map.set(types.DB_TYPE_CLOB, types.DB_TYPE_LONG);\n          map.set(types.DB_TYPE_NCLOB, types.DB_TYPE_LONG_NVARCHAR);\n          break;\n        case types.DB_TYPE_VECTOR:\n          map.set(types.DB_TYPE_VECTOR, types.DB_TYPE_LONG);\n          break;\n        case types.DB_TYPE_RAW:\n          map.set(types.DB_TYPE_RAW, types.DB_TYPE_VARCHAR);\n          break;\n        case types.DB_TYPE_JSON:\n          map.set(types.DB_TYPE_JSON, types.DB_TYPE_VARCHAR);\n          break;\n        default:\n          errors.throwErr(errors.ERR_INVALID_TYPE_FOR_CONVERSION);\n      }\n    }\n\n    // adjust map for fetchAsBuffer settings\n    for (const element of fetchAsBuffer) {\n      switch (element) {\n        case types.DB_TYPE_BLOB:\n          map.set(types.DB_TYPE_BLOB, types.DB_TYPE_LONG_RAW);\n          break;\n        default:\n          errors.throwErr(errors.ERR_INVALID_TYPE_FOR_CONVERSION);\n      }\n    }\n\n    // assign calculated fetchTypeMap for later use\n    this.fetchTypeMap = map;\n\n  }\n\n}\n\nmodule.exports = new Settings();\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst util = require('util');\n\n// define error prefix for all messages\nconst ERR_PREFIX = \"NJS\";\n\nconst ERR_INTEGRITY_ERROR_CODES = [\n  1,     // unique constraint violated\n  1400,  // cannot insert NULL\n  1438,  // value larger than specified precision\n  2290,  // check constraint violated\n  2291,  // integrity constraint violated - parent key not found\n  2292,  // integrity constraint violated - child record found\n  21525, // attribute or collection element violated its constraints\n  40479, // internal JSON serializer error\n];\n\n// define error number constants (used in JavaScript library)\nconst ERR_INVALID_POOL = 2;\nconst ERR_INVALID_CONNECTION = 3;\nconst ERR_INVALID_PROPERTY_VALUE = 4;\nconst ERR_INVALID_PARAMETER_VALUE = 5;\nconst ERR_INVALID_PROPERTY_VALUE_IN_PARAM = 7;\nconst ERR_INVALID_NUMBER_OF_PARAMETERS = 9;\nconst ERR_UNSUPPORTED_DATA_TYPE = 10;\nconst ERR_BIND_VALUE_AND_TYPE_MISMATCH = 11;\nconst ERR_INVALID_BIND_DATA_TYPE = 12;\nconst ERR_INVALID_BIND_DIRECTION = 13;\nconst ERR_NO_TYPE_FOR_CONVERSION = 15;\nconst ERR_INSUFFICIENT_BUFFER_FOR_BINDS = 16;\nconst ERR_BUSY_RS = 17;\nconst ERR_INVALID_RS = 18;\nconst ERR_NOT_A_QUERY = 19;\nconst ERR_INVALID_TYPE_FOR_CONVERSION = 21;\nconst ERR_INVALID_LOB = 22;\nconst ERR_BUSY_LOB = 23;\nconst ERR_INSUFFICIENT_MEMORY = 24;\nconst ERR_INVALID_TYPE_FOR_ARRAY_BIND = 34;\nconst ERR_REQUIRED_MAX_ARRAY_SIZE = 35;\nconst ERR_INVALID_ARRAY_SIZE = 36;\nconst ERR_INCOMPATIBLE_TYPE_ARRAY_BIND = 37;\nconst ERR_CONN_REQUEST_TIMEOUT = 40;\nconst ERR_CANNOT_CONVERT_RS_TO_STREAM = 41;\nconst ERR_CANNOT_INVOKE_RS_METHODS = 42;\nconst ERR_RS_ALREADY_CONVERTED = 43;\nconst ERR_INVALID_BIND_UNIT = 44;\nconst ERR_CANNOT_LOAD_BINARY = 45;\nconst ERR_POOL_WITH_ALIAS_ALREADY_EXISTS = 46;\nconst ERR_POOL_WITH_ALIAS_NOT_FOUND = 47;\nconst ERR_INCOMPATIBLE_TYPE_ARRAY_INDEX_BIND = 52;\nconst ERR_MIXED_BIND = 55;\nconst ERR_MISSING_MAX_SIZE_BY_POS = 56;\nconst ERR_MISSING_MAX_SIZE_BY_NAME = 57;\nconst ERR_MAX_SIZE_TOO_SMALL = 58;\nconst ERR_MISSING_TYPE_BY_POS = 59;\nconst ERR_MISSING_TYPE_BY_NAME = 60;\nconst ERR_INVALID_SUBSCR = 61;\nconst ERR_MISSING_SUBSCR_CALLBACK = 62;\nconst ERR_MISSING_SUBSCR_SQL = 63;\nconst ERR_POOL_CLOSING = 64;\nconst ERR_POOL_CLOSED = 65;\nconst ERR_INVALID_SODA_DOC_CURSOR = 66;\nconst ERR_NO_BINARY_AVAILABLE = 67;\nconst ERR_INVALID_ERR_NUM = 68;\nconst ERR_NODE_TOO_OLD = 69;\nconst ERR_INVALID_AQ_MESSAGE = 70;\nconst ERR_DBL_CONNECT_STRING = 75;\nconst ERR_QUEUE_MAX_EXCEEDED = 76;\nconst ERR_UNSUPPORTED_DATA_TYPE_IN_JSON = 78;\nconst ERR_DBL_USER = 80;\nconst ERR_CONCURRENT_OPS = 81;\nconst ERR_POOL_RECONFIGURING = 82;\nconst ERR_POOL_STATISTICS_DISABLED = 83;\nconst ERR_TOKEN_BASED_AUTH = 84;\nconst ERR_POOL_TOKEN_BASED_AUTH = 85;\nconst ERR_CONN_TOKEN_BASED_AUTH = 86;\nconst ERR_TOKEN_HAS_EXPIRED = 87;\nconst ERR_NOT_IMPLEMENTED = 89;\nconst ERR_INIT_ORACLE_CLIENT_ARGS = 90;\nconst ERR_MISSING_FILE = 91;\nconst ERR_INVALID_NUMBER_OF_CONNECTIONS = 92;\nconst ERR_EXEC_MODE_ONLY_FOR_DML = 95;\nconst ERR_INVALID_BIND_NAME = 97;\nconst ERR_WRONG_NUMBER_OF_POSITIONAL_BINDS = 98;\nconst ERR_BUFFER_LENGTH_INSUFFICIENT = 99;\nconst ERR_NCHAR_CS_NOT_SUPPORTED = 100;\nconst ERR_MISSING_CREDENTIALS = 101;\nconst ERR_UNEXPECTED_END_OF_DATA = 102;\nconst ERR_UNEXPECTED_MESSAGE_TYPE = 103;\nconst ERR_POOL_HAS_BUSY_CONNECTIONS = 104;\nconst ERR_NAN_VALUE = 105;\nconst ERR_INTERNAL = 106;\nconst ERR_INVALID_REF_CURSOR = 107;\nconst ERR_INVALID_TYPE_NUM = 109;\nconst ERR_INVALID_ORACLE_TYPE_NUM = 110;\nconst ERR_UNEXPECTED_NEGATIVE_INTEGER = 111;\nconst ERR_INTEGER_TOO_LARGE = 112;\nconst ERR_UNEXPECTED_DATA = 113;\nconst ERR_OSON_FIELD_NAME_LIMITATION = 114;\nconst ERR_ORACLE_NUMBER_NO_REPR = 115;\nconst ERR_UNSUPPORTED_VERIFIER_TYPE = 116;\nconst ERR_THIN_CONNECTION_ALREADY_CREATED = 118;\nconst ERR_UNSUPPORTED_CONVERSION = 119;\nconst ERR_FETCH_TYPE_HANDLER_RETURN_VALUE = 120;\nconst ERR_FETCH_TYPE_HANDLER_TYPE = 121;\nconst ERR_FETCH_TYPE_HANDLER_CONVERTER = 122;\nconst ERR_CALL_TIMEOUT_EXCEEDED = 123;\nconst ERR_EMPTY_CONNECT_STRING = 125;\nconst ERR_OSON_VERSION_NOT_SUPPORTED = 126;\nconst ERR_UNKOWN_SERVER_SIDE_PIGGYBACK = 127;\nconst ERR_UNKNOWN_COLUMN_TYPE_NAME = 128;\nconst ERR_INVALID_OBJECT_TYPE_NAME = 129;\nconst ERR_TDS_TYPE_NOT_SUPPORTED = 130;\nconst ERR_INVALID_COLL_INDEX_SET = 131;\nconst ERR_INVALID_COLL_INDEX_GET = 132;\nconst ERR_DELETE_ELEMENTS_OF_VARRAY = 133;\nconst ERR_WRONG_VALUE_FOR_DBOBJECT_ATTR = 134;\nconst ERR_WRONG_VALUE_FOR_DBOBJECT_ELEM = 135;\nconst ERR_WRONG_CRED_FOR_EXTAUTH = 136;\nconst ERR_MISSING_BIND_VALUE = 137;\nconst ERR_SERVER_VERSION_NOT_SUPPORTED = 138;\nconst ERR_UNEXPECTED_XML_TYPE = 139;\nconst ERR_WRONG_USER_FORMAT_EXTAUTH_PROXY = 140;\nconst ERR_TOO_MANY_BATCH_ERRORS = 141;\nconst ERR_WRONG_LENGTH_FOR_DBOBJECT_ATTR = 142;\nconst ERR_WRONG_LENGTH_FOR_DBOBJECT_ELEM = 143;\nconst ERR_VECTOR_FORMAT_NOT_SUPPORTED = 144;\nconst ERR_VECTOR_VERSION_NOT_SUPPORTED = 145;\nconst ERR_OBJECT_IS_NOT_A_COLLECTION = 146;\nconst ERR_CURSOR_HAS_BEEN_CLOSED = 147;\nconst ERR_DML_RETURNING_DUP_BINDS = 149;\n\n// Oracle Net layer errors start from 500\nconst ERR_CONNECTION_CLOSED = 500;\nconst ERR_CONNECTION_LOSTCONTACT = 501;\nconst ERR_CONNECTION_INCOMPLETE = 503;\nconst ERR_PROXY_CONNECTION_FAILURE = 504;\nconst ERR_TLS_INIT_FAILURE = 505;\nconst ERR_TLS_AUTH_FAILURE = 506;\nconst ERR_TLS_DNMATCH_FAILURE = 507;\nconst ERR_TLS_HOSTMATCH_FAILURE = 508;\nconst ERR_INVALID_PACKET = 509;\nconst ERR_CONNECTION_TIMEDOUT = 510;\nconst ERR_CONNECTION_REFUSED = 511;\nconst ERR_INVALID_CONNECT_STRING_PARAMETERS = 512;\nconst ERR_CONNECTION_INBAND = 513;\nconst ERR_INVALID_CONNECT_STRING_SYNTAX = 514;\nconst ERR_INVALID_EZCONNECT_SYNTAX = 515;\nconst ERR_NO_CONFIG_DIR = 516;\nconst ERR_TNS_ENTRY_NOT_FOUND = 517;\nconst ERR_INVALID_SERVICE_NAME = 518;\nconst ERR_INVALID_SID = 519;\nconst ERR_TNS_NAMES_FILE_MISSING = 520;\nconst ERR_CONNECTION_EOF = 521;\n\n// Oracle SUCCESS_WITH_INFO warning start from 700\nconst WRN_COMPILATION_CREATE = 700;\n\n// define mapping for ODPI-C, OCI & ORA errors that need to be wrapped\n// with NJS errors\nconst adjustErrorXref = new Map();\nadjustErrorXref.set(\"DPI-1010\", ERR_INVALID_CONNECTION);\nadjustErrorXref.set(\"DPI-1024\", [ERR_INVALID_COLL_INDEX_GET, 'at index ([0-9]+) does']);\nadjustErrorXref.set(\"DPI-1044\", ERR_ORACLE_NUMBER_NO_REPR);\nadjustErrorXref.set(\"DPI-1055\", ERR_NAN_VALUE);\nadjustErrorXref.set(\"DPI-1063\", ERR_EXEC_MODE_ONLY_FOR_DML);\nadjustErrorXref.set(\"DPI-1067\", [ERR_CALL_TIMEOUT_EXCEEDED, \"call timeout of ([0-9]+) ms\"]);\nadjustErrorXref.set(\"DPI-1080\", ERR_CONNECTION_CLOSED);\nadjustErrorXref.set(\"OCI-22303\", [ERR_INVALID_OBJECT_TYPE_NAME, 'type \"([^\"]*\".\"[^\"]*)\"']);\nadjustErrorXref.set(\"OCI-22164\", ERR_DELETE_ELEMENTS_OF_VARRAY);\nadjustErrorXref.set(\"OCI-22165\", [ERR_INVALID_COLL_INDEX_SET, /index \\[([0-9]+)\\] must be in the range of \\[([0-9]+)\\] to \\[([0-9]+)\\]/]);\nadjustErrorXref.set(\"ORA-00028\", ERR_CONNECTION_CLOSED);\nadjustErrorXref.set(\"ORA-00600\", ERR_CONNECTION_CLOSED);\nadjustErrorXref.set(\"ORA-24338\", ERR_INVALID_REF_CURSOR);\nadjustErrorXref.set(\"ORA-25708\", ERR_TOKEN_HAS_EXPIRED);\nadjustErrorXref.set(\"ORA-24344\", WRN_COMPILATION_CREATE);\n\n// define mapping for error messages\nconst messages = new Map();\nmessages.set(ERR_INVALID_POOL,                          // NJS-002\n  'invalid pool');\nmessages.set(ERR_INVALID_CONNECTION,                    // NJS-003\n  'invalid or closed connection');\nmessages.set(ERR_INVALID_PROPERTY_VALUE,                // NJS-004\n  'invalid value for property \"%s\"');\nmessages.set(ERR_INVALID_PARAMETER_VALUE,               // NJS-005\n  'invalid value for parameter %d');\nmessages.set(ERR_INVALID_PROPERTY_VALUE_IN_PARAM,       // NJS-007\n  'invalid value for \"%s\" in parameter %d');\nmessages.set(ERR_INVALID_NUMBER_OF_PARAMETERS,          // NJS-009\n  'invalid number of parameters');\n// used in C -- keep synchronized!\nmessages.set(ERR_UNSUPPORTED_DATA_TYPE,                 // NJS-010\n  'unsupported data type %d in column %d');\nmessages.set(ERR_BIND_VALUE_AND_TYPE_MISMATCH,          // NJS-011\n  'encountered bind value and type mismatch');\nmessages.set(ERR_INVALID_BIND_DATA_TYPE,                // NJS-012\n  'encountered invalid bind data type in parameter %d');\nmessages.set(ERR_INVALID_BIND_DIRECTION,                // NJS-013\n  'invalid bind direction');\nmessages.set(ERR_NO_TYPE_FOR_CONVERSION,                // NJS-015\n  'type was not specified for conversion');\n// used in C -- keep synchronized!\nmessages.set(ERR_INSUFFICIENT_BUFFER_FOR_BINDS,         // NJS-016\n  'buffer is too small for OUT binds');\nmessages.set(ERR_BUSY_RS,                               // NJS-017\n  'concurrent operations on ResultSet are not allowed');\nmessages.set(ERR_INVALID_RS,                            // NJS-018\n  'invalid ResultSet');\nmessages.set(ERR_NOT_A_QUERY,                           // NJS-019\n  'ResultSet cannot be returned for non-query statements');\nmessages.set(ERR_INVALID_TYPE_FOR_CONVERSION,           // NJS-021\n  'invalid type for conversion specified');\nmessages.set(ERR_INVALID_LOB,                           // NJS-022\n  'invalid Lob');\nmessages.set(ERR_BUSY_LOB,                              // NJS-023\n  'concurrent operations on a Lob are not allowed');\n// used in C -- keep synchronized!\nmessages.set(ERR_INSUFFICIENT_MEMORY,                   // NJS-024\n  'memory allocation failed');\nmessages.set(ERR_INVALID_TYPE_FOR_ARRAY_BIND,           // NJS-034\n  'data type is unsupported for array bind');\nmessages.set(ERR_REQUIRED_MAX_ARRAY_SIZE,               // NJS-035\n  'maxArraySize is required for IN OUT array bind');\nmessages.set(ERR_INVALID_ARRAY_SIZE,                    // NJS-036\n  'length of given array is greater than \"maxArraySize\"');\nmessages.set(ERR_INCOMPATIBLE_TYPE_ARRAY_BIND,          // NJS-037\n  'invalid data type at array index %d for bind \":%s\"');\nmessages.set(ERR_CONN_REQUEST_TIMEOUT,                  // NJS-040\n  'connection request timeout. Request exceeded \"queueTimeout\" of %d');\nmessages.set(ERR_CANNOT_CONVERT_RS_TO_STREAM,           // NJS-041\n  'cannot convert ResultSet to QueryStream after invoking methods');\nmessages.set(ERR_CANNOT_INVOKE_RS_METHODS,              // NJS-042\n  'cannot invoke ResultSet methods after converting to QueryStream');\nmessages.set(ERR_RS_ALREADY_CONVERTED,                  // NJS-043\n  'ResultSet already converted to QueryStream');\nmessages.set(ERR_INVALID_BIND_UNIT,                     // NJS-044\n  'bind object must contain one of the following attributes: \"dir\", \"type\", \"maxSize\", or \"val\"');\nmessages.set(ERR_CANNOT_LOAD_BINARY,                    // NJS-045\n  'cannot load a node-oracledb Thick mode binary for Node.js. Please try using Thin mode. %s');\nmessages.set(ERR_POOL_WITH_ALIAS_ALREADY_EXISTS,        // NJS-046\n  'pool alias \"%s\" already exists in the connection pool cache');\nmessages.set(ERR_POOL_WITH_ALIAS_NOT_FOUND,             // NJS-047\n  'pool alias \"%s\" not found in connection pool cache');\nmessages.set(ERR_INCOMPATIBLE_TYPE_ARRAY_INDEX_BIND,    // NJS-052\n  'invalid data type at array index %d for bind position %d');\nmessages.set(ERR_MIXED_BIND,                            // NJS-055\n  'binding by position and name cannot be mixed');\nmessages.set(ERR_MISSING_MAX_SIZE_BY_POS,               // NJS-056\n  'maxSize for bind position %d must be specified and be greater than zero');\nmessages.set(ERR_MISSING_MAX_SIZE_BY_NAME,              // NJS-057\n  'maxSize for bind \"%s\" must be specified and greater than zero');\nmessages.set(ERR_MAX_SIZE_TOO_SMALL,                    // NJS-058\n  'maxSize of %d is too small for value of length %d in row %d');\nmessages.set(ERR_MISSING_TYPE_BY_POS,                   // NJS-059\n  'type must be specified for bind position %d');\nmessages.set(ERR_MISSING_TYPE_BY_NAME,                  // NJS-060\n  'type must be specified for bind \"%s\"');\nmessages.set(ERR_INVALID_SUBSCR,                        // NJS-061\n  'invalid subscription');\nmessages.set(ERR_MISSING_SUBSCR_CALLBACK,               // NJS-062\n  'subscription notification callback missing');\nmessages.set(ERR_MISSING_SUBSCR_SQL,                    // NJS-063\n  'subscription notification SQL missing');\nmessages.set(ERR_POOL_CLOSING,                          // NJS-064\n  'connection pool is closing');\nmessages.set(ERR_POOL_CLOSED,                           // NJS-065\n  'connection pool was closed');\nmessages.set(ERR_INVALID_SODA_DOC_CURSOR,               // NJS-066\n  'invalid SODA document cursor');\nmessages.set(ERR_NO_BINARY_AVAILABLE,                   // NJS-067\n  'a pre-built node-oracledb Thick mode binary was not found for %s');\nmessages.set(ERR_INVALID_ERR_NUM,                       // NJS-068\n  'invalid error number %d supplied');\nmessages.set(ERR_NODE_TOO_OLD,                          // NJS-069\n  'node-oracledb %s requires Node.js %s or later');\nmessages.set(ERR_INVALID_AQ_MESSAGE,                    // NJS-070\n  'message must be a string, buffer, database object or an object containing a payload property which itself is a string, buffer or database object');\nmessages.set(ERR_DBL_CONNECT_STRING,                    // NJS-075\n  'only one of \"connectString\" and \"connectionString\" can be used');\nmessages.set(ERR_QUEUE_MAX_EXCEEDED,                    // NJS-076\n  'connection request rejected. Pool queue length \"queueMax\" %d reached');\n// used in C -- keep synchronized!\nmessages.set(ERR_UNSUPPORTED_DATA_TYPE_IN_JSON,         // NJS-078\n  'unsupported data type %d in JSON value');\nmessages.set(ERR_DBL_USER,                              // NJS-080\n  'only one of \"user\" and \"username\" can be used');\nmessages.set(ERR_CONCURRENT_OPS,                        // NJS-081\n  'concurrent operations on a connection are disabled');\nmessages.set(ERR_POOL_RECONFIGURING,                    // NJS-082\n  'connection pool is being reconfigured');\nmessages.set(ERR_POOL_STATISTICS_DISABLED,              // NJS-083\n  'pool statistics are not enabled');\nmessages.set(ERR_TOKEN_BASED_AUTH,                      // NJS-084\n  'invalid access token');\nmessages.set(ERR_POOL_TOKEN_BASED_AUTH,                 // NJS-085\n  'invalid connection pool configuration with token-based authentication. The \"homogeneous\" and \"externalAuth\" attributes must be set to true');\nmessages.set(ERR_CONN_TOKEN_BASED_AUTH,                 // NJS-086\n  'invalid standalone configuration with token-based authentication. The \"externalAuth\" attribute must be set to true');\nmessages.set(ERR_TOKEN_HAS_EXPIRED,                     // NJS-087\n  'access token has expired');\nmessages.set(ERR_NOT_IMPLEMENTED,                       // NJS-089\n  '%s is not supported by node-oracledb in Thin mode');\nmessages.set(ERR_INIT_ORACLE_CLIENT_ARGS,               // NJS-090\n  'initOracleClient() was already called with different arguments');\nmessages.set(ERR_MISSING_FILE,                          // NJS-091\n  'file %s is missing');\nmessages.set(ERR_INVALID_NUMBER_OF_CONNECTIONS,         // NJS-092\n  '\"poolMax\" %d must be greater than or equal to \"poolMin\" %d');\nmessages.set(ERR_EXEC_MODE_ONLY_FOR_DML,                // NJS-095\n  'setting \"batchErrors\" or \"dmlRowCounts\" to true is only permitted for DML statements');\nmessages.set(ERR_INVALID_BIND_NAME,                     // NJS-097\n  'no bind placeholder named \":%s\" was found in the statement text');\nmessages.set(ERR_WRONG_NUMBER_OF_POSITIONAL_BINDS,      // NJS-098\n  '%s positional bind values are required but %s were provided');\nmessages.set(ERR_BUFFER_LENGTH_INSUFFICIENT,            // NJS-099\n  'internal error: buffer of length %s insufficient to hold %s bytes');\nmessages.set(ERR_NCHAR_CS_NOT_SUPPORTED,                // NJS-100\n  'national character set id %d is not supported by node-oracledb in Thin mode');\nmessages.set(ERR_MISSING_CREDENTIALS,                   // NJS-101\n  'no credentials specified');\nmessages.set(ERR_UNEXPECTED_END_OF_DATA,                // NJS-102\n  'unexpected end of data: want %d bytes but only %d bytes are available');\nmessages.set(ERR_UNEXPECTED_MESSAGE_TYPE,               // NJS-103\n  'unexpected message type %d received at position %d of packet %d');\nmessages.set(ERR_POOL_HAS_BUSY_CONNECTIONS,             // NJS-104\n  'connection pool cannot be closed because connections are busy');\nmessages.set(ERR_NAN_VALUE,                             // NJS-105\n  'value is not a number (NaN) and cannot be used in Oracle Database numbers');\nmessages.set(ERR_INTERNAL,                              // NJS-106\n  'internal error: %s');\nmessages.set(ERR_INVALID_REF_CURSOR,                    // NJS-107\n  'invalid cursor');\nmessages.set(ERR_INVALID_TYPE_NUM,                      // NJS-109\n  'invalid type number %d');\nmessages.set(ERR_INVALID_ORACLE_TYPE_NUM,               // NJS-110\n  'invalid Oracle type number %d [csfrm: %d]');\nmessages.set(ERR_UNEXPECTED_NEGATIVE_INTEGER,           // NJS-111\n  'internal error: read a negative integer when expecting a positive integer at position %d of packet %d');\nmessages.set(ERR_INTEGER_TOO_LARGE,                     // NJS-112\n  'internal error: read integer of length %d when expecting integer of no more than length %d at position %d of packet %d');\nmessages.set(ERR_UNEXPECTED_DATA,                       // NJS-113\n  'unexpected data received: %s');\nmessages.set(ERR_OSON_FIELD_NAME_LIMITATION,            // NJS-114\n  'OSON field names may not exceed %d UTF-8 encoded bytes');\nmessages.set(ERR_ORACLE_NUMBER_NO_REPR,                 // NJS-115\n  'value cannot be represented as an Oracle Database number');\nmessages.set(ERR_UNSUPPORTED_VERIFIER_TYPE,             // NJS-116\n  'password verifier type 0x%s is not supported by node-oracledb in Thin mode');\nmessages.set(ERR_THIN_CONNECTION_ALREADY_CREATED,       // NJS-118\n  'node-oracledb Thick mode cannot be enabled because a Thin mode connection has already been created');\nmessages.set(ERR_UNSUPPORTED_CONVERSION,                // NJS-119\n  'conversion from type %s to type %s is not supported');\nmessages.set(ERR_FETCH_TYPE_HANDLER_RETURN_VALUE,       // NJS-120\n  'fetchTypeHandler return value must be an object');\nmessages.set(ERR_FETCH_TYPE_HANDLER_TYPE,               // NJS-121\n  'fetchTypeHandler return value attribute \"type\" must be a valid database type');\nmessages.set(ERR_FETCH_TYPE_HANDLER_CONVERTER,          // NJS-122\n  'fetchTypeHandler return value attribute \"converter\" must be a function');\nmessages.set(ERR_CALL_TIMEOUT_EXCEEDED,                 // NJS-123\n  'call timeout of %d ms exceeded');\nmessages.set(ERR_EMPTY_CONNECT_STRING,                  // NJS-125\n  '\"connectString\" cannot be empty or undefined. Bequeath connections are not supported in Thin mode');\nmessages.set(ERR_OSON_VERSION_NOT_SUPPORTED,            // NJS-126\n  'OSON version %s is not supported');\nmessages.set(ERR_UNKOWN_SERVER_SIDE_PIGGYBACK,          // NJS-127\n  'internal error: unknown server side piggyback opcode %s');\nmessages.set(ERR_UNKNOWN_COLUMN_TYPE_NAME,              // NJS-128\n  'internal error: unknown column type name \"%s\"');\nmessages.set(ERR_INVALID_OBJECT_TYPE_NAME,              // NJS-129\n  'invalid object type name: \"%s\"');\nmessages.set(ERR_TDS_TYPE_NOT_SUPPORTED,                // NJS-130\n  'Oracle TDS data type %d is not supported');\nmessages.set(ERR_INVALID_COLL_INDEX_SET,                // NJS-131\n  'given index %d must be in the range of %d to %d');\nmessages.set(ERR_INVALID_COLL_INDEX_GET,                // NJS-132\n  'element at index %d does not exist');\nmessages.set(ERR_DELETE_ELEMENTS_OF_VARRAY,             // NJS-133\n  'cannot delete elements of a VARRAY');\nmessages.set(ERR_WRONG_VALUE_FOR_DBOBJECT_ATTR,         // NJS-134\n  'value is of wrong type for attribute %s of object %s');\nmessages.set(ERR_WRONG_VALUE_FOR_DBOBJECT_ELEM,         // NJS-135\n  'value is of wrong type for an element of object %s');\nmessages.set(ERR_WRONG_CRED_FOR_EXTAUTH,                // NJS-136\n  'user name and password cannot be set when using external authentication');\nmessages.set(ERR_MISSING_BIND_VALUE,                    // NJS-137\n  'a bind variable replacement value for placeholder \":%s\" was not provided');\nmessages.set(ERR_SERVER_VERSION_NOT_SUPPORTED,          // NJS-138\n  'connections to this database server version are not supported by node-oracledb in Thin mode');\nmessages.set(ERR_UNEXPECTED_XML_TYPE,                   // NJS-139\n  'unexpected XML type with flag %d');\nmessages.set(ERR_WRONG_USER_FORMAT_EXTAUTH_PROXY,       // NJS-140\n  'user name must be enclosed in [] when using external authentication with a proxy user');\nmessages.set(ERR_TOO_MANY_BATCH_ERRORS,                 // NJS-141\n  'the number of batch errors from executemany() exceeds 65535');\nmessages.set(ERR_WRONG_LENGTH_FOR_DBOBJECT_ATTR,        // NJS-142\n  'value too large for attribute %s of object %s (actual: %d, maximum: %d)');\nmessages.set(ERR_WRONG_LENGTH_FOR_DBOBJECT_ELEM,        // NJS-143\n  'value too large for element %d of object %s (actual: %d, maximum: %d)');\nmessages.set(ERR_VECTOR_FORMAT_NOT_SUPPORTED,           // NJS-144\n  'VECTOR format %d is not supported');\nmessages.set(ERR_VECTOR_VERSION_NOT_SUPPORTED,          // NJS-145\n  'VECTOR version %d is not supported');\nmessages.set(ERR_OBJECT_IS_NOT_A_COLLECTION,            // NJS-146\n  'object %s is not a collection');\nmessages.set(ERR_CURSOR_HAS_BEEN_CLOSED,                // NJS-147\n  'cursor has been closed by the database');\nmessages.set(ERR_DML_RETURNING_DUP_BINDS,               // NJS-149\n  'the bind variable placeholder \"%s\" cannot be used both before and after the RETURNING clause in a DML RETURNING statement');\n\n// Oracle Net layer errors\n\nmessages.set(ERR_CONNECTION_CLOSED,                     // NJS-500\n  'connection to the Oracle Database was broken');\nmessages.set(ERR_CONNECTION_LOSTCONTACT,                // NJS-501\n  'connection to host %s port %d terminated unexpectedly. (CONNECTION_ID=%s)\\n%s');\nmessages.set(ERR_CONNECTION_INCOMPLETE,                 // NJS-503\n  'connection to host %s port %d could not be established. (CONNECTION_ID=%s)\\n%s');\nmessages.set(ERR_PROXY_CONNECTION_FAILURE,              // NJS-504\n  'connection establishment through a web proxy at host %s port %d failed. (CONNECTION_ID=%s)\\n%s');\nmessages.set(ERR_TLS_INIT_FAILURE,                      // NJS-505\n  'unable to initiate TLS connection. Please check if wallet credentials are valid');\nmessages.set(ERR_TLS_AUTH_FAILURE,                      // NJS-506\n  'connection to host %s port %d encountered TLS handshake failure. (CONNECTION_ID=%s)\\n%s');\nmessages.set(ERR_TLS_DNMATCH_FAILURE,                   // NJS-507\n  'TLS detected an invalid certificate. Server DN in certificate does not match the specified DN');\nmessages.set(ERR_TLS_HOSTMATCH_FAILURE,                 // NJS-508\n  'TLS detected an invalid certificate. %s not present in certificate');\nmessages.set(ERR_INVALID_PACKET,                        // NJS-509\n  'internal error: invalid packet type or malformed packet received');\nmessages.set(ERR_CONNECTION_TIMEDOUT,                   // NJS-510\n  'connection to host %s port %d timed out. Request exceeded \"%s\" of %d seconds. (CONNECTION_ID=%s)');\nmessages.set(ERR_CONNECTION_REFUSED,                    // NJS-511\n  'connection to listener at host %s port %d was refused. (CONNECTION_ID=%s)\\nCause: %s');\nmessages.set(ERR_INVALID_CONNECT_STRING_PARAMETERS,     // NJS-512\n  'invalid connection string parameters.\\n%s');\nmessages.set(ERR_CONNECTION_INBAND,                     // NJS-513\n  'error received through in-band notification: %s');\nmessages.set(ERR_INVALID_CONNECT_STRING_SYNTAX,         // NJS-514\n  'syntax error in connection string');\nmessages.set(ERR_INVALID_EZCONNECT_SYNTAX,              // NJS-515\n  'error in Easy Connect connection string: %s: %s');\nmessages.set(ERR_NO_CONFIG_DIR,                         // NJS-516\n  'no configuration directory set or available to search for tnsnames.ora');\nmessages.set(ERR_TNS_ENTRY_NOT_FOUND,                   // NJS-517\n  'cannot connect to Oracle Database. Unable to find \"%s\" in \"%s\"');\nmessages.set(ERR_INVALID_SERVICE_NAME,                  // NJS-518\n  'cannot connect to Oracle Database. Service \"%s\" is not registered with the listener at host %s port %s. (CONNECTION_ID=%s)');\nmessages.set(ERR_INVALID_SID,                           // NJS-519\n  'cannot connect to Oracle Database. SID \"%s\" is not registered with the listener at host %s port %s. (CONNECTION_ID=%s)');\nmessages.set(ERR_TNS_NAMES_FILE_MISSING,                // NJS-520\n  'cannot connect to Oracle Database. File tnsnames.ora not found in %s');\nmessages.set(ERR_CONNECTION_EOF,                        // NJS-521\n  'connection to host %s port %d received end-of-file on communication channel. (CONNECTION_ID=%s)');\n\n// Oracle SUCCESS_WITH_INFO warning\n\nmessages.set(WRN_COMPILATION_CREATE,                           // NJS-700\n  'creation succeeded with compilation errors');\n\n//-----------------------------------------------------------------------------\n// assert()\n//\n// Checks the condition, and if the condition is not true, throws an exception\n// using the specified error number and arguments.\n//-----------------------------------------------------------------------------\nfunction assert(condition) {\n  if (!condition) {\n    const args = Array.prototype.slice.call(arguments, 1);\n    throwErr(...args);\n  }\n}\n\n//-----------------------------------------------------------------------------\n// assertArgCount()\n//\n// Asserts that the argument count falls between the minimum and maximum number\n// of arguments.\n//-----------------------------------------------------------------------------\nfunction assertArgCount(args, minArgCount, maxArgCount) {\n  assert(args.length >= minArgCount && args.length <= maxArgCount,\n    ERR_INVALID_NUMBER_OF_PARAMETERS);\n}\n\n//-----------------------------------------------------------------------------\n// assertParamPropBool()\n//\n// Asserts that the property value of a parameter is a boolean value (or\n// undefined).\n//-----------------------------------------------------------------------------\nfunction assertParamPropBool(obj, parameterNum, propName) {\n  if (obj[propName] !== undefined) {\n    assertParamPropValue(typeof obj[propName] === 'boolean', parameterNum,\n      propName);\n  }\n}\n\n//-----------------------------------------------------------------------------\n// assertParamPropFunction()\n//\n// Asserts that the property value of a parameter is a function (or undefined).\n//-----------------------------------------------------------------------------\nfunction assertParamPropFunction(obj, parameterNum, propName) {\n  if (obj[propName] !== undefined) {\n    assertParamPropValue(typeof obj[propName] === 'function', parameterNum,\n      propName);\n  }\n}\n\n//-----------------------------------------------------------------------------\n// assertParamPropInt()\n//\n// Asserts that the property value of a parameter is an integer value (or\n// undefined).\n//-----------------------------------------------------------------------------\nfunction assertParamPropInt(obj, parameterNum, propName) {\n  if (obj[propName] !== undefined) {\n    assertParamPropValue(Number.isInteger(obj[propName]), parameterNum,\n      propName);\n  }\n}\n\n//-----------------------------------------------------------------------------\n// assertParamPropUnsignedInt()\n//\n// Asserts that the property value of a parameter is a positive integer value\n// (or undefined).\n//-----------------------------------------------------------------------------\nfunction assertParamPropUnsignedInt(obj, parameterNum, propName) {\n  if (obj[propName] !== undefined) {\n    assertParamPropValue(Number.isInteger(obj[propName]) && obj[propName] >= 0,\n      parameterNum, propName);\n  }\n}\n\n//-----------------------------------------------------------------------------\n// assertParamPropUnsignedIntNonZero()\n//\n// Asserts that the property value of a parameter is a positive integer value\n// (or undefined).\n//-----------------------------------------------------------------------------\nfunction assertParamPropUnsignedIntNonZero(obj, parameterNum, propName) {\n  if (obj[propName] !== undefined) {\n    assertParamPropValue(Number.isInteger(obj[propName]) && obj[propName] > 0,\n      parameterNum, propName);\n  }\n}\n\n//-----------------------------------------------------------------------------\n// assertParamPropString()\n//\n// Asserts that the property value of a parameter is a string value (or undefined).\n//-----------------------------------------------------------------------------\nfunction assertParamPropString(obj, parameterNum, propName) {\n  if (obj[propName] !== undefined) {\n    assertParamPropValue(typeof obj[propName] === 'string', parameterNum,\n      propName);\n  }\n}\n\n//-----------------------------------------------------------------------------\n// assertParamPropValue()\n//\n// Asserts that the property value of a parameter passes the specified\n// condition.\n//-----------------------------------------------------------------------------\nfunction assertParamPropValue(condition, parameterNum, propName) {\n  assert(condition, ERR_INVALID_PROPERTY_VALUE_IN_PARAM, propName,\n    parameterNum);\n}\n\n//-----------------------------------------------------------------------------\n// assertParamValue()\n//\n// Asserts that the parameter value passes the specified condition.\n//-----------------------------------------------------------------------------\nfunction assertParamValue(condition, parameterNum) {\n  assert(condition, ERR_INVALID_PARAMETER_VALUE, parameterNum);\n}\n\n//-----------------------------------------------------------------------------\n// assertPropValue()\n//\n// Asserts that the property value passes the specified condition.\n//-----------------------------------------------------------------------------\nfunction assertPropValue(condition, propName) {\n  assert(condition, ERR_INVALID_PROPERTY_VALUE, propName);\n}\n\n//-----------------------------------------------------------------------------\n// getErr()\n//\n// Returns an error object with the given error number after formatting it with\n// the given arguments.\n//-----------------------------------------------------------------------------\nfunction getErr(errorNum) {\n  let baseText = messages.get(errorNum);\n  let args = [...arguments];\n  if (!baseText) {\n    args = [undefined, errorNum];\n    errorNum = ERR_INVALID_ERR_NUM;\n    baseText = messages.get(errorNum);\n  }\n  const errorNumStr = errorNum.toString().padStart(3, '0');\n  const code = `${ERR_PREFIX}-${errorNumStr}`;\n  args[0] = `${code}: ${baseText}`;\n  const err = new Error(util.format(...args));\n  err.code = code;\n  Error.captureStackTrace(err, getErr);\n  return err;\n}\n\n//-----------------------------------------------------------------------------\n// throwErr()\n//\n// Throws an error with the given error number after formatting it with the\n// given arguments.\n//-----------------------------------------------------------------------------\nfunction throwErr() {\n  throw (getErr(...arguments));\n}\n\n//-----------------------------------------------------------------------------\n// throwNotImplemented()\n//\n// Throws an error that the feature is not supported in Thin mode\n//-----------------------------------------------------------------------------\nfunction throwNotImplemented(feature) {\n  throwErr(ERR_NOT_IMPLEMENTED, feature);\n}\n\n//-----------------------------------------------------------------------------\n// transformErr()\n//\n// Adjusts the supplied error, if necessary, by looking for specific ODPI-C and\n// Oracle errors and replacing them with driver specific errors.\n//-----------------------------------------------------------------------------\nfunction transformErr(err, fnOpt) {\n  if (!err.code) {\n    const pos = err.message.indexOf(\":\");\n    if (pos > 0) {\n      err.code = err.message.substr(0, pos);\n      /* add Oracle Database Error Help Portal URL for database error\n         messages, but only in thin mode since this is done\n         automatically in thick mode with Oracle Client 23ai and higher\n      */\n      const settings = require('./settings.js');\n      if (err.errorNum && settings.thin) {\n        err.message += '\\n' + 'Help: https://docs.oracle.com/error-help/db/ora-' +\n          `${err.errorNum.toString().padStart(5, '0')}/`;\n      }\n      if (adjustErrorXref.has(err.code)) {\n        let args = [];\n        let driverErrorNum;\n        const driverErrorInfo = adjustErrorXref.get(err.code);\n        if (typeof driverErrorInfo === 'number') {\n          driverErrorNum = driverErrorInfo;\n        } else {\n          driverErrorNum = driverErrorInfo[0];\n          const pattern = driverErrorInfo[1];\n          const results = err.message.match(pattern);\n          if (results) {\n            args = results.slice(1);\n          }\n        }\n        const newErr = getErr(driverErrorNum, ...args);\n        err.code = newErr.code;\n        err.message = newErr.message + \"\\n\" + err.message;\n      }\n    }\n  }\n\n  if (err.requiresStackCapture) {\n    delete err.requiresStackCapture;\n    Error.captureStackTrace(err, fnOpt);\n  }\n  return err;\n}\n\n// define exports\nmodule.exports = {\n  ERR_INTEGRITY_ERROR_CODES,\n  ERR_INVALID_POOL,\n  ERR_INVALID_CONNECTION,\n  ERR_INVALID_PROPERTY_VALUE,\n  ERR_INVALID_PARAMETER_VALUE,\n  ERR_INVALID_PROPERTY_VALUE_IN_PARAM,\n  ERR_INVALID_NUMBER_OF_PARAMETERS,\n  ERR_UNSUPPORTED_DATA_TYPE,\n  ERR_BIND_VALUE_AND_TYPE_MISMATCH,\n  ERR_INVALID_BIND_DATA_TYPE,\n  ERR_INVALID_BIND_DIRECTION,\n  ERR_NO_TYPE_FOR_CONVERSION,\n  ERR_INSUFFICIENT_BUFFER_FOR_BINDS,\n  ERR_BUSY_RS,\n  ERR_INVALID_RS,\n  ERR_NOT_A_QUERY,\n  ERR_INVALID_TYPE_FOR_CONVERSION,\n  ERR_INVALID_LOB,\n  ERR_BUSY_LOB,\n  ERR_INSUFFICIENT_MEMORY,\n  ERR_INVALID_TYPE_FOR_ARRAY_BIND,\n  ERR_REQUIRED_MAX_ARRAY_SIZE,\n  ERR_INVALID_ARRAY_SIZE,\n  ERR_INCOMPATIBLE_TYPE_ARRAY_BIND,\n  ERR_CONN_REQUEST_TIMEOUT,\n  ERR_CANNOT_CONVERT_RS_TO_STREAM,\n  ERR_CANNOT_INVOKE_RS_METHODS,\n  ERR_RS_ALREADY_CONVERTED,\n  ERR_INVALID_BIND_UNIT,\n  ERR_CANNOT_LOAD_BINARY,\n  ERR_POOL_WITH_ALIAS_ALREADY_EXISTS,\n  ERR_POOL_WITH_ALIAS_NOT_FOUND,\n  ERR_INCOMPATIBLE_TYPE_ARRAY_INDEX_BIND,\n  ERR_MIXED_BIND,\n  ERR_MISSING_MAX_SIZE_BY_POS,\n  ERR_MISSING_MAX_SIZE_BY_NAME,\n  ERR_MAX_SIZE_TOO_SMALL,\n  ERR_MISSING_TYPE_BY_POS,\n  ERR_MISSING_TYPE_BY_NAME,\n  ERR_INVALID_SUBSCR,\n  ERR_MISSING_SUBSCR_CALLBACK,\n  ERR_MISSING_SUBSCR_SQL,\n  ERR_POOL_CLOSING,\n  ERR_POOL_CLOSED,\n  ERR_INVALID_SODA_DOC_CURSOR,\n  ERR_NO_BINARY_AVAILABLE,\n  ERR_INVALID_ERR_NUM,\n  ERR_NODE_TOO_OLD,\n  ERR_INVALID_AQ_MESSAGE,\n  ERR_DBL_CONNECT_STRING,\n  ERR_QUEUE_MAX_EXCEEDED,\n  ERR_UNSUPPORTED_DATA_TYPE_IN_JSON,\n  ERR_DBL_USER,\n  ERR_CONCURRENT_OPS,\n  ERR_POOL_RECONFIGURING,\n  ERR_POOL_STATISTICS_DISABLED,\n  ERR_TOKEN_BASED_AUTH,\n  ERR_POOL_TOKEN_BASED_AUTH,\n  ERR_CONN_TOKEN_BASED_AUTH,\n  ERR_TOKEN_HAS_EXPIRED,\n  ERR_NOT_IMPLEMENTED,\n  ERR_INIT_ORACLE_CLIENT_ARGS,\n  ERR_MISSING_FILE,\n  ERR_INVALID_NUMBER_OF_CONNECTIONS,\n  ERR_EXEC_MODE_ONLY_FOR_DML,\n  ERR_CONNECTION_CLOSED,\n  ERR_CONNECTION_LOSTCONTACT,\n  ERR_CONNECTION_INCOMPLETE,\n  ERR_PROXY_CONNECTION_FAILURE,\n  ERR_TLS_INIT_FAILURE,\n  ERR_TLS_AUTH_FAILURE,\n  ERR_TLS_DNMATCH_FAILURE,\n  ERR_TLS_HOSTMATCH_FAILURE,\n  ERR_INVALID_PACKET,\n  ERR_CONNECTION_TIMEDOUT,\n  ERR_CONNECTION_REFUSED,\n  ERR_INVALID_CONNECT_STRING_PARAMETERS,\n  ERR_CONNECTION_INBAND,\n  ERR_INVALID_CONNECT_STRING_SYNTAX,\n  ERR_INVALID_EZCONNECT_SYNTAX,\n  ERR_NO_CONFIG_DIR,\n  ERR_TNS_ENTRY_NOT_FOUND,\n  ERR_CONNECTION_EOF,\n  ERR_INVALID_BIND_NAME,\n  ERR_WRONG_NUMBER_OF_POSITIONAL_BINDS,\n  ERR_BUFFER_LENGTH_INSUFFICIENT,\n  ERR_NCHAR_CS_NOT_SUPPORTED,\n  ERR_MISSING_CREDENTIALS,\n  ERR_UNEXPECTED_END_OF_DATA,\n  ERR_UNEXPECTED_MESSAGE_TYPE,\n  ERR_POOL_HAS_BUSY_CONNECTIONS,\n  ERR_INTERNAL,\n  ERR_INVALID_REF_CURSOR,\n  ERR_UNSUPPORTED_VERIFIER_TYPE,\n  ERR_NAN_VALUE,\n  ERR_ORACLE_NUMBER_NO_REPR,\n  ERR_INVALID_SERVICE_NAME,\n  ERR_INVALID_SID,\n  ERR_TNS_NAMES_FILE_MISSING,\n  ERR_INVALID_TYPE_NUM,\n  ERR_INVALID_ORACLE_TYPE_NUM,\n  ERR_UNEXPECTED_NEGATIVE_INTEGER,\n  ERR_INTEGER_TOO_LARGE,\n  ERR_UNEXPECTED_DATA,\n  ERR_OSON_FIELD_NAME_LIMITATION,\n  ERR_OSON_VERSION_NOT_SUPPORTED,\n  ERR_THIN_CONNECTION_ALREADY_CREATED,\n  ERR_UNSUPPORTED_CONVERSION,\n  ERR_FETCH_TYPE_HANDLER_RETURN_VALUE,\n  ERR_FETCH_TYPE_HANDLER_TYPE,\n  ERR_FETCH_TYPE_HANDLER_CONVERTER,\n  ERR_CALL_TIMEOUT_EXCEEDED,\n  ERR_EMPTY_CONNECT_STRING,\n  ERR_UNKOWN_SERVER_SIDE_PIGGYBACK,\n  ERR_UNKNOWN_COLUMN_TYPE_NAME,\n  ERR_INVALID_OBJECT_TYPE_NAME,\n  ERR_TDS_TYPE_NOT_SUPPORTED,\n  ERR_INVALID_COLL_INDEX_SET,\n  ERR_INVALID_COLL_INDEX_GET,\n  ERR_DELETE_ELEMENTS_OF_VARRAY,\n  ERR_WRONG_VALUE_FOR_DBOBJECT_ATTR,\n  ERR_WRONG_VALUE_FOR_DBOBJECT_ELEM,\n  ERR_WRONG_CRED_FOR_EXTAUTH,\n  ERR_MISSING_BIND_VALUE,\n  ERR_SERVER_VERSION_NOT_SUPPORTED,\n  ERR_UNEXPECTED_XML_TYPE,\n  ERR_WRONG_USER_FORMAT_EXTAUTH_PROXY,\n  ERR_TOO_MANY_BATCH_ERRORS,\n  ERR_WRONG_LENGTH_FOR_DBOBJECT_ATTR,\n  ERR_WRONG_LENGTH_FOR_DBOBJECT_ELEM,\n  ERR_VECTOR_FORMAT_NOT_SUPPORTED,\n  ERR_VECTOR_VERSION_NOT_SUPPORTED,\n  ERR_OBJECT_IS_NOT_A_COLLECTION,\n  ERR_CURSOR_HAS_BEEN_CLOSED,\n  ERR_DML_RETURNING_DUP_BINDS,\n  ERR_CONNECTION_CLOSED_CODE: `${ERR_PREFIX}-${ERR_CONNECTION_CLOSED}`,\n  WRN_COMPILATION_CREATE,\n  assert,\n  assertArgCount,\n  assertParamPropBool,\n  assertParamPropFunction,\n  assertParamPropInt,\n  assertParamPropString,\n  assertParamPropUnsignedInt,\n  assertParamPropUnsignedIntNonZero,\n  assertParamPropValue,\n  assertParamValue,\n  assertPropValue,\n  getErr,\n  throwErr,\n  throwNotImplemented,\n  transformErr\n};\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"process\" has been externalized for browser compatibility. Cannot access \"process.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "{\n  \"name\": \"oracledb\",\n  \"version\": \"6.5.1\",\n  \"description\": \"A Node.js module for Oracle Database access from JavaScript and TypeScript\",\n  \"license\": \"(Apache-2.0 OR UPL-1.0)\",\n  \"homepage\": \"http://oracle.github.io/node-oracledb/\",\n  \"keywords\": [\n    \"Oracle\",\n    \"Database\",\n    \"official\",\n    \"DB\",\n    \"SQL\",\n    \"JSON\",\n    \"PL/SQL\",\n    \"SODA\",\n    \"OCI\",\n    \"API\",\n    \"client\",\n    \"library\",\n    \"driver\",\n    \"add-on\",\n    \"extension\",\n    \"binding\",\n    \"interface\",\n    \"adapter\",\n    \"module\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/oracle/node-oracledb.git\"\n  },\n  \"scripts\": {\n    \"install\": \"node package/install.js\",\n    \"prune\": \"node package/prunebinaries.js\"\n  },\n  \"engines\": {\n    \"node\": \">=14.6\"\n  },\n  \"maintainers\": [\n    {\n      \"name\": \"Oracle Corp.\"\n    }\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/oracle/node-oracledb/issues\"\n  },\n  \"main\": \"./index.js\"\n}\n", "// Copyright (c) 2016, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst errors = require('./errors.js');\nconst process = require('process');\nconst util = require('util');\nconst types = require('./types.js');\nconst constants = require('./constants.js');\n\n// node-oracledb version number\nlet packageJSON;\ntry {\n  packageJSON = require('../package.json');\n} catch (err) {\n  errors.throwErr(errors.ERR_MISSING_FILE, 'package.json');\n}\nconst PACKAGE_JSON_VERSION = packageJSON.version;\n\n// Directory containing the node-oracledb add-on binary\nconst RELEASE_DIR = 'build/Release';\n\n// The default node-oracledb add-on binary filename for this Node.js\nconst BINARY_FILE = 'oracledb-' + PACKAGE_JSON_VERSION + '-' + process.platform + '-' + process.arch + '.node';\n\n// The node-oracledb binary filename when it is built from source\nconst BUILD_FILE = 'oracledb.node';\n\n// Staging directory used by maintainers building the npm package\nconst STAGING_DIR = 'package/Staging';\n\n// getInstallURL returns a string with installation URL\nfunction getInstallURL() {\n  return ('Node-oracledb installation instructions: https://node-oracledb.readthedocs.io/en/latest/user_guide/installation.html');\n}\n\n\n// getInstallHelp returns a string with installation usage tips that may be helpful\nfunction getInstallHelp() {\n  let arch, url;\n  let mesg = getInstallURL() + '\\n';\n  if (process.platform === 'linux') {\n    if (process.arch === 'x64') {\n      url = 'https://www.oracle.com/database/technologies/instant-client/linux-x86-64-downloads.html\\n';\n      arch = '64-bit';\n    } else if (process.arch === 'x32') {\n      url = 'https://www.oracle.com/database/technologies/instant-client/linux-x86-32-downloads.html\\n';\n      arch = '32-bit';\n    } else {\n      url = 'https://www.oracle.com/database/technologies/instant-client.html\\n';\n      arch = process.arch;\n    }\n    mesg += 'You must have Linux ' + arch + ' Oracle Client libraries configured with ldconfig, or in LD_LIBRARY_PATH.\\n';\n    mesg += 'If you do not have Oracle Database on this computer, then install the Instant Client Basic or Basic Light package from \\n';\n    mesg += url;\n  } else if (process.platform === 'darwin') {\n    if (process.arch === 'x64') {\n      url = 'https://www.oracle.com/database/technologies/instant-client/macos-intel-x86-downloads.html\\n';\n      arch = '64-bit';\n    } else {\n      url = 'https://www.oracle.com/database/technologies/instant-client.html\\n';\n      arch = process.arch;\n    }\n    mesg += 'You must have macOS ' + arch + ' Oracle Instant Client Basic or Basic Light package libraries in\\n';\n    mesg += '/usr/local/lib or set by calling oracledb.initOracleClient({libDir: \"/my/instant_client_directory\"}).\\n';\n    mesg += 'Oracle Instant Client can be downloaded from ' + url;\n  } else if (process.platform === 'win32') {\n    if (process.arch === 'x64') {\n      url = 'https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html\\n';\n      arch = '64-bit';\n    } else if (process.arch === 'x32') {\n      url = 'https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html\\n';\n      arch = '32-bit';\n    } else {\n      url = 'https://www.oracle.com/database/technologies/instant-client.html\\n';\n      arch = process.arch;\n    }\n    mesg += 'You must have Windows ' + arch + ' Oracle Client libraries in your PATH environment variable.\\n';\n    mesg += 'If you do not have Oracle Database on this computer, then install the Instant Client Basic or Basic Light package from\\n';\n    mesg += url;\n    mesg += 'A Microsoft Visual Studio Redistributable suitable for your Oracle client library version must be available.\\n';\n  } else {\n    url = 'https://www.oracle.com/database/technologies/instant-client.html\\n';\n    mesg += 'You must have ' + process.arch + ' Oracle Client libraries in your operating system library search path.\\n';\n    mesg += 'If you do not have Oracle Database on this computer, then install an Instant Client Basic or Basic Light package from: \\n';\n    mesg += url;\n  }\n  return mesg;\n}\n\n// The callbackify function is used to wrap async methods to add optional\n// callback support. If the last parameter passed to a method is a function,\n// then it is assumed that the callback pattern is being used and the promise\n// is resolved or rejected and the callback invoked; otherwise, the function is\n// called unchanged and a promise is returned\nfunction callbackify(func) {\n  const wrapper = function() {\n\n    // if last argument is not a function, simply invoke the function as usual\n    // and a promise will be returned\n    if (typeof arguments[arguments.length - 1] !== 'function') {\n      return func.apply(this, arguments).catch(function stackCapture(err) {\n        throw errors.transformErr(err, stackCapture);\n      });\n    }\n\n    // otherwise, resolve or reject the promise and invoke the callback\n    const args = Array.prototype.slice.call(arguments, 0, arguments.length - 1);\n    const cb = arguments[arguments.length - 1];\n    func.apply(this, args).then(function(result) {\n      cb(null, result);\n    }, function stackCapture(err) {\n      cb(errors.transformErr(err, stackCapture));\n    });\n  };\n  if (func.name) {\n    Object.defineProperty(wrapper, 'name', { value: func.name });\n  }\n  return wrapper;\n}\n\n// The serialize function is used to wrap methods to ensure that the connection\n// is not used concurrently by multiple threads\nfunction serialize(func) {\n  return async function() {\n\n    let connImpl;\n\n    // determine the connection implementation associated with the object, if\n    // one currently exists and acquire the \"lock\"; this simply checks to see\n    // if another operation is in progress, and if so, waits for it to complete\n    if (this._impl) {\n      connImpl = this._impl._getConnImpl();\n      await connImpl._acquireLock();\n    }\n\n    // call the function and ensure that the lock is \"released\" once the\n    // function has completed -- either successfully or in failure -- but only\n    // if a connection implementation is currently associated with this object\n    try {\n      return await func.apply(this, arguments);\n    } finally {\n      if (connImpl)\n        connImpl._releaseLock();\n    }\n  };\n}\n\nfunction preventConcurrent(func, errorCode) {\n  return async function() {\n    if (this._isActive)\n      errors.throwErr(errorCode);\n    this._isActive = true;\n    try {\n      return await func.apply(this, arguments);\n    } finally {\n      this._isActive = false;\n    }\n  };\n}\n\n// The wrapFns() function is used to wrap the named methods on the prototype\n// in multiple ways (serialize, preventConcurrent and callbackify); the\n// arguments following the formal arguments contain the names of methods to\n// wrap on the prototype; if the first extra argument is an error code, it is\n// used to wrap to prevent concurrent access\nfunction wrapFns(proto) {\n  let nameIndex = 1;\n  let preventConcurrentErrorCode;\n  if (typeof arguments[1] === 'number') {\n    nameIndex = 2;\n    preventConcurrentErrorCode = arguments[1];\n  }\n  for (let i = nameIndex; i < arguments.length; i++) {\n    const name = arguments[i];\n    const f = proto[name];\n    if (preventConcurrentErrorCode) {\n      proto[name] = callbackify(preventConcurrent(serialize(f),\n        preventConcurrentErrorCode));\n    } else\n      proto[name] = callbackify(serialize(f));\n  }\n}\n\nfunction isArrayOfStrings(value) {\n  if (!Array.isArray(value))\n    return false;\n  for (let i = 0; i < value.length; i++) {\n    if (typeof value[i] !== 'string')\n      return false;\n  }\n  return true;\n}\n\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\nfunction isObjectOrArray(value) {\n  return (value !== null && typeof value === 'object') || Array.isArray(value);\n}\n\n//---------------------------------------------------------------------------\n// isPrivilege()\n//\n// Returns a boolean indicating if the supplied value is a valid privilege.\n//---------------------------------------------------------------------------\nfunction isPrivilege(value) {\n  // Privileges are mutually exclusive and cannot be specified together\n  // except SYSPRELIM, which cannot be specified alone, it is specified in a\n  // combo with SYSOPER or SYSDBA.  SYSPRELIM is used only for\n  // startup/shutdown\n\n  // If SYSPRELIM specified, clear the bit\n  if (value & constants.SYSPRELIM) {\n    value = value ^ constants.SYSPRELIM;\n  }\n  return (\n    value === constants.SYSASM ||\n    value === constants.SYSBACKUP ||\n    value === constants.SYSDBA ||\n    value === constants.SYSDG ||\n    value === constants.SYSKM ||\n    value === constants.SYSOPER ||\n    value === constants.SYSRAC\n  );\n}\n\nfunction isShardingKey(value) {\n  if (!Array.isArray(value))\n    return false;\n  for (let i = 0; i < value.length; i++) {\n    const element = value[i];\n    const ok = typeof element === 'string' ||\n      typeof element === 'number' || Buffer.isBuffer(element) ||\n      util.types.isDate(element);\n    if (!ok)\n      return false;\n  }\n  return true;\n}\n\nfunction isSodaDocument(value) {\n  return (value != null && value._sodaDocumentMarker);\n}\n\nfunction isXid(value) {\n  return (isObject(value) && Number.isInteger(value.formatId) &&\n    (Buffer.isBuffer(value.globalTransactionId) ||\n      typeof value.globalTransactionId === 'string') &&\n    (Buffer.isBuffer(value.branchQualifier) ||\n      typeof value.branchQualifier === 'string'));\n}\n\nfunction verifySodaDoc(content) {\n  if (isSodaDocument(content))\n    return content._impl;\n  errors.assertParamValue(isObject(content), 1);\n  return Buffer.from(JSON.stringify(content));\n}\n\nfunction isTokenExpired(token) {\n  errors.assert(typeof token === 'string', errors.ERR_TOKEN_BASED_AUTH);\n  if (token.split('.')[1] === undefined) {\n    errors.throwErr(errors.ERR_TOKEN_BASED_AUTH);\n  }\n\n  const base64Url = token.split('.')[1];\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const buff = Buffer.from(base64, 'base64');\n  const payloadInit = buff.toString('ascii');\n\n  let expiry = JSON.parse(payloadInit).exp;\n  errors.assert(expiry != undefined, errors.ERR_TOKEN_BASED_AUTH);\n  expiry = expiry * 1000;\n\n  return (new Date().getTime() > expiry);\n}\n\nfunction isTokenValid(accessToken) {\n  switch (typeof accessToken) {\n    case 'string':\n      if (accessToken === '') {\n        errors.throwErr(errors.ERR_TOKEN_BASED_AUTH);\n      }\n\n      return !isTokenExpired(accessToken);\n    case 'object':\n      if (accessToken.token === undefined ||\n          accessToken.token === '' ||\n          accessToken.privateKey === undefined ||\n          accessToken.privateKey === '') {\n        errors.throwErr(errors.ERR_TOKEN_BASED_AUTH);\n      }\n\n      return !isTokenExpired(accessToken.token);\n    default:\n      errors.throwErr(errors.ERR_TOKEN_BASED_AUTH);\n  }\n}\n\nfunction denormalizePrivateKey(privateKey) {\n  privateKey = privateKey.replace(/\\n/g, '');\n  privateKey = privateKey.replace('-----BEGIN PRIVATE KEY-----', '');\n  privateKey = privateKey.replace('-----END PRIVATE KEY-----', '');\n  return privateKey;\n}\n\n//-----------------------------------------------------------------------------\n// addTypeProperties()\n//\n// Adds derived properties about the type as a convenience to the user.\n// Currently this is only the name of type, which is either the name of the\n// database object type (if the value refers to a database object) or the name\n// of the Oracle database type.\n// -----------------------------------------------------------------------------\nfunction addTypeProperties(obj, attrName) {\n  const clsAttrName = attrName + \"Class\";\n  const nameAttrName = attrName + \"Name\";\n  const cls = obj[clsAttrName];\n  let dbType = obj[attrName];\n  if (typeof dbType === 'number') {\n    dbType = obj[attrName] = types.getTypeByNum(dbType);\n  }\n  if (cls) {\n    obj[nameAttrName] = cls.prototype.fqn;\n  } else if (dbType) {\n    obj[nameAttrName] = dbType.columnTypeName;\n  }\n}\n\n//-----------------------------------------------------------------------------\n// isVectorValue()\n//\n// Returns true for list of typed arrays supported for vector column types\n//\n// -----------------------------------------------------------------------------\nfunction isVectorValue(value) {\n  return (value instanceof Float32Array ||\n      value instanceof Float64Array ||\n      value instanceof Int8Array);\n}\n\n//-----------------------------------------------------------------------------\n// makeDate()\n//\n// Returns a date from the given components.\n//\n// -----------------------------------------------------------------------------\nfunction makeDate(useLocal, year, month, day, hour, minute,\n  second, fseconds, offset) {\n  if (useLocal) {\n    return new Date(year, month - 1, day, hour, minute, second, fseconds);\n  }\n  return new Date(Date.UTC(year, month - 1, day, hour, minute, second,\n    fseconds) - offset * 60000);\n}\n\n// define exports\nmodule.exports = {\n  BINARY_FILE,\n  BUILD_FILE,\n  PACKAGE_JSON_VERSION,\n  RELEASE_DIR,\n  STAGING_DIR,\n  addTypeProperties,\n  callbackify,\n  denormalizePrivateKey,\n  getInstallURL,\n  getInstallHelp,\n  isArrayOfStrings,\n  isObject,\n  isObjectOrArray,\n  isPrivilege,\n  isShardingKey,\n  isSodaDocument,\n  isTokenExpired,\n  isTokenValid,\n  isVectorValue,\n  isXid,\n  makeDate,\n  preventConcurrent,\n  serialize,\n  verifySodaDoc,\n  wrapFns\n};\n", "// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\nclass AqDeqOptionsImpl {\n\n  //---------------------------------------------------------------------------\n  // getCondition()\n  //\n  // Returns the condition to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getCondition() {\n    errors.throwNotImplemented(\"getting condition (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getConsumerName()\n  //\n  // Returns the consumer name to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getConsumerName() {\n    errors.throwNotImplemented(\"getting consumer name (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCorrelation()\n  //\n  // Returns the correlation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getCorrelation() {\n    errors.throwNotImplemented(\"getting correlation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMode()\n  //\n  // Returns the mode to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getMode() {\n    errors.throwNotImplemented(\"getting mode (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMsgId()\n  //\n  // Returns the message id to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getMsgId() {\n    errors.throwNotImplemented(\"getting message id (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getNavigation()\n  //\n  // Returns the navigation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getNavigation() {\n    errors.throwNotImplemented(\"getting navigation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getTransformation()\n  //\n  // Returns the transformation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getTransformation() {\n    errors.throwNotImplemented(\"getting transformation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getVisibility()\n  //\n  // Returns the visibility to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getVisibility() {\n    errors.throwNotImplemented(\"getting visibility (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getWait()\n  //\n  // Returns the wait to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  getWait() {\n    errors.throwNotImplemented(\"getting wait (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setCondition()\n  //\n  // Sets the condition to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setCondition() {\n    errors.throwNotImplemented(\"setting condition (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setConsumerName()\n  //\n  // Sets the consumer name to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setConsumerName() {\n    errors.throwNotImplemented(\"setting consumer name (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setCorrelation()\n  //\n  // Sets the correlation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setCorrelation() {\n    errors.throwNotImplemented(\"setting correlation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setMode()\n  //\n  // Sets the mode to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setMode() {\n    errors.throwNotImplemented(\"setting mode (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setMsgId()\n  //\n  // Sets the message id to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setMsgId() {\n    errors.throwNotImplemented(\"setting message id (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setNavigation()\n  //\n  // Sets the navigation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setNavigation() {\n    errors.throwNotImplemented(\"setting navigation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setTransformation()\n  //\n  // Sets the transformation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setTransformation() {\n    errors.throwNotImplemented(\"setting transformation (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setVisibility()\n  //\n  // Sets the visibility to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setVisibility() {\n    errors.throwNotImplemented(\"setting visibility (dequeue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setWait()\n  //\n  // Sets the wait to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  setWait() {\n    errors.throwNotImplemented(\"setting wait (dequeue options)\");\n  }\n\n}\n\nmodule.exports = AqDeqOptionsImpl;\n", "// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\nclass AqEnqOptionsImpl {\n\n  //---------------------------------------------------------------------------\n  // getDeliveryMode()\n  //\n  // Returns the delivery mode to use for enqueuing messages.\n  //---------------------------------------------------------------------------\n  getDeliveryMode() {\n    errors.throwNotImplemented(\"getting delivery mode (enqueue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getTransformation()\n  //\n  // Returns the transformation to use for enqueuing messages.\n  //---------------------------------------------------------------------------\n  getTransformation() {\n    errors.throwNotImplemented(\"getting transformation (enqueue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getVisibility()\n  //\n  // Returns the visibility to use for enqueuing messages.\n  //---------------------------------------------------------------------------\n  getVisibility() {\n    errors.throwNotImplemented(\"getting visibility (enqueue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setDeliveryMode()\n  //\n  // Sets the delivery mode to use for enqueuing messages.\n  //---------------------------------------------------------------------------\n  setDeliveryMode() {\n    errors.throwNotImplemented(\"setting delivery mode (enqueue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setTransformation()\n  //\n  // Sets the transformation to use for enqueuing messages.\n  //---------------------------------------------------------------------------\n  setTransformation() {\n    errors.throwNotImplemented(\"setting transformation (enqueue options)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setVisibility()\n  //\n  // Sets the visibility to use for enqueuing messages.\n  //---------------------------------------------------------------------------\n  setVisibility() {\n    errors.throwNotImplemented(\"setting visibility (enqueue options)\");\n  }\n\n}\n\nmodule.exports = AqEnqOptionsImpl;\n", "// Copyright (c) 2019, 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\nclass AqMessageImpl {\n\n  //---------------------------------------------------------------------------\n  // getCorrelation()\n  //\n  // Returns the correlation associated with the message.\n  //---------------------------------------------------------------------------\n  getCorrelation() {\n    errors.throwNotImplemented(\"getting correlation (message)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDelay()\n  //\n  // Returns the delay associated with the message.\n  //---------------------------------------------------------------------------\n  getDelay() {\n    errors.throwNotImplemented(\"getting delay (message)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDeliveryMode()\n  //\n  // Returns the delivery mode associated with the message.\n  //---------------------------------------------------------------------------\n  getDeliveryMode() {\n    errors.throwNotImplemented(\"getting delivery mode (message)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getExceptionQueue()\n  //\n  // Returns the exception queue associated with the message.\n  //---------------------------------------------------------------------------\n  getExceptionQueue() {\n    errors.throwNotImplemented(\"getting exception queue (message)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getExpiration()\n  //\n  // Returns the expiration associated with the message.\n  //---------------------------------------------------------------------------\n  getExpiration() {\n    errors.throwNotImplemented(\"getting expiration (message)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMsgId()\n  //\n  // Returns the message id associated with the message.\n  //---------------------------------------------------------------------------\n  getMsgId() {\n    errors.throwNotImplemented(\"getting message id (message)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getNumAttempts()\n  //\n  // Returns the number of attempts associated with the message.\n  //---------------------------------------------------------------------------\n  getNumAttempts() {\n    errors.throwNotImplemented(\"getting number of attempts (message)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getOriginalMsgId()\n  //\n  // Returns the original message id associated with the message.\n  //---------------------------------------------------------------------------\n  getOriginalMsgId() {\n    errors.throwNotImplemented(\"getting original message id (message)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPayload()\n  //\n  // Returns the payload associated with the message.\n  //---------------------------------------------------------------------------\n  getPayload() {\n    errors.throwNotImplemented(\"getting payload (message)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPriority()\n  //\n  // Returns the priority associated with the message.\n  //---------------------------------------------------------------------------\n  getPriority() {\n    errors.throwNotImplemented(\"getting priority (message)\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getState()\n  //\n  // Returns the state associated with the message.\n  //---------------------------------------------------------------------------\n  getState() {\n    errors.throwNotImplemented(\"getting state (message)\");\n  }\n\n}\n\nmodule.exports = AqMessageImpl;\n", "// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\nclass AqQueueImpl {\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this._connection;\n  }\n\n  //---------------------------------------------------------------------------\n  // deqMany()\n  //\n  // Dequeues multiple items from a queue.\n  //---------------------------------------------------------------------------\n  deqMany() {\n    errors.throwNotImplemented(\"dequeuing multiple items from a queue\");\n  }\n\n  //---------------------------------------------------------------------------\n  // deqOne()\n  //\n  // Dequeues a single item from a queue.\n  //---------------------------------------------------------------------------\n  deqOne() {\n    errors.throwNotImplemented(\"dequeuing a single item from a queue\");\n  }\n\n  //---------------------------------------------------------------------------\n  // enqMany()\n  //\n  // Enqueues multiple items from a queue.\n  //---------------------------------------------------------------------------\n  enqMany() {\n    errors.throwNotImplemented(\"enqueuing multiple items from a queue\");\n  }\n\n  //---------------------------------------------------------------------------\n  // enqOne()\n  //\n  // Enqueues a single item from a queue.\n  //---------------------------------------------------------------------------\n  enqOne() {\n    errors.throwNotImplemented(\"enqueuing a single item from a queue\");\n  }\n\n}\n\nmodule.exports = AqQueueImpl;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\n// define base database object class; instances of this class are never\n// instantiated; instead, classes subclassed from this one will be\n// instantiated; a cache of these classes are maintained on each connection\nclass DbObjectImpl {\n\n  constructor(objType) {\n    this._objType = objType;\n  }\n\n  //---------------------------------------------------------------------------\n  // append()\n  //\n  // Appends an element to the collection.\n  //---------------------------------------------------------------------------\n  append() {\n    errors.throwNotImplemented(\"appending element to collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // copy()\n  //\n  // Creates and returns a copy of the object.\n  //---------------------------------------------------------------------------\n  copy() {\n    errors.throwNotImplemented(\"copying an object\");\n  }\n\n  //---------------------------------------------------------------------------\n  // deleteElement()\n  //\n  // Deletes an element from a collection.\n  //---------------------------------------------------------------------------\n  deleteElement() {\n    errors.throwNotImplemented(\"deleting an element from a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getElement()\n  //\n  // Returns an element from the collection.\n  //---------------------------------------------------------------------------\n  getElement() {\n    errors.throwNotImplemented(\"getting an element from a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getFirstIndex()\n  //\n  // Returns the first index in a collection.\n  //---------------------------------------------------------------------------\n  getFirstIndex() {\n    errors.throwNotImplemented(\"getting the first index in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getKeys()\n  //\n  // Returns the keys of the collection in a JavaScript array.\n  //---------------------------------------------------------------------------\n  getKeys() {\n    errors.throwNotImplemented(\"returning the keys of a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getLastIndex()\n  //\n  // Returns the last index in a collection.\n  //---------------------------------------------------------------------------\n  getLastIndex() {\n    errors.throwNotImplemented(\"getting the last index in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getNextIndex()\n  //\n  // Returns the next index in a collection.\n  //---------------------------------------------------------------------------\n  getNextIndex() {\n    errors.throwNotImplemented(\"getting the next index in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPrevIndex()\n  //\n  // Returns the previous index in a collection.\n  //---------------------------------------------------------------------------\n  getPrevIndex() {\n    errors.throwNotImplemented(\"getting the previous index in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getValues()\n  //\n  // Returns the values of the collection in a JavaScript array.\n  //---------------------------------------------------------------------------\n  getValues() {\n    errors.throwNotImplemented(\"getting the values in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // hasElement()\n  //\n  // Returns whether an element exists at the given index.\n  //---------------------------------------------------------------------------\n  hasElement() {\n    errors.throwNotImplemented(\"getting if value exists in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setElement()\n  //\n  // Sets the element at the given index in the collection.\n  //---------------------------------------------------------------------------\n  setElement() {\n    errors.throwNotImplemented(\"setting an element in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // trim()\n  //\n  // Trim the specified number of elements from the end of the collection.\n  //---------------------------------------------------------------------------\n  trim() {\n    errors.throwNotImplemented(\"trimming elements from a collection\");\n  }\n\n}\n\nmodule.exports = DbObjectImpl;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst settings = require('../settings.js');\nconst errors = require('../errors.js');\nconst util = require('util');\n\n// define implementation class\nclass ConnectionImpl {\n\n  constructor() {\n    this._inProgress = false;\n    this._dbObjectTypes = new Map();\n    this._requestQueue = [];\n    this._osonMaxFieldNameSize = 255;\n  }\n\n  //---------------------------------------------------------------------------\n  // _acquireLock()\n  //\n  // Acquire a lock on the connection in order to prevent concurrent use of the\n  // connection.\n  //---------------------------------------------------------------------------\n  async _acquireLock() {\n    if (this._inProgress) {\n      if (settings.errorOnConcurrentExecute) {\n        errors.throwErr(errors.ERR_CONCURRENT_OPS);\n      }\n      await new Promise((resolve, reject) => {\n        const payload = {resolve: resolve, reject: reject};\n        this._requestQueue.push(payload);\n      });\n    }\n    this._inProgress = true;\n  }\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  // ---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this;\n  }\n\n  //---------------------------------------------------------------------------\n  // _getDbObjectType()\n  //\n  // Return the object identifying the object type. These are cached by fully\n  // qualified name and by OID (thin mode only).\n  //---------------------------------------------------------------------------\n  _getDbObjectType(schema, name, packageName, oid) {\n    let dbObjectType;\n    if (oid) {\n      dbObjectType = this._dbObjectTypes.get(oid);\n      if (dbObjectType)\n        return dbObjectType;\n    }\n    const fqn = (packageName) ? `${schema}.${packageName}.${name}` :\n      `${schema}.${name}`;\n    dbObjectType = this._dbObjectTypes.get(fqn);\n    if (!dbObjectType) {\n      dbObjectType = {\n        oid: oid,\n        fqn: fqn,\n        schema: schema,\n        name: name,\n        packageName: packageName,\n        partial: true,\n        isXmlType: (schema === 'SYS' && name === 'XMLTYPE')\n      };\n      this._dbObjectTypes.set(fqn, dbObjectType);\n    }\n    if (oid && !dbObjectType.oid) {\n      dbObjectType.oid = oid;\n      this._dbObjectTypes.set(oid, dbObjectType);\n    }\n    return dbObjectType;\n  }\n\n  //---------------------------------------------------------------------------\n  // _isDate()\n  //\n  // Method for determining if a value is a Date object. This method can be\n  // removed once Node-API version 5 is used in the C extension.\n  // ---------------------------------------------------------------------------\n  _isDate(val) {\n    return (util.types.isDate(val));\n  }\n\n  //---------------------------------------------------------------------------\n  // _releaseLock()\n  //\n  // Release the lock on the connection to allow another use of the connection.\n  //---------------------------------------------------------------------------\n  _releaseLock() {\n    if (this._requestQueue.length > 0) {\n      const payload = this._requestQueue.shift();\n      payload.resolve();\n    } else {\n      this._inProgress = false;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // breakExecution()\n  //\n  // Breaks execution of a running statement.\n  //---------------------------------------------------------------------------\n  breakExecution() {\n    errors.throwNotImplemented(\"getting Oracle Server version number\");\n  }\n\n  //---------------------------------------------------------------------------\n  // changePassword()\n  //\n  // Changes the password of the specified user.\n  //---------------------------------------------------------------------------\n  changePassword() {\n    errors.throwNotImplemented(\"changing the password\");\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the connection.\n  //---------------------------------------------------------------------------\n  close() {\n    errors.throwNotImplemented(\"closing the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // commit()\n  //\n  // Commits the transaction.\n  //---------------------------------------------------------------------------\n  commit() {\n    errors.throwNotImplemented(\"committing the transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // createLob()\n  //\n  // Creates a temporary LOB and returns it.\n  //---------------------------------------------------------------------------\n  createLob() {\n    errors.throwNotImplemented(\"creating a temporary LOB\");\n  }\n\n  //---------------------------------------------------------------------------\n  // execute()\n  //\n  // Executes a SQL statement and returns the results.\n  //---------------------------------------------------------------------------\n  execute() {\n    errors.throwNotImplemented(\"executing a SQL statement\");\n  }\n\n  //---------------------------------------------------------------------------\n  // executeMany()\n  //\n  // Executes a SQL statement and returns the results.\n  //---------------------------------------------------------------------------\n  executeMany() {\n    errors.throwNotImplemented(\"executing a SQL statement multiple times\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCallTimeout()\n  //\n  // Returns the call timeout value.\n  //---------------------------------------------------------------------------\n  getCallTimeout() {\n    errors.throwNotImplemented(\"getting call timeout\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCurrentSchema()\n  //\n  // Returns the current schema.\n  //---------------------------------------------------------------------------\n  getCurrentSchema() {\n    errors.throwNotImplemented(\"getting current schema\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDbDomain()\n  //\n  // Returns the Oracle Database domain name associated with the connection.\n  //---------------------------------------------------------------------------\n  getDbDomain() {\n    errors.throwNotImplemented(\"getting db domain\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDbName()\n  //\n  // Returns the Oracle Database name associated with the connection.\n  //---------------------------------------------------------------------------\n  getDbName() {\n    errors.throwNotImplemented(\"getting db name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDbObjectClass()\n  //\n  // Returns a database object class given its name.\n  //---------------------------------------------------------------------------\n  getDbObjectClass() {\n    errors.throwNotImplemented(\"getting a database object class\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getExternalName()\n  //\n  // Returns the external name for TPC logging.\n  //---------------------------------------------------------------------------\n  getExternalName() {\n    errors.throwNotImplemented(\"getting the external name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getInstanceName()\n  //\n  // Returns the Oracle Database instance name associated with the connection.\n  //---------------------------------------------------------------------------\n  getInstanceName() {\n    errors.throwNotImplemented(\"getting the Oracle Database instance name.\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getInternalName()\n  //\n  // Returns the internal name for TPC logging.\n  //---------------------------------------------------------------------------\n  getInternalName() {\n    errors.throwNotImplemented(\"getting the internal name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMaxOpenCursors()\n  //\n  // Returns maximum number of cursors that can be opened in one session.\n  //---------------------------------------------------------------------------\n  getMaxOpenCursors() {\n    errors.throwNotImplemented(\"getting max open cursors\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getOracleServerVersion()\n  //\n  // Returns an integer identifying the Oracle Server version.\n  //---------------------------------------------------------------------------\n  getOracleServerVersion() {\n    errors.throwNotImplemented(\"getting Oracle Server version number\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getOracleServerVersionString()\n  //\n  // Returns a string identifying the Oracle Server version.\n  //---------------------------------------------------------------------------\n  getOracleServerVersionString() {\n    errors.throwNotImplemented(\"getting Oracle Server version as a string\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getQueue()\n  //\n  // Returns a queue with the given name.\n  //---------------------------------------------------------------------------\n  getQueue() {\n    errors.throwNotImplemented(\"getting a queue\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getServiceName()\n  //\n  // Returns the Oracle Database service name associated with the connection.\n  //---------------------------------------------------------------------------\n  getServiceName() {\n    errors.throwNotImplemented(\"getting service name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getSodaDatabase()\n  //\n  // Returns a SodaDatabase object associated with the connection.\n  //---------------------------------------------------------------------------\n  getSodaDatabase() {\n    errors.throwNotImplemented(\"getting a SODA database\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getStatementInfo()\n  //\n  // Returns information about a statement.\n  //---------------------------------------------------------------------------\n  getStatementInfo() {\n    errors.throwNotImplemented(\"getting information about a statement\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getStmtCacheSize()\n  //\n  // Returns the size of the statement cache.\n  //---------------------------------------------------------------------------\n  getStmtCacheSize() {\n    errors.throwNotImplemented(\"getting the statement cache size\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getTag()\n  //\n  // Returns the tag associated with the connection.\n  //---------------------------------------------------------------------------\n  getTag() {\n    errors.throwNotImplemented(\"getting the tag for the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getTransactionInProgress()\n  //\n  // Returns boolean based on the presence of an active transaction on the\n  // connection\n  //---------------------------------------------------------------------------\n  getTransactionInProgress() {\n    errors.throwNotImplemented(\"getting the status of an active transaction\" +\n      \" on the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getWarning()\n  //\n  // Returns a warning on a connection\n  //---------------------------------------------------------------------------\n  getWarning() {\n    errors.throwNotImplemented(\"getting information about warning\");\n  }\n\n  //---------------------------------------------------------------------------\n  // isHealthy()\n  //\n  // Returns whether the connection is healthy or not.\n  //---------------------------------------------------------------------------\n  isHealthy() {\n    errors.throwNotImplemented(\"getting the health of the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // ping()\n  //\n  // Sends a \"ping\" to the database to see if it is \"alive\".\n  //---------------------------------------------------------------------------\n  ping() {\n    errors.throwNotImplemented(\"sending a ping to the database\");\n  }\n\n  //---------------------------------------------------------------------------\n  // rollback()\n  //\n  // Rolls back a transaction.\n  //---------------------------------------------------------------------------\n  rollback() {\n    errors.throwNotImplemented(\"rolling back a transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setAction()\n  //\n  // Sets the end-to-end tracing attribute \"action\".\n  //---------------------------------------------------------------------------\n  setAction() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'action'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setCallTimeout()\n  //\n  // Sets the call timeout value.\n  //---------------------------------------------------------------------------\n  setCallTimeout() {\n    errors.throwNotImplemented(\"setting call timeout\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setClientId()\n  //\n  // Sets the end-to-end tracing attribute \"clientId\".\n  //---------------------------------------------------------------------------\n  setClientId() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'clientId'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setClientInfo()\n  //\n  // Sets the end-to-end tracing attribute \"clientInfo\".\n  //---------------------------------------------------------------------------\n  setClientInfo() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'clientInfo'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setCurrentSchema()\n  //\n  // Sets the current schema.\n  //---------------------------------------------------------------------------\n  setCurrentSchema() {\n    errors.throwNotImplemented(\"setting the current schema\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setDbOp()\n  //\n  // Sets the end-to-end tracing attribute \"dbOp\".\n  //---------------------------------------------------------------------------\n  setDbOp() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'dbOp'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setECID()\n  //\n  // Sets the end-to-end tracing attribute \"ecid\".\n  //---------------------------------------------------------------------------\n  setECID() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'ecid'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setExternalName()\n  //\n  // Sets the external name for TPC logging.\n  //---------------------------------------------------------------------------\n  setExternalName() {\n    errors.throwNotImplemented(\"setting the external name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setInternalName()\n  //\n  // Sets the internal name for TPC logging.\n  //---------------------------------------------------------------------------\n  setInternalName() {\n    errors.throwNotImplemented(\"setting the internal name\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setStmtCacheSize()\n  //\n  // Sets the size of the statement cache.\n  //---------------------------------------------------------------------------\n  setStmtCacheSize() {\n    errors.throwNotImplemented(\"setting the size of the statement cache\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setModule()\n  //\n  // Sets the end-to-end tracing attribute \"module\".\n  //---------------------------------------------------------------------------\n  setModule() {\n    errors.throwNotImplemented(\"setting end-to-end attribute 'module'\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setTag()\n  //\n  // Sets the tag associated with the connection.\n  //---------------------------------------------------------------------------\n  setTag() {\n    errors.throwNotImplemented(\"setting the tag for the connection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // shutdown()\n  //\n  // Shuts down the database instance.\n  //---------------------------------------------------------------------------\n  shutdown() {\n    errors.throwNotImplemented(\"shutting down the database instance\");\n  }\n\n  //---------------------------------------------------------------------------\n  // startup()\n  //\n  // Starts up a database instance.\n  //---------------------------------------------------------------------------\n  startup() {\n    errors.throwNotImplemented(\"starting up the database instance\");\n  }\n\n  //---------------------------------------------------------------------------\n  // subscribe()\n  //\n  // Subscribes to events in the database.\n  //---------------------------------------------------------------------------\n  subscribe() {\n    errors.throwNotImplemented(\"subscribing to events in the database\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcBegin()\n  //\n  // Starts a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcBegin() {\n    errors.throwNotImplemented(\"starting a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcCommit()\n  //\n  // Commits a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcCommit() {\n    errors.throwNotImplemented(\"committing a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcEnd()\n  //\n  // Ends a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcEnd() {\n    errors.throwNotImplemented(\"ending a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcForget()\n  //\n  // Forgets a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcForget() {\n    errors.throwNotImplemented(\"forgetting a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcPrepare()\n  //\n  // Prepares a two-phase transaction for commit.\n  //---------------------------------------------------------------------------\n  tpcPrepare() {\n    errors.throwNotImplemented(\"preparing a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcRollback()\n  //\n  // Rolls back a two-phase transaction.\n  //---------------------------------------------------------------------------\n  tpcRollback() {\n    errors.throwNotImplemented(\"rolling back a two-phase transaction\");\n  }\n\n  //---------------------------------------------------------------------------\n  // unsubscribe()\n  //\n  // Unsubscribes from events in the database.\n  //---------------------------------------------------------------------------\n  unsubscribe() {\n    errors.throwNotImplemented(\"unsubscribing from events\");\n  }\n\n}\n\n// export just the class\nmodule.exports = ConnectionImpl;\n", "// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst ConnectionImpl = require('./connection.js');\nconst errors = require('../errors.js');\n\nclass LobImpl {\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    let parentObj = this._parentObj;\n    while (!(parentObj instanceof ConnectionImpl))\n      parentObj = parentObj._parentObj;\n    return parentObj;\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the LOB.\n  //---------------------------------------------------------------------------\n  close() {\n    errors.throwNotImplemented(\"closing a LOB\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getData()\n  //\n  // Returns all of the data in the LOB.\n  //---------------------------------------------------------------------------\n  getData() {\n    errors.throwNotImplemented(\"getting all of the data from a LOB\");\n  }\n\n  //---------------------------------------------------------------------------\n  // read()\n  //\n  // Reads data from the LOB at the specified offset.\n  //---------------------------------------------------------------------------\n  read() {\n    errors.throwNotImplemented(\"reading from a LOB\");\n  }\n\n  //---------------------------------------------------------------------------\n  // write()\n  //\n  // Writes data to the LOB at the specified offset.\n  //---------------------------------------------------------------------------\n  write() {\n    errors.throwNotImplemented(\"writing to a LOB\");\n  }\n\n}\n\nmodule.exports = LobImpl;\n", "// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\nconst nodbUtil = require('../util.js');\n\nclass PoolImpl {\n\n  //---------------------------------------------------------------------------\n  // _accessTokenHandler()\n  //\n  // Access token handler callback function which wraps the user callback and\n  // returns the token to the implementation.\n  //---------------------------------------------------------------------------\n  async _accessTokenHandler(userFn, externalObj, refresh, accessTokenConfig) {\n    let accessToken;\n    try {\n      let result = userFn(refresh, accessTokenConfig);\n      if (result instanceof Promise) {\n        result = await result;\n      }\n\n      if (!nodbUtil.isTokenValid(result)) {\n        errors.throwErr(errors.ERR_TOKEN_HAS_EXPIRED);\n      }\n      if (typeof result === 'object' && result.privateKey !== undefined) {\n        result.privateKey = nodbUtil.denormalizePrivateKey(result.privateKey);\n      }\n      accessToken = result;\n    } finally {\n      this.returnAccessToken(externalObj, accessToken);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the pool.\n  //---------------------------------------------------------------------------\n  close() {\n    errors.throwNotImplemented(\"closing the pool\");\n  }\n\n  //---------------------------------------------------------------------------\n  // create()\n  //\n  // Creates the pool and makes it available for use.\n  //---------------------------------------------------------------------------\n  create() {\n    errors.throwNotImplemented(\"creating the pool\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getConnection()\n  //\n  // Returns a connection from the pool.\n  //---------------------------------------------------------------------------\n  getConnection() {\n    errors.throwNotImplemented(\"getting a connection from the pool\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getConnectionsInUse()\n  //\n  // Returns the number of connections in use in the pool.\n  //---------------------------------------------------------------------------\n  getConnectionsInUse() {\n    errors.throwNotImplemented(\"getting num connection in use\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getConnectionsOpen()\n  //\n  // Returns the number of connections opened by the pool.\n  //---------------------------------------------------------------------------\n  getConnectionsOpen() {\n    errors.throwNotImplemented(\"getting num connection open\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolIncrement()\n  //\n  // Returns the number of connections to create when the pool needs to grow.\n  //---------------------------------------------------------------------------\n  getPoolIncrement() {\n    errors.throwNotImplemented(\"getting the pool increment\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolMax()\n  //\n  // Returns the maximum number of connections allowed in the pool.\n  //---------------------------------------------------------------------------\n  getPoolMax() {\n    errors.throwNotImplemented(\"getting the pool max\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolMaxPerShard()\n  //\n  // Returns the maximum number of connections allowed per shard in the pool.\n  //---------------------------------------------------------------------------\n  getPoolMaxPerShard() {\n    errors.throwNotImplemented(\"getting the pool max per shard\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolMin()\n  //\n  // Returns the minimum number of connections allowed in the pool.\n  //---------------------------------------------------------------------------\n  getPoolMin() {\n    errors.throwNotImplemented(\"getting the pool min\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolPingInterval()\n  //\n  // Returns the pool ping interval (seconds).\n  //---------------------------------------------------------------------------\n  getPoolPingInterval() {\n    errors.throwNotImplemented(\"getting the pool ping interval\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolPingTimeout()\n  //\n  // Returns the pool ping Timeout (milliseconds).\n  //---------------------------------------------------------------------------\n  getPoolPingTimeout() {\n    errors.throwNotImplemented(\"getting the pool ping Timeout\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getPoolTimeout()\n  //\n  // Returns the pool timeout.\n  //---------------------------------------------------------------------------\n  getPoolTimeout() {\n    errors.throwNotImplemented(\"getting the pool timeout\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getStmtCacheSize()\n  //\n  // Returns the statement cache size associate with the pool.\n  //---------------------------------------------------------------------------\n  getStmtCacheSize() {\n    errors.throwNotImplemented(\"getting the pool statement cache size\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getSodaMetaDataCache()\n  //\n  // Returns whether the SODA metadata cache is enabled or not.\n  //---------------------------------------------------------------------------\n  getSodaMetaDataCache() {\n    errors.throwNotImplemented(\"getting the SODA metadata cache flag\");\n  }\n\n  //---------------------------------------------------------------------------\n  // reconfigure()\n  //\n  // Reconfigures the pool with new parameters.\n  //---------------------------------------------------------------------------\n  reconfigure() {\n    errors.throwNotImplemented(\"reconfiguring the pool\");\n  }\n\n  //---------------------------------------------------------------------------\n  // setAccessToken()\n  //\n  // Sets the access token to use with the pool.\n  //---------------------------------------------------------------------------\n  setAccessToken() {\n    errors.throwNotImplemented(\"sets the access token\");\n  }\n\n}\n\nmodule.exports = PoolImpl;\n", "// Copyright (c) 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('./errors.js');\n\n// future object used for managing backwards incompatible changes.\nclass Future {\n\n  constructor() {\n    this._featureFlags = {};\n    this._featureFlags.oldJsonColumnAsObj = false;\n  }\n\n  get oldJsonColumnAsObj() {\n    return this._featureFlags.oldJsonColumnAsObj;\n  }\n\n  // fetch VARCHAR2 and LOB columns that contain JSON data (and have\n  // the \"IS JSON\" constraint enabled) in the same way that columns\n  // of type JSON (which requires Oracle Database 21 and higher) are fetched.\n  set oldJsonColumnAsObj(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"oldJsonColumnAsObj\");\n    this._featureFlags.oldJsonColumnAsObj = value;\n  }\n\n}\n\nmodule.exports = new Future;\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"stream\" has been externalized for browser compatibility. Cannot access \"stream.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (c) 2016, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst { Duplex } = require('stream');\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst types = require('./types.js');\n\nclass Lob extends Duplex {\n\n  constructor() {\n    super({ decodeStrings: false });\n    this.offset = 1;\n    this._isActive = false;\n    this.once('finish', function() {\n      if (this._autoCloseLob) {\n        this.destroy();\n      }\n    });\n  }\n\n  // called by stream.destroy() and ensures that the LOB is closed if it has\n  // not already been closed (never called directly)\n  async _destroy(err, cb) {\n    // if LOB was already closed, nothing to do!\n    if (err && err.message.startsWith(\"NJS-003:\"))\n      delete this._impl;\n    if (this._impl) {\n      const lobImpl = this._impl;\n      delete this._impl;\n      try {\n        await lobImpl.close();\n      } catch (closeErr) {\n        cb(closeErr);\n        return;\n      }\n    }\n    cb(err);\n  }\n\n  // implementation of streaming read; if LOB is set to auto-close, the lob is\n  // automatically closed when an error occurs or when there are no more bytes\n  // to transfer; all that needs to be done here is to destroy the streaming\n  // LOB\n  async _read() {\n    try {\n      const data = await this._serializedRead(this.offset);\n      if (data) {\n        this.offset += data.length;\n        this.push(data);\n      } else {\n        this.push(null);\n        if (this._autoCloseLob) {\n          this.destroy();\n        }\n      }\n    } catch (err) {\n      if (this._autoCloseLob)\n        this.destroy(err);\n      throw err;\n    }\n  }\n\n  // simple wrapper so that serialization can take place on a JavaScript fn\n  async _readData(offset) {\n    errors.assert(this._impl, errors.ERR_INVALID_LOB);\n    try {\n      return await this._impl.read(offset);\n    } catch (err) {\n      throw errors.transformErr(err, this._readData);\n    }\n  }\n\n  // called to associate a LOB implementation with this user facing object\n  _setup(lobImpl, autoCloseLob) {\n    this._impl = lobImpl;\n    this._chunkSize = lobImpl.getChunkSize();\n    this._pieceSize = lobImpl.getPieceSize();\n    this._length = lobImpl.getLength();\n    this._type = lobImpl.getType();\n    if (typeof this._type === 'number') {\n      this._type = types.getTypeByNum(this._type);\n    }\n    this._autoCloseLob = autoCloseLob;\n  }\n\n  // implementation of streaming write; if LOB is set to auto-close, the lob is\n  // automatically closed in the \"finish\" event; all that needs to be done here\n  // is to destroy the streaming LOB\n  async _write(data, encoding, cb) {\n\n    // convert data if needed\n    if (this.type == constants.DB_TYPE_BLOB && !Buffer.isBuffer(data)) {\n      data = Buffer.from(data);\n    } else if (this.type == constants.DB_TYPE_CLOB &&\n        Buffer.isBuffer(data)) {\n      data = data.toString();\n    }\n\n    try {\n      await this._serializedWrite(this.offset, data);\n    } catch (err) {\n      if (this._autoCloseLob)\n        this.destroy(err);\n      cb(err);\n      return;\n    }\n    this.offset += data.length;\n    cb(null);\n\n  }\n\n  // simple wrapper so that serialization can take place on a JavaScript fn\n  async _writeData(offset, data) {\n    errors.assert(this._impl, errors.ERR_INVALID_LOB);\n    try {\n      await this._impl.write(offset, data);\n    } catch (err) {\n      throw errors.transformErr(err, this._writeData);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // chunkSize\n  //\n  // Property for the chunk size of the LOB.\n  //---------------------------------------------------------------------------\n  get chunkSize() {\n    return this._chunkSize;\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the LOB and make it unusable for further operations. If the LOB is\n  // already closed, nothing is done in order to support multiple close()\n  // calls.\n  //\n  // This method is deprecated and will be removed in a future version of the\n  // node-oracledb driver. Use lob.destroy() instead. NOTE: this method will\n  // emit a duplicate \"close\" event in order to be compatible with previous\n  // versions of node-oracledb.\n  //---------------------------------------------------------------------------\n  async close() {\n    errors.assertArgCount(arguments, 0, 0);\n    if (this._impl) {\n      const lobImpl = this._impl;\n      delete this._impl;\n      try {\n        await lobImpl.close();\n        this.emit('close');\n      } catch (err) {\n        this.destroy(err);\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // getData()\n  //\n  // Return a portion (or all) of the data in the LOB. Note that the amount\n  // and offset are in bytes for BLOB and BFILE type LOBs and in UCS - 2 code\n  // points for CLOB and NCLOB type LOBs.UCS-2 code points are equivalent\n  // to characters for all but supplemental characters.If supplemental\n  // characters are in the LOB, the offset and amount will have to be chosen\n  // carefully to avoid splitting a character.\n  // Returns data in the LOB as a single string or buffer.\n  //---------------------------------------------------------------------------\n  async getData(offset, amount) {\n    errors.assertArgCount(arguments, 0, 2);\n    if (offset === undefined) {\n      offset = 1;\n    } else {\n      errors.assertParamValue(Number.isInteger(offset) && offset > 0, 1);\n    }\n    if (amount === undefined) {\n      amount = 0;\n    } else {\n      errors.assertParamValue(Number.isInteger(amount) && amount > 0, 2);\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_LOB);\n    return await this._impl.getData(offset, amount);\n  }\n\n  //---------------------------------------------------------------------------\n  // length\n  //\n  // Property for the length of the LOB.\n  //---------------------------------------------------------------------------\n  get length() {\n    return this._length;\n  }\n\n  //---------------------------------------------------------------------------\n  // pieceSize\n  //\n  // Property for the size to use for each piece that is transferred when\n  // reading from the LOB.\n  //---------------------------------------------------------------------------\n  get pieceSize() {\n    return this._pieceSize;\n  }\n\n  set pieceSize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"pieceSize\");\n    errors.assert(this._impl, errors.ERR_INVALID_LOB);\n    this._impl.setPieceSize(value);\n    this._pieceSize = value;\n  }\n\n  //---------------------------------------------------------------------------\n  // type\n  //\n  // Property for the type of the LOB.\n  //---------------------------------------------------------------------------\n  get type() {\n    return this._type;\n  }\n\n}\n\nnodbUtil.wrapFns(Lob.prototype, errors.ERR_BUSY_LOB,\n  \"close\",\n  \"getData\");\nLob.prototype._serializedRead = nodbUtil.serialize(Lob.prototype._readData);\nLob.prototype._serializedWrite = nodbUtil.serialize(Lob.prototype._writeData);\n\nmodule.exports = Lob;\n", "// Copyright (c) 2023, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { BaseBuffer, GrowableBuffer } = require('./buffer.js');\nconst { Buffer } = require('buffer');\nconst constants = require(\"./constants.js\");\nconst errors = require(\"../../errors.js\");\nconst types = require(\"../../types.js\");\nconst util = require(\"util\");\nconst vector = require(\"./vector.js\");\nconst nodbUtil = require(\"../../util.js\");\n\n/**\n * Class used for decoding\n */\nclass OsonDecoder extends BaseBuffer {\n\n  //---------------------------------------------------------------------------\n  // _decodeContainerNode()\n  //\n  // Decodes a container node (object or array) from the tree segment and\n  // returns the JavaScript equivalent.\n  //---------------------------------------------------------------------------\n  _decodeContainerNode(nodeType) {\n\n    // determine the number of children by examining the 4th and 5th most\n    // significant bits of the node type; determine the offsets in the tree\n    // segment to the field ids array and the value offsets array\n    let container, offsetsPos, fieldIdsPos;\n    const containerOffset = this.pos - this.treeSegPos - 1;\n    let numChildren = this._getNumChildren(nodeType);\n    const isObject = ((nodeType & 0x40) === 0);\n    if (numChildren === undefined) {\n      const offset = this._getOffset(nodeType);\n      offsetsPos = this.pos;\n      this.pos = this.treeSegPos + offset;\n      const sharedNodeType = this.readUInt8();\n      numChildren = this._getNumChildren(sharedNodeType);\n      container = (isObject) ? {} : new Array(numChildren);\n      fieldIdsPos = this.pos;\n    } else if (isObject) {\n      container = {};\n      fieldIdsPos = this.pos;\n      offsetsPos = this.pos + this.fieldIdLength * numChildren;\n    } else {\n      container = new Array(numChildren);\n      offsetsPos = this.pos;\n    }\n\n    for (let i = 0; i < numChildren; i++) {\n      let name;\n      if (isObject) {\n        let fieldId;\n        if (this.fieldIdLength === 1) {\n          fieldId = this.buf[fieldIdsPos];\n        } else if (this.fieldIdLength == 2) {\n          fieldId = this.buf.readUInt16BE(fieldIdsPos);\n        } else {\n          fieldId = this.buf.readUInt32BE(fieldIdsPos);\n        }\n        name = this.fieldNames[fieldId - 1];\n        fieldIdsPos += this.fieldIdLength;\n      }\n      this.pos = offsetsPos;\n      let offset = this._getOffset(nodeType);\n      if (this.relativeOffsets) {\n        offset += containerOffset;\n      }\n      offsetsPos = this.pos;\n      this.pos = this.treeSegPos + offset;\n      if (isObject) {\n        container[name] = this._decodeNode();\n      } else {\n        container[i] = this._decodeNode();\n      }\n    }\n\n    return container;\n  }\n\n  //---------------------------------------------------------------------------\n  // _decodeNode()\n  //\n  // Decodes a node from the tree segment and returns the JavaScript\n  // equivalent.\n  //---------------------------------------------------------------------------\n  _decodeNode() {\n\n    // if the most significant bit is set the node refers to a container\n    let nodeType = this.readUInt8();\n    if (nodeType & 0x80) {\n      return this._decodeContainerNode(nodeType);\n    }\n\n    // handle simple scalars\n    if (nodeType === constants.TNS_JSON_TYPE_NULL) {\n      return null;\n    } else if (nodeType === constants.TNS_JSON_TYPE_TRUE) {\n      return true;\n    } else if (nodeType === constants.TNS_JSON_TYPE_FALSE) {\n      return false;\n\n    // handle fixed length scalars\n    } else if (nodeType === constants.TNS_JSON_TYPE_DATE ||\n        nodeType === constants.TNS_JSON_TYPE_TIMESTAMP7) {\n      return this.parseOracleDate(this.readBytes(7));\n    } else if (nodeType === constants.TNS_JSON_TYPE_TIMESTAMP) {\n      return this.parseOracleDate(this.readBytes(11));\n    } else if (nodeType === constants.TNS_JSON_TYPE_TIMESTAMP_TZ) {\n      return this.parseOracleDate(this.readBytes(13));\n    } else if (nodeType === constants.TNS_JSON_TYPE_BINARY_FLOAT) {\n      return this.parseBinaryFloat(this.readBytes(4));\n    } else if (nodeType === constants.TNS_JSON_TYPE_BINARY_DOUBLE) {\n      return this.parseBinaryDouble(this.readBytes(8));\n\n    // handle scalars with lengths stored outside the node itself\n    } else if (nodeType === constants.TNS_JSON_TYPE_STRING_LENGTH_UINT8) {\n      return this.readBytes(this.readUInt8()).toString();\n    } else if (nodeType === constants.TNS_JSON_TYPE_STRING_LENGTH_UINT16) {\n      return this.readBytes(this.readUInt16BE()).toString();\n    } else if (nodeType === constants.TNS_JSON_TYPE_STRING_LENGTH_UINT32) {\n      return this.readBytes(this.readUInt32BE()).toString();\n    } else if (nodeType === constants.TNS_JSON_TYPE_NUMBER_LENGTH_UINT8) {\n      return parseFloat(this.readOracleNumber());\n    } else if (nodeType === constants.TNS_JSON_TYPE_ID) {\n      const buf = this.readBytes(this.readUInt8());\n      const jsonId = new types.JsonId(buf.length);\n      buf.copy(jsonId);\n      return jsonId;\n    } else if (nodeType === constants.TNS_JSON_TYPE_BINARY_LENGTH_UINT16) {\n      return Buffer.from(this.readBytes(this.readUInt16BE()));\n    } else if (nodeType === constants.TNS_JSON_TYPE_BINARY_LENGTH_UINT32) {\n      return Buffer.from(this.readBytes(this.readUInt32BE()));\n    } else if (nodeType === constants.TNS_JSON_TYPE_EXTENDED) {\n      nodeType = this.readUInt8();\n      if (nodeType === constants.TNS_JSON_TYPE_VECTOR) {\n        const vecImage = this.readBytes(this.readUInt32BE());\n        const decoder = new vector.VectorDecoder(vecImage);\n        return decoder.decode();\n      }\n    }\n\n    // handle number/decimal with length stored inside the node itself\n    const typeBits = nodeType & 0xf0;\n    if (typeBits === 0x20 || typeBits === 0x60) {\n      const len = nodeType & 0x0f;\n      return parseFloat(this.parseOracleNumber(this.readBytes(len + 1)));\n\n    // handle integer with length stored inside the node itself\n    } else if (typeBits === 0x40 || typeBits === 0x50) {\n      const len = nodeType & 0x0f;\n      return parseFloat(this.parseOracleNumber(this.readBytes(len)));\n\n    // handle string with length stored inside the node itself\n    } else if ((nodeType & 0xe0) == 0) {\n      if (nodeType === 0)\n        return '';\n      return this.readBytes(nodeType).toString();\n    }\n\n    errors.throwErr(errors.ERR_UNSUPPORTED_DATA_TYPE_IN_JSON, nodeType);\n  }\n\n  //---------------------------------------------------------------------------\n  // _getNumChildren()\n  //\n  // Returns the number of children a container has. This is determined by\n  // looking at the 4th and 5th most significant bits of the node type.\n  //\n  //   00 - number of children is uint8_t\n  //   01 - number of children is uint16_t\n  //   10 - number of children is uint32_t\n  //   11 - field ids are shared with another object whose offset follows\n  //\n  // In the latter case the value undefined is returned and the number of\n  // children must be read from the shared object at the specified offset.\n  //---------------------------------------------------------------------------\n  _getNumChildren(nodeType) {\n    const childrenBits = (nodeType & 0x18);\n    if (childrenBits === 0) {\n      return this.readUInt8();\n    } else if (childrenBits === 0x08) {\n      return this.readUInt16BE();\n    } else if (childrenBits === 0x10) {\n      return this.readUInt32BE();\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _getOffset()\n  //\n  // Returns an offset. The offset will be either a 16-bit or 32-bit value\n  // depending on the value of the 3rd significant bit of the node type.\n  //---------------------------------------------------------------------------\n  _getOffset(nodeType) {\n    if (nodeType & 0x20) {\n      return this.readUInt32BE();\n    } else {\n      return this.readUInt16BE();\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _getFieldNames\n  //\n  // Reads the field names from the buffer.\n  //---------------------------------------------------------------------------\n  _getFieldNames(arrStartPos, numFields, offsetsSize, fieldNamesSegSize, fieldNamesSize) {\n\n    // skip the hash id array (1 byte * fieldNamesSize for each field)\n    this.skipBytes(numFields * fieldNamesSize);\n\n    // skip the field name offsets array for now\n    const offsetsPos = this.pos;\n    this.skipBytes(numFields * offsetsSize);\n    const ptr = this.readBytes(fieldNamesSegSize);\n    const finalPos = this.pos;\n\n    // determine the names of the fields\n    this.pos = offsetsPos;\n    let offset;\n    for (let i = arrStartPos; i < arrStartPos + numFields; i++) {\n      if (offsetsSize === 2) {\n        offset = this.readUInt16BE();\n      } else {\n        offset = this.readUInt32BE();\n      }\n\n      // get the field name object\n      let temp;\n      if (fieldNamesSize === 1) {\n        // Short Field Name\n        temp = ptr.readUInt8(offset);\n      } else {\n        // Long Field Name\n        temp = ptr.readUInt16BE(offset);\n      }\n      this.fieldNames[i] = ptr.subarray(offset + fieldNamesSize, offset + temp + fieldNamesSize).toString();\n    }\n    this.pos = finalPos;\n  }\n\n  //---------------------------------------------------------------------------\n  // decode()\n  //\n  // Decodes the OSON and returns a JavaScript object corresponding to its\n  // contents.\n  //---------------------------------------------------------------------------\n  decode() {\n\n    // parse root header\n    const magic = this.readBytes(3);\n    if (magic[0] !== constants.TNS_JSON_MAGIC_BYTE_1 ||\n        magic[1] !== constants.TNS_JSON_MAGIC_BYTE_2 ||\n        magic[2] !== constants.TNS_JSON_MAGIC_BYTE_3) {\n      errors.throwErr(errors.ERR_UNEXPECTED_DATA, magic.toString('hex'));\n    }\n    const version = this.readUInt8();\n    if (version !== constants.TNS_JSON_VERSION_MAX_FNAME_255 &&\n        version !== constants.TNS_JSON_VERSION_MAX_FNAME_65535) {\n      errors.throwErr(errors.ERR_OSON_VERSION_NOT_SUPPORTED, version);\n    }\n    const primaryFlags = this.readUInt16BE();\n    this.relativeOffsets = primaryFlags & constants.TNS_JSON_FLAG_REL_OFFSET_MODE;\n\n    // scalar values are much simpler\n    if (primaryFlags & constants.TNS_JSON_FLAG_IS_SCALAR) {\n      if (primaryFlags & constants.TNS_JSON_FLAG_TREE_SEG_UINT32) {\n        this.skipBytes(4);\n      } else {\n        this.skipBytes(2);\n      }\n      return this._decodeNode();\n    }\n\n    // determine the number of short field names\n    let numShortFieldNames;\n    if (primaryFlags & constants.TNS_JSON_FLAG_NUM_FNAMES_UINT32) {\n      numShortFieldNames = this.readUInt32BE();\n      this.fieldIdLength = 4;\n    } else if (primaryFlags & constants.TNS_JSON_FLAG_NUM_FNAMES_UINT16) {\n      numShortFieldNames = this.readUInt16BE();\n      this.fieldIdLength = 2;\n    } else {\n      numShortFieldNames = this.readUInt8();\n      this.fieldIdLength = 1;\n    }\n\n    // determine the size of the short field names segment\n    let shortFieldNameOffsetsSize, shortFieldNamesSegSize;\n    if (primaryFlags & constants.TNS_JSON_FLAG_FNAMES_SEG_UINT32) {\n      shortFieldNameOffsetsSize = 4;\n      shortFieldNamesSegSize = this.readUInt32BE();\n    } else {\n      shortFieldNameOffsetsSize = 2;\n      shortFieldNamesSegSize = this.readUInt16BE();\n    }\n\n    // if the version indicates that field names > 255 bytes exist, parse\n    // the information about that segment\n    let longFieldNameOffsetsSize, longFieldNamesSegSize;\n    let numLongFieldNames = 0;\n    if (version === constants.TNS_JSON_VERSION_MAX_FNAME_65535) {\n      const secondaryFlags = this.readUInt16BE();\n      if (secondaryFlags & constants.TNS_JSON_FLAG_SEC_FNAMES_SEG_UINT16) {\n        longFieldNameOffsetsSize = 2;\n      } else {\n        longFieldNameOffsetsSize = 4;\n      }\n      numLongFieldNames = this.readUInt32BE();\n      longFieldNamesSegSize = this.readUInt32BE();\n    }\n\n    // skip the size of the tree segment\n    if (primaryFlags & constants.TNS_JSON_FLAG_TREE_SEG_UINT32) {\n      this.skipBytes(4);\n    } else {\n      this.skipBytes(2);\n    }\n\n    // skip the number of \"tiny\" nodes\n    this.skipBytes(2);\n\n    this.fieldNames = new Array(numShortFieldNames + numLongFieldNames);\n\n    // if there are any short names, read them now\n    if (numShortFieldNames > 0) {\n      this._getFieldNames(0, numShortFieldNames,\n        shortFieldNameOffsetsSize, shortFieldNamesSegSize, 1);\n    }\n\n    // if there are any long names, read them now\n    if (numLongFieldNames > 0) {\n      this._getFieldNames(numShortFieldNames, numLongFieldNames,\n        longFieldNameOffsetsSize, longFieldNamesSegSize, 2);\n    }\n\n    // determine tree segment position in the buffer\n    this.treeSegPos = this.pos;\n\n    // decode the root node\n    return this._decodeNode();\n  }\n\n}\n\nclass OsonFieldName {\n\n  constructor(name, maxFieldNameSize) {\n    this.name = name;\n    this.nameBytes = Buffer.from(name);\n    if (this.nameBytes.length > maxFieldNameSize) {\n      errors.throwErr(errors.ERR_OSON_FIELD_NAME_LIMITATION, maxFieldNameSize);\n    }\n\n    // BigInt constants for calculating Hash ID for the OSON Field Name\n    const INITIAL_HASHID = 0x811C9DC5n;\n    const HASH_MULTIPLIER = 16777619n;\n    const HASH_MASK = 0xffffffffn;\n\n    this.hashId = INITIAL_HASHID;\n    for (let i = 0; i < this.nameBytes.length; i++) {\n      const c = BigInt(this.nameBytes[i]);\n      this.hashId = ((this.hashId ^ c) * HASH_MULTIPLIER) & HASH_MASK;\n    }\n    this.hashId = Number(this.hashId) & 0xff;\n  }\n\n}\n\nclass OsonFieldNamesSegment extends GrowableBuffer {\n\n  constructor() {\n    super();\n    this.fieldNames = [];\n  }\n\n  //---------------------------------------------------------------------------\n  // addName()\n  //\n  // Adds a name to the field names segment.\n  //---------------------------------------------------------------------------\n  addName(fieldName) {\n    fieldName.offset = this.pos;\n    if (fieldName.nameBytes.length <= 255) {\n      this.writeUInt8(fieldName.nameBytes.length);\n    } else {\n      this.writeUInt16BE(fieldName.nameBytes.length);\n    }\n    this.writeBytes(fieldName.nameBytes);\n    this.fieldNames.push(fieldName);\n  }\n\n  //---------------------------------------------------------------------------\n  // _processFieldNames()\n  //\n  // Processes the field names in preparation for encoding within OSON.\n  //---------------------------------------------------------------------------\n  _processFieldNames(fieldIdOffset) {\n    this.fieldNames.sort((a, b) => {\n      if (a.hashId < b.hashId)\n        return -1;\n      if (a.hashId > b.hashId)\n        return 1;\n      if (a.nameBytes.length < b.nameBytes.length)\n        return -1;\n      if (a.nameBytes.length > b.nameBytes.length)\n        return 1;\n      if (a.name < b.name)\n        return -1;\n      if (a.name > b.name)\n        return 1;\n      return 0;\n    });\n    for (let i = 0; i < this.fieldNames.length; i++) {\n      this.fieldNames[i].fieldId = fieldIdOffset + i + 1;\n    }\n    if (this.fieldNames.length < 256) {\n      this.fieldIdSize = 1;\n    } else if (this.fieldNames.length < 65536) {\n      this.fieldIdSize = 2;\n    } else {\n      this.fieldIdSize = 4;\n    }\n  }\n\n}\n\nclass OsonTreeSegment extends GrowableBuffer {\n\n  //---------------------------------------------------------------------------\n  // _encodeArray()\n  //\n  // Encodes an array in the OSON tree segment.\n  //---------------------------------------------------------------------------\n  _encodeArray(value, encoder) {\n    this._encodeContainer(constants.TNS_JSON_TYPE_ARRAY, value.length);\n    const len = value.length * 4;\n    const pos = this.reserveBytes(len);\n    let offsetsBufPos = pos;\n    for (const element of value) {\n      this.buf.writeUInt32BE(this.pos, offsetsBufPos);\n      offsetsBufPos += 4;\n      this.encodeNode(element, encoder);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _encodeContainer()\n  //\n  // Encodes the first part of a container (array or object) in the OSON tree\n  // segment.\n  //---------------------------------------------------------------------------\n  _encodeContainer(nodeType, numChildren) {\n    nodeType |= 0x20;                   // use uint32_t for offsets\n    if (numChildren > 65535) {\n      nodeType |= 0x10;                 // num children is uint32_t\n    } else if (numChildren > 255) {\n      nodeType |= 0x08;                 // num children is uint16_t\n    }\n    this.writeUInt8(nodeType);\n    if (numChildren < 256) {\n      this.writeUInt8(numChildren);\n    } else if (numChildren < 65536) {\n      this.writeUInt16BE(numChildren);\n    } else {\n      this.writeUInt32BE(numChildren);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _encodeObject()\n  //\n  // Encodes an object in the OSON tree segment.\n  //---------------------------------------------------------------------------\n  _encodeObject(value, encoder) {\n    const numChildren = value.values.length;\n    this._encodeContainer(constants.TNS_JSON_TYPE_OBJECT, numChildren);\n    let fieldIdOffset = this.pos;\n    let valueOffset = this.pos + (numChildren * encoder.fieldIdSize);\n    const finalOffset = valueOffset + numChildren * 4;\n    this.reserveBytes(finalOffset - this.pos);\n\n    for (let i = 0; i < value.fields.length; i++) {\n      const fieldName = encoder.fieldNamesMap.get(value.fields[i]);\n      if (encoder.fieldIdSize == 1) {\n        this.buf[fieldIdOffset] = fieldName.fieldId;\n      } else if (encoder.fieldIdSize == 2) {\n        this.buf.writeUInt16BE(fieldName.fieldId, fieldIdOffset);\n      } else {\n        this.buf.writeUInt32BE(fieldName.fieldId, fieldIdOffset);\n      }\n      this.buf.writeUInt32BE(this.pos, valueOffset);\n      fieldIdOffset += encoder.fieldIdSize;\n      valueOffset += 4;\n      this.encodeNode(value.values[i], encoder);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // encodeNode()\n  //\n  // Encodes a value (node) in the OSON tree segment.\n  //---------------------------------------------------------------------------\n  encodeNode(value, encoder) {\n\n    // handle null\n    if (value === undefined || value === null) {\n      this.writeUInt8(constants.TNS_JSON_TYPE_NULL);\n\n    // handle booleans\n    } else if (typeof value === 'boolean') {\n      if (value) {\n        this.writeUInt8(constants.TNS_JSON_TYPE_TRUE);\n      } else {\n        this.writeUInt8(constants.TNS_JSON_TYPE_FALSE);\n      }\n\n    // handle numbers\n    } else if (typeof value === 'number') {\n      this.writeUInt8(constants.TNS_JSON_TYPE_NUMBER_LENGTH_UINT8);\n      this.writeOracleNumber(value.toString());\n\n    // handle strings\n    } else if (typeof value === 'string') {\n      const buf = Buffer.from(value);\n      if (buf.length < 256) {\n        this.writeUInt8(constants.TNS_JSON_TYPE_STRING_LENGTH_UINT8);\n        this.writeUInt8(buf.length);\n      } else if (buf.length < 65536) {\n        this.writeUInt8(constants.TNS_JSON_TYPE_STRING_LENGTH_UINT16);\n        this.writeUInt16BE(buf.length);\n      } else {\n        this.writeUInt8(constants.TNS_JSON_TYPE_STRING_LENGTH_UINT32);\n        this.writeUInt32BE(buf.length);\n      }\n      if (buf.length > 0) {\n        this.writeBytes(buf);\n      }\n\n    // handle dates\n    } else if (util.types.isDate(value)) {\n      if (value.getUTCMilliseconds() === 0) {\n        this.writeUInt8(constants.TNS_JSON_TYPE_TIMESTAMP7);\n        this.writeOracleDate(value, types.DB_TYPE_DATE, false);\n      } else {\n        this.writeUInt8(constants.TNS_JSON_TYPE_TIMESTAMP);\n        this.writeOracleDate(value, types.DB_TYPE_TIMESTAMP, false);\n      }\n\n    // handle buffers\n    } else if (Buffer.isBuffer(value)) {\n      if (value.length < 65536) {\n        this.writeUInt8(constants.TNS_JSON_TYPE_BINARY_LENGTH_UINT16);\n        this.writeUInt16BE(value.length);\n      } else {\n        this.writeUInt8(constants.TNS_JSON_TYPE_BINARY_LENGTH_UINT32);\n        this.writeUInt32BE(value.length);\n      }\n      this.writeBytes(value);\n\n    // handle arrays\n    } else if (Array.isArray(value)) {\n      this._encodeArray(value, encoder);\n\n    // handle vectors\n    } else if (nodbUtil.isVectorValue(value)) {\n      this.writeUInt8(constants.TNS_JSON_TYPE_EXTENDED);\n      this.writeUInt8(constants.TNS_JSON_TYPE_VECTOR);\n      const encoder = new vector.VectorEncoder();\n      const buf = encoder.encode(value);\n      this.writeUInt32BE(buf.length);\n      this.writeBytes(buf);\n\n    } else if (value instanceof types.JsonId) {\n      this.writeUInt8(constants.TNS_JSON_TYPE_ID);\n      this.writeUInt8(value.length);\n      this.writeBytes(Buffer.from(value.buffer));\n\n    // handle objects\n    } else {\n      this._encodeObject(value, encoder);\n    }\n\n  }\n\n}\n\n/**\n * Class used for encoding\n */\n\nclass OsonEncoder extends GrowableBuffer {\n\n  //---------------------------------------------------------------------------\n  // _addFieldName()\n  //\n  // Add a field with the given name.\n  //---------------------------------------------------------------------------\n  _addFieldName(name) {\n    const fieldName = new OsonFieldName(name, this.maxFieldNameSize);\n    this.fieldNamesMap.set(name, fieldName);\n    if (fieldName.nameBytes.length <= 255) {\n      this.shortFieldNamesSeg.addName(fieldName);\n    } else {\n      if (!this.longFieldNamesSeg) {\n        this.longFieldNamesSeg = new OsonFieldNamesSegment();\n      }\n      this.longFieldNamesSeg.addName(fieldName);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _examineNode()\n  //\n  // Examines the value. If it contains fields, unique names are retained. The\n  // values are then examined to see if they also contain fields. Arrays are\n  // examined to determine they contain elements that contain fields.\n  //---------------------------------------------------------------------------\n  _examineNode(value) {\n    if (Array.isArray(value)) {\n      for (const element of value) {\n        this._examineNode(element);\n      }\n    } else if (value && Array.isArray(value.fields)) {\n      for (let i = 0; i < value.fields.length; i++) {\n        const name = value.fields[i];\n        const element = value.values[i];\n        if (!this.fieldNamesMap.has(name)) {\n          this._addFieldName(name);\n        }\n        this._examineNode(element);\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _writeExtendedHeader()\n  //\n  // Write the extended header containing information about the short and long\n  // field name segments.\n  //---------------------------------------------------------------------------\n  _writeExtendedHeader() {\n    // write number of short field names\n    if (this.fieldIdSize === 1) {\n      this.writeUInt8(this.shortFieldNamesSeg.fieldNames.length);\n    } else if (this.fieldIdSize === 2) {\n      this.writeUInt16BE(this.shortFieldNamesSeg.fieldNames.length);\n    } else {\n      this.writeUInt32BE(this.shortFieldNamesSeg.fieldNames.length);\n    }\n\n    // write size of short field names segment\n    if (this.shortFieldNamesSeg.pos < 65536) {\n      this.writeUInt16BE(this.shortFieldNamesSeg.pos);\n    } else {\n      this.writeUInt32BE(this.shortFieldNamesSeg.pos);\n    }\n\n    // write fields for long field names segment, if applicable\n    if (this.longFieldNamesSeg) {\n      let secondaryFlags = 0;\n      if (this.longFieldNamesSeg.pos < 65536) {\n        secondaryFlags = constants.TNS_JSON_FLAG_SEC_FNAMES_SEG_UINT16;\n      }\n      this.writeUInt16BE(secondaryFlags);\n      this.writeUInt32BE(this.longFieldNamesSeg.fieldNames.length);\n      this.writeUInt32BE(this.longFieldNamesSeg.pos);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _writeFieldNamesSeg()\n  //\n  // Write the contents of the field names segment to the buffer.\n  //---------------------------------------------------------------------------\n  _writeFieldNamesSeg(fieldNamesSeg) {\n    // write array of hash ids\n    for (const fieldName of fieldNamesSeg.fieldNames) {\n      if (fieldName.nameBytes.length <= 255) {\n        this.writeUInt8(fieldName.hashId);\n      } else {\n        this.writeUInt16BE(fieldName.hashId);\n      }\n    }\n\n    // write array of field name offsets for the short field names\n    for (const fieldName of fieldNamesSeg.fieldNames) {\n      if (fieldNamesSeg.pos < 65536) {\n        this.writeUInt16BE(fieldName.offset);\n      } else {\n        this.writeUInt32BE(fieldName.offset);\n      }\n    }\n\n    // write field names\n    if (fieldNamesSeg.pos > 0) {\n      this.writeBytes(fieldNamesSeg.buf.subarray(0, fieldNamesSeg.pos));\n    }\n\n  }\n\n  //---------------------------------------------------------------------------\n  // encode()\n  //\n  // Encodes the value as OSON and returns a buffer containing the OSON bytes.\n  //---------------------------------------------------------------------------\n  encode(value, maxFieldNameSize) {\n\n    this.maxFieldNameSize = maxFieldNameSize;\n\n    // determine the flags to use\n    let flags = constants.TNS_JSON_FLAG_INLINE_LEAF;\n    if (Array.isArray(value) || (value && Array.isArray(value.fields))) {\n      // examine all values recursively to determine the unique set of field\n      // names and whether they need to be added to the long field names\n      // segment (> 255 bytes) or short field names segment (<= 255 bytes)\n      this.fieldNamesMap = new Map();\n      this.shortFieldNamesSeg = new OsonFieldNamesSegment();\n      this._examineNode(value);\n\n      // perform processing of field names segments and determine the total\n      // number of unique field names in the value\n      let totalNumFieldNames = 0;\n      if (this.shortFieldNamesSeg) {\n        this.shortFieldNamesSeg._processFieldNames(0);\n        totalNumFieldNames += this.shortFieldNamesSeg.fieldNames.length;\n      }\n      if (this.longFieldNamesSeg) {\n        this.longFieldNamesSeg._processFieldNames(totalNumFieldNames);\n        totalNumFieldNames += this.longFieldNamesSeg.fieldNames.length;\n      }\n\n      // determine remaining flags and field id size\n      flags |= constants.TNS_JSON_FLAG_HASH_ID_UINT8 |\n        constants.TNS_JSON_FLAG_TINY_NODES_STAT;\n      if (totalNumFieldNames > 65535) {\n        flags |= constants.TNS_JSON_FLAG_NUM_FNAMES_UINT32;\n        this.fieldIdSize = 4;\n      } else if (totalNumFieldNames > 255) {\n        flags |= constants.TNS_JSON_FLAG_NUM_FNAMES_UINT16;\n        this.fieldIdSize = 2;\n      } else {\n        this.fieldIdSize = 1;\n      }\n      if (this.shortFieldNamesSeg.pos > 65535) {\n        flags |= constants.TNS_JSON_FLAG_FNAMES_SEG_UINT32;\n      }\n    } else {\n      // if the value is a simple scalar\n      flags |= constants.TNS_JSON_FLAG_IS_SCALAR;\n    }\n\n    // encode values into the OSON tree segment\n    const treeSeg = new OsonTreeSegment();\n    treeSeg.encodeNode(value, this);\n    if (treeSeg.pos > 65535) {\n      flags |= constants.TNS_JSON_FLAG_TREE_SEG_UINT32;\n    }\n\n    // write initial header\n    this.writeUInt8(constants.TNS_JSON_MAGIC_BYTE_1);\n    this.writeUInt8(constants.TNS_JSON_MAGIC_BYTE_2);\n    this.writeUInt8(constants.TNS_JSON_MAGIC_BYTE_3);\n    if (this.longFieldNamesSeg) {\n      this.writeUInt8(constants.TNS_JSON_VERSION_MAX_FNAME_65535);\n    } else {\n      this.writeUInt8(constants.TNS_JSON_VERSION_MAX_FNAME_255);\n    }\n    this.writeUInt16BE(flags);\n\n    // write extended header (when value is not scalar)\n    if (this.shortFieldNamesSeg) {\n      this._writeExtendedHeader();\n    }\n\n    // write size of tree segment\n    if (treeSeg.pos < 65536) {\n      this.writeUInt16BE(treeSeg.pos);\n    } else {\n      this.writeUInt32BE(treeSeg.pos);\n    }\n\n    // write remainder of header and any data (when value is not scalar)\n    if (this.shortFieldNamesSeg) {\n\n      // write number of \"tiny\" nodes (always zero)\n      this.writeUInt16BE(0);\n\n      // write the field names segments\n      this._writeFieldNamesSeg(this.shortFieldNamesSeg);\n      if (this.longFieldNamesSeg) {\n        this._writeFieldNamesSeg(this.longFieldNamesSeg);\n      }\n    }\n\n    // write tree segment data\n    this.writeBytes(treeSeg.buf.subarray(0, treeSeg.pos));\n\n    return this.buf.subarray(0, this.pos);\n  }\n\n}\n\nmodule.exports = {\n  OsonDecoder,\n  OsonEncoder\n};\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('../constants.js');\nconst errors = require('../errors.js');\nconst nodbUtil = require('../util.js');\nconst settings = require('../settings.js');\nconst future = require('../future.js');\nconst types = require('../types.js');\nconst Lob = require('../lob.js');\nconst oson = require('./datahandlers/oson.js');\n\n// define implementation class\nclass ResultSetImpl {\n\n  //---------------------------------------------------------------------------\n  // _determineFetchType()\n  //\n  // Determine the fetch type to use for the specified metadata.\n  //---------------------------------------------------------------------------\n  _determineFetchType(metadata, options) {\n\n    // clear any previous fetch type and converter functions that may have been\n    // retained\n    delete metadata.fetchType;\n    delete metadata.converter;\n\n    // if a fetch type handler is specified, call it; if no value (undefined)\n    // is returned, the normal processing takes place\n    if (options.fetchTypeHandler) {\n      const result = options.fetchTypeHandler(metadata);\n      if (result !== undefined) {\n        errors.assert(typeof result === 'object',\n          errors.ERR_FETCH_TYPE_HANDLER_RETURN_VALUE);\n        if (result.type !== undefined) {\n          errors.assert(result.type instanceof types.DbType,\n            errors.ERR_FETCH_TYPE_HANDLER_TYPE);\n        }\n        if (result.converter !== undefined) {\n          errors.assert(typeof result.converter === 'function',\n            errors.ERR_FETCH_TYPE_HANDLER_CONVERTER);\n        }\n        metadata.fetchType = result.type;\n        metadata.converter = result.converter;\n      }\n    }\n\n    // continue processing if no fetch type was specified or no fetch type\n    // handler was supplied\n    if (!metadata.fetchType) {\n\n      // if the fetchTypeMap exists (calculated from the fetchInfo argument),\n      // use it to determine the fetch type\n      if (options.fetchTypeMap && options.fetchTypeMap.has(metadata.name)) {\n        metadata.fetchType = options.fetchTypeMap.get(metadata.name);\n        if (metadata.fetchType === constants.DEFAULT) {\n          metadata.fetchType =\n            types.DB_TYPE_FETCH_TYPE_MAP.get(metadata.dbType);\n        }\n\n      // otherwise, use the default fetch type map (calculated from the\n      // fetchAsString and fetchAsBuffer settings\n      } else {\n        metadata.fetchType = settings.fetchTypeMap.get(metadata.dbType);\n      }\n\n    }\n\n    // if the types do not match, verify that the conversion is supported and\n    // adjust the final fetch type to match what the database expects\n    if (metadata.fetchType !== metadata.dbType) {\n      const map = types.DB_TYPE_CONVERSION_MAP.get(metadata.dbType);\n      const actualFetchType = map && map.get(metadata.fetchType);\n      if (!actualFetchType) {\n        errors.throwErr(errors.ERR_UNSUPPORTED_CONVERSION,\n          metadata.dbType.name, metadata.fetchType.name);\n      }\n      metadata.fetchType = actualFetchType;\n    }\n\n    let converter;\n    const userConverter = metadata.converter;\n\n    // If IsJson or IsOson is set, convert to JSON objects unless\n    // user defined output type handler overwrites it.\n    if (metadata.dbType !== types.DB_TYPE_JSON && future.oldJsonColumnAsObj\n      && userConverter === undefined) {\n      let outConverter;\n      if (metadata.isOson) {\n        outConverter = async function(val) {\n          if (!val) {\n            return val;\n          }\n          let result = val;\n          if (val instanceof Lob) {\n            result = await val.getData();\n          }\n          const decoder = new oson.OsonDecoder(result);\n          return decoder.decode();\n        };\n        converter = outConverter;\n      } else if (metadata.isJson) {\n        outConverter = async function(val) {\n          if (!val) {\n            return val;\n          }\n\n          let result = val;\n          if (val instanceof Lob) {\n            result = await val.getData();\n          }\n          if (result instanceof Buffer) {\n            result = result.toString();\n          }\n          result = JSON.parse(result);\n          return result;\n        };\n        converter = outConverter;\n      }\n    }\n\n    // in thin mode, Oracle NUMBER values are internally fetched as string in\n    // order to preserve precision so must be converted to JavaScript Number\n    // when needed; other numeric and date types are fetched natively as\n    // JavaScript Number and Date values and are converted to string using\n    // toString() when desired\n    if (settings.thin) {\n      if (metadata.dbType === types.DB_TYPE_NUMBER &&\n        metadata.fetchType === types.DB_TYPE_NUMBER) {\n        converter = (v) => (v === null) ? null : parseFloat(v);\n      } else if (metadata.fetchType === types.DB_TYPE_VARCHAR) {\n        if (metadata.dbType === types.DB_TYPE_BINARY_DOUBLE ||\n          metadata.dbType === types.DB_TYPE_BINARY_FLOAT ||\n          metadata.dbType === types.DB_TYPE_DATE ||\n          metadata.dbType === types.DB_TYPE_TIMESTAMP ||\n          metadata.dbType === types.DB_TYPE_TIMESTAMP_LTZ ||\n          metadata.dbType === types.DB_TYPE_TIMESTAMP_TZ) {\n          converter = (v) => (v === null) ? null : v.toString();\n        } else if (metadata.dbType === types.DB_TYPE_RAW) {\n          converter = (v) => (v === null) ? null : v.toString('hex').toUpperCase();\n        }\n      } else if (metadata.dbType === types.DB_TYPE_XMLTYPE) {\n        const xmlConverter = async function(val) {\n          if (!val) {\n            return val;\n          }\n          if (typeof val === 'string') {\n            return val;\n          }\n          return await val.getData();\n        };\n        converter = xmlConverter;\n      }\n      if (userConverter && converter) {\n        const internalConverter = converter;\n        converter = (v) => userConverter(internalConverter(v));\n      }\n    }\n\n    if (converter) {\n      metadata.converter = converter;\n    }\n\n  }\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this._parentObj;\n  }\n\n  //---------------------------------------------------------------------------\n  // _setup()\n  //\n  // Setup a result set. The metadata is examined to to determine if any\n  // columns need to be manipulated before being returned to the caller. If the\n  // rows fetched from the result set are expected to be objects, a unique set\n  // of attribute names are also determined.\n  //---------------------------------------------------------------------------\n  _setup(options, metaData) {\n    this._parentObj = options.connection._impl;\n    this.metaData = metaData;\n    this.lobIndices = [];\n    this.dbObjectIndices = [];\n    this.nestedCursorIndices = [];\n    this.converterIndices = [];\n    this.outFormat = options.outFormat;\n    this.fetchArraySize = options.fetchArraySize;\n    this.dbObjectAsPojo = options.dbObjectAsPojo;\n    this.maxRows = options.maxRows;\n    const names = new Map();\n    for (let i = 0; i < metaData.length; i++) {\n      const name = metaData[i].name;\n      if (!names.has(name)) {\n        names.set(name, i);\n      }\n    }\n    for (let i = 0; i < metaData.length; i++) {\n      const info = metaData[i];\n      if (info.dbTypeClass) {\n        const cls = options.connection._getDbObjectClass(info.dbTypeClass);\n        info.dbTypeClass = cls;\n      }\n      nodbUtil.addTypeProperties(info, \"dbType\");\n      this._determineFetchType(info, options);\n      if (info.fetchType === types.DB_TYPE_CURSOR) {\n        this.nestedCursorIndices.push(i);\n      } else if (info.fetchType === types.DB_TYPE_CLOB ||\n          info.fetchType === types.DB_TYPE_NCLOB ||\n          info.fetchType === types.DB_TYPE_BLOB) {\n        this.lobIndices.push(i);\n      } else if (info.fetchType === types.DB_TYPE_OBJECT) {\n        this.dbObjectIndices.push(i);\n      }\n      if (info.converter) {\n        this.converterIndices.push(i);\n      }\n      let name = info.name;\n      if (names.get(name) !== i) {\n        let seqNum = 0;\n        while (names.has(name)) {\n          seqNum = seqNum + 1;\n          name = `${info.name}_${seqNum}`;\n        }\n        names.set(name, i);\n        info.name = name;\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Closes the result set.\n  //---------------------------------------------------------------------------\n  close() {\n    errors.throwNotImplemented(\"closing a result set\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getRows()\n  //\n  // Returns rows from a result set.\n  //---------------------------------------------------------------------------\n  getRows() {\n    errors.throwNotImplemented(\"getting rows\");\n  }\n\n}\n\nmodule.exports = ResultSetImpl;\n", "// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\nclass SodaCollectionImpl {\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this._database._connection;\n  }\n\n  //---------------------------------------------------------------------------\n  // createIndex()\n  //\n  // Creates an index on a SODA collection.\n  //---------------------------------------------------------------------------\n  createIndex() {\n    errors.throwNotImplemented(\"creating an index on a SODA collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // drop()\n  //\n  // Drops a SODA collection.\n  //---------------------------------------------------------------------------\n  drop() {\n    errors.throwNotImplemented(\"dropping a SODA collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // dropIndex()\n  //\n  // Drops a SODA collection.\n  //---------------------------------------------------------------------------\n  dropIndex() {\n    errors.throwNotImplemented(\"dropping an index on a SODA collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // find()\n  //\n  // Returns a SODA operation object associated with the collection.\n  //---------------------------------------------------------------------------\n  find() {\n    errors.throwNotImplemented(\"creating a SODA operation\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDataGuide()\n  //\n  // Returns a SODA operation object associated with the collection.\n  //---------------------------------------------------------------------------\n  getDataGuide() {\n    errors.throwNotImplemented(\"getting the data guide for the collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMetaData()\n  //\n  // Returns the metadata for the collection.\n  //---------------------------------------------------------------------------\n  getMetaData() {\n    errors.throwNotImplemented(\"getting the metadata for the collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getName()\n  //\n  // Returns the name of the collection.\n  //---------------------------------------------------------------------------\n  getName() {\n    errors.throwNotImplemented(\"getting the name of the collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // insertMany()\n  //\n  // Inserts multiple documents into the collection at the same time.\n  //---------------------------------------------------------------------------\n  insertMany() {\n    errors.throwNotImplemented(\"inserting multiple docs into a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // insertManyAndGet()\n  //\n  // Inserts multiple documents into the collection at the same time and\n  // returns an array of documents containing metadata.\n  //---------------------------------------------------------------------------\n  insertManyAndGet() {\n    errors.throwNotImplemented(\"insert/return many docs in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // insertOne()\n  //\n  // Inserts a single document into the collection.\n  //---------------------------------------------------------------------------\n  insertOne() {\n    errors.throwNotImplemented(\"inserting a single doc into a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // insertOneAndGet()\n  //\n  // Inserts a single document into the collection and returns a document\n  // containing metadata.\n  //---------------------------------------------------------------------------\n  insertOneAndGet() {\n    errors.throwNotImplemented(\"insert/return a single doc in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // save()\n  //\n  // Saves a single document into the collection.\n  //---------------------------------------------------------------------------\n  save() {\n    errors.throwNotImplemented(\"saving a single doc in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // saveAndGet()\n  //\n  // Saves a single document into the collection and returns a document\n  // containing metadata.\n  //---------------------------------------------------------------------------\n  saveAndGet() {\n    errors.throwNotImplemented(\"saving a single doc in a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // truncate()\n  //\n  // Removes all of the documents from a collection.\n  //---------------------------------------------------------------------------\n  truncate() {\n    errors.throwNotImplemented(\"removing all docs from a collection\");\n  }\n\n}\n\nmodule.exports = SodaCollectionImpl;\n", "// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\nclass SodaDatabaseImpl {\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this._connection;\n  }\n\n  //---------------------------------------------------------------------------\n  // createCollection()\n  //\n  // Creates and returns a SODA collection.\n  //---------------------------------------------------------------------------\n  createCollection() {\n    errors.throwNotImplemented(\"creating a SODA collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // createDocument()\n  //\n  // Creates and returns a SODA document.\n  //---------------------------------------------------------------------------\n  createDocument() {\n    errors.throwNotImplemented(\"creating a SODA document\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCollectionNames()\n  //\n  // Returns a list of the collection names available in the database.\n  //---------------------------------------------------------------------------\n  getCollectionNames() {\n    errors.throwNotImplemented(\"getting a list of SODA collection names\");\n  }\n\n  //---------------------------------------------------------------------------\n  // openCollection()\n  //\n  // Opens a SODA collection and returns it.\n  //---------------------------------------------------------------------------\n  openCollection() {\n    errors.throwNotImplemented(\"getting a list of SODA collection names\");\n  }\n\n}\n\nmodule.exports = SodaDatabaseImpl;\n", "// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\nclass SodaDocCursorImpl {\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this._operation._getConnImpl();\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Closes the cursor.\n  //---------------------------------------------------------------------------\n  close() {\n    errors.throwNotImplemented(\"closing a SODA document cursor\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getNext()\n  //\n  // Returns the next document from the cursor.\n  //---------------------------------------------------------------------------\n  getNext() {\n    errors.throwNotImplemented(\"getting a document from a SODA doc cursor\");\n  }\n\n}\n\nmodule.exports = SodaDocCursorImpl;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\nclass SodaDocumentImpl {\n\n  //---------------------------------------------------------------------------\n  // getContentAsBuffer()\n  //\n  // Returns the document content as a Buffer object.\n  //---------------------------------------------------------------------------\n  getContentAsBuffer() {\n    errors.throwNotImplemented(\"getting doc content as a buffer\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getContentAsString()\n  //\n  // Returns the document content as a string.\n  //---------------------------------------------------------------------------\n  getContentAsString() {\n    errors.throwNotImplemented(\"getting doc content as a string\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCreatedOn()\n  //\n  // Returns the date the document was created.\n  //---------------------------------------------------------------------------\n  getCreatedOn() {\n    errors.throwNotImplemented(\"getting the created date of a document\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getKey()\n  //\n  // Returns the key of the document.\n  //---------------------------------------------------------------------------\n  getKey() {\n    errors.throwNotImplemented(\"getting the key of a document\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getLastModified()\n  //\n  // Returns the date the document was last modified.\n  //---------------------------------------------------------------------------\n  getLastModified() {\n    errors.throwNotImplemented(\"getting the last modified date of a doc\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getMediaType()\n  //\n  // Returns the media type of the document.\n  //---------------------------------------------------------------------------\n  getMediaType() {\n    errors.throwNotImplemented(\"getting the media type of a document\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getVersion()\n  //\n  // Returns the version of the document.\n  //---------------------------------------------------------------------------\n  getVersion() {\n    errors.throwNotImplemented(\"getting the version of a document\");\n  }\n\n}\n\nmodule.exports = SodaDocumentImpl;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('../errors.js');\n\nclass SodaOperationImpl {\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this._collection._database._connection;\n  }\n\n  //---------------------------------------------------------------------------\n  // count()\n  //\n  // Returns the number of documents matching the criteria.\n  //---------------------------------------------------------------------------\n  count() {\n    errors.throwNotImplemented(\"getting a count of documents\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getCursor()\n  //\n  // Returns a cursor for documents matching the criteria.\n  //---------------------------------------------------------------------------\n  getCursor() {\n    errors.throwNotImplemented(\"getting a cursor for documents\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getDocuments()\n  //\n  // Returns an array of documents matching the criteria.\n  //---------------------------------------------------------------------------\n  getDocuments() {\n    errors.throwNotImplemented(\"getting a cursor for documents\");\n  }\n\n  //---------------------------------------------------------------------------\n  // getOne()\n  //\n  // Returns a single document matching the criteria.\n  //---------------------------------------------------------------------------\n  getOne() {\n    errors.throwNotImplemented(\"getting a single document\");\n  }\n\n  //---------------------------------------------------------------------------\n  // remove()\n  //\n  // Removes all of the documents matching the criteria.\n  //---------------------------------------------------------------------------\n  remove() {\n    errors.throwNotImplemented(\"removing documents from a collection\");\n  }\n\n  //---------------------------------------------------------------------------\n  // replaceOne()\n  //\n  // Replaces a single document matching the criteria.\n  //---------------------------------------------------------------------------\n  replaceOne() {\n    errors.throwNotImplemented(\"replacing a single document\");\n  }\n\n  //---------------------------------------------------------------------------\n  // replaceOneAndGet()\n  //\n  // Replaces a single document matching the criteria and returns a document\n  // containing metadata.\n  //---------------------------------------------------------------------------\n  replaceOneAndGet() {\n    errors.throwNotImplemented(\"replacing/returning a single document\");\n  }\n\n}\n\nmodule.exports = SodaOperationImpl;\n", "// Copyright (c) 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst AqDeqOptionsImpl = require('./aqDeqOptions.js');\nconst AqEnqOptionsImpl = require('./aqEnqOptions.js');\nconst AqMessageImpl = require('./aqMessage.js');\nconst AqQueueImpl = require('./aqQueue.js');\nconst DbObjectImpl = require('./dbObject.js');\nconst ConnectionImpl = require('./connection.js');\nconst LobImpl = require('./lob.js');\nconst PoolImpl = require('./pool.js');\nconst ResultSetImpl = require('./resultset.js');\nconst SodaCollectionImpl = require('./sodaCollection.js');\nconst SodaDatabaseImpl = require('./sodaDatabase.js');\nconst SodaDocCursorImpl = require('./sodaDocCursor.js');\nconst SodaDocumentImpl = require('./sodaDocument.js');\nconst SodaOperationImpl = require('./sodaOperation.js');\n\nmodule.exports = {\n  AqDeqOptionsImpl,\n  AqEnqOptionsImpl,\n  AqMessageImpl,\n  AqQueueImpl,\n  DbObjectImpl,\n  ConnectionImpl,\n  LobImpl,\n  PoolImpl,\n  ResultSetImpl,\n  SodaCollectionImpl,\n  SodaDatabaseImpl,\n  SodaDocCursorImpl,\n  SodaDocumentImpl,\n  SodaOperationImpl\n};\n", "// Copyright (c) 2019, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\n\nclass AqDeqOptions {\n\n  //---------------------------------------------------------------------------\n  // condition\n  //\n  // Property for the condition to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get condition() {\n    return this._impl.getCondition();\n  }\n\n  set condition(value) {\n    errors.assertPropValue(typeof value === 'string', \"condition\");\n    this._impl.setCondition(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // consumerName\n  //\n  // Property for the consumer name to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get consumerName() {\n    return this._impl.getConsumerName();\n  }\n\n  set consumerName(value) {\n    errors.assertPropValue(typeof value === 'string', \"consumerName\");\n    this._impl.setConsumerName(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // correlation\n  //\n  // Property for the correlation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get correlation() {\n    return this._impl.getCorrelation();\n  }\n\n  set correlation(value) {\n    errors.assertPropValue(typeof value === 'string', \"correlation\");\n    this._impl.setCorrelation(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // mode\n  //\n  // Property for the mode to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get mode() {\n    return this._impl.getMode();\n  }\n\n  set mode(value) {\n    errors.assertPropValue(value === constants.AQ_DEQ_MODE_BROWSE ||\n      value === constants.AQ_DEQ_MODE_LOCKED ||\n      value === constants.AQ_DEQ_MODE_REMOVE ||\n      value === constants.AQ_DEQ_MODE_REMOVE_NO_DATA, \"mode\");\n    this._impl.setMode(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // msgId\n  //\n  // Property for the message id to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get msgId() {\n    return this._impl.getMsgId();\n  }\n\n  set msgId(value) {\n    errors.assertPropValue(Buffer.isBuffer(value), \"msgId\");\n    this._impl.setMsgId(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // navigation\n  //\n  // Property for the navigation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get navigation() {\n    return this._impl.getNavigation();\n  }\n\n  set navigation(value) {\n    errors.assertPropValue(value === constants.AQ_DEQ_NAV_FIRST_MSG ||\n        value === constants.AQ_DEQ_NAV_NEXT_TRANSACTION ||\n        value === constants.AQ_DEQ_NAV_NEXT_MSG, \"navigation\");\n    this._impl.setNavigation(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // transformation\n  //\n  // Property for the transformation to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get transformation() {\n    return this._impl.getTransformation();\n  }\n\n  set transformation(value) {\n    errors.assertPropValue(typeof value === 'string', \"transformation\");\n    this._impl.setTransformation(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // visibility\n  //\n  // Property for the visibility to use for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get visibility() {\n    return this._impl.getVisibility();\n  }\n\n  set visibility(value) {\n    errors.assertPropValue(value === constants.AQ_VISIBILITY_IMMEDIATE ||\n      value === constants.AQ_VISIBILITY_ON_COMMIT, \"visibility\");\n    this._impl.setVisibility(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // wait\n  //\n  // Property for the time to wait for dequeuing messages.\n  //---------------------------------------------------------------------------\n  get wait() {\n    return this._impl.getWait();\n  }\n\n  set wait(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"wait\");\n    this._impl.setWait(value);\n  }\n\n}\n\nmodule.exports = AqDeqOptions;\n", "// Copyright (c) 2019, 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\n\nclass AqEnqOptions {\n\n  //---------------------------------------------------------------------------\n  // deliveryMode\n  //\n  // Property for the delivery mode to use for enqueuing messages.\n  //---------------------------------------------------------------------------\n  get deliveryMode() {\n    return this._impl.getDeliveryMode();\n  }\n\n  set deliveryMode(value) {\n    errors.assertPropValue(value === constants.AQ_MSG_DELIV_MODE_PERSISTENT ||\n      value === constants.AQ_MSG_DELIV_MODE_BUFFERED ||\n      value === constants.AQ_MSG_DELIV_MODE_PERSISTENT_OR_BUFFERED, \"deliveryMode\");\n    this._impl.setDeliveryMode(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // transformation\n  //\n  // Property for the transformation to use for enqueuing messages.\n  //---------------------------------------------------------------------------\n  get transformation() {\n    return this._impl.getTransformation();\n  }\n\n  set transformation(value) {\n    errors.assertPropValue(typeof value === 'string', \"transformation\");\n    this._impl.setTransformation(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // visibility\n  //\n  // Property for the visibility to use for enqueuing messages.\n  //---------------------------------------------------------------------------\n  get visibility() {\n    return this._impl.getVisibility();\n  }\n\n  set visibility(value) {\n    errors.assertPropValue(value === constants.AQ_VISIBILITY_IMMEDIATE ||\n      value === constants.AQ_VISIBILITY_ON_COMMIT, \"visibility\");\n    this._impl.setVisibility(value);\n  }\n\n}\n\nmodule.exports = AqEnqOptions;\n", "// Copyright (c) 2019, 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst DbObjectImpl = require('./impl/dbObject.js');\n\nclass AqMessage {\n\n  //---------------------------------------------------------------------------\n  // correlation\n  //\n  // Property for the correlation used for the message.\n  //---------------------------------------------------------------------------\n  get correlation() {\n    return this._impl.getCorrelation();\n  }\n\n  //---------------------------------------------------------------------------\n  // delay\n  //\n  // Property for the delay used for the message.\n  //---------------------------------------------------------------------------\n  get delay() {\n    return this._impl.getDelay();\n  }\n\n  //---------------------------------------------------------------------------\n  // deliveryMode\n  //\n  // Property for the delivery mode used for the message.\n  //---------------------------------------------------------------------------\n  get deliveryMode() {\n    return this._impl.getDeliveryMode();\n  }\n\n  //---------------------------------------------------------------------------\n  // exceptionQueue\n  //\n  // Property for the exception queue used for the message.\n  //---------------------------------------------------------------------------\n  get exceptionQueue() {\n    return this._impl.getExceptionQueue();\n  }\n\n  //---------------------------------------------------------------------------\n  // expiration\n  //\n  // Property for the expiration used for the message.\n  //---------------------------------------------------------------------------\n  get expiration() {\n    return this._impl.getExpiration();\n  }\n\n  //---------------------------------------------------------------------------\n  // msgId\n  //\n  // Property for the message id used for the message.\n  //---------------------------------------------------------------------------\n  get msgId() {\n    return this._impl.getMsgId();\n  }\n\n  //---------------------------------------------------------------------------\n  // numAttempts\n  //\n  // Property for the number of attempts used for the message.\n  //---------------------------------------------------------------------------\n  get numAttempts() {\n    return this._impl.getNumAttempts();\n  }\n\n  //---------------------------------------------------------------------------\n  // originalMsgId\n  //\n  // Property for the original message id used for the message.\n  //---------------------------------------------------------------------------\n  get originalMsgId() {\n    return this._impl.getOriginalMsgId();\n  }\n\n  //---------------------------------------------------------------------------\n  // payload\n  //\n  // Property for the payload used for the message.\n  //---------------------------------------------------------------------------\n  get payload() {\n    const payload = this._impl.getPayload();\n    if (payload instanceof DbObjectImpl) {\n      const obj = Object.create(this._payloadTypeClass.prototype);\n      obj._impl = payload;\n      return obj;\n    }\n    return payload;\n  }\n\n  //---------------------------------------------------------------------------\n  // priority\n  //\n  // Property for the priority used for the message.\n  //---------------------------------------------------------------------------\n  get priority() {\n    return this._impl.getPriority();\n  }\n\n  //---------------------------------------------------------------------------\n  // state\n  //\n  // Property for the state used for the message.\n  //---------------------------------------------------------------------------\n  get state() {\n    return this._impl.getState();\n  }\n\n}\n\nmodule.exports = AqMessage;\n", "// Copyright (c) 2015, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst process = require('process');\nconst { Readable } = require('stream');\n\nclass QueryStream extends Readable {\n\n  constructor(rs) {\n    super({ objectMode: true });\n    this._fetching = false;\n    this._numRows = 0;\n\n    // calling open via process.nextTick to allow event handlers to be\n    // registered prior to the events being emitted\n    if (rs) {\n      process.nextTick(() => {\n        this._open(rs);\n      });\n    }\n  }\n\n  // called by readable.destroy() and ensures that the result set is closed if\n  // it has not already been closed (never called directly)\n  async _destroy(err, cb) {\n    if (this._resultSet) {\n      const rs = this._resultSet;\n      this._resultSet = null;\n      if (this._fetching) {\n        await new Promise(resolve =>\n          this.once('_doneFetching', resolve));\n      }\n      try {\n        await rs._impl.close();\n      } catch (closeErr) {\n        cb(closeErr);\n        return;\n      }\n    }\n    cb(err);\n  }\n\n  // called when the query stream is to be associated with a result set; this\n  // takes place when the query stream if constructed (if a result set is known\n  // at that point) or by Connection.execute() when the result set is ready\n  _open(rs) {\n    this._resultSet = rs;\n\n    // trigger the event listener that may have been added in _read() now that\n    // the result set is ready\n    this.emit('open');\n\n    // emit a metadata event as a convenience to users\n    this.emit('metadata', rs.metaData);\n  }\n\n  // called by readable.read() and pushes rows to the internal queue maintained\n  // by the stream implementation (never called directly) appropriate\n  async _read() {\n\n    // still waiting on the result set to be added via _open() so add an event\n    // listener to retry when ready\n    if (!this._resultSet) {\n      this.once('open', this._read);\n      return;\n    }\n\n    // using the JS getRow() to leverage the JS row cache; the result set's\n    // _allowGetRowCall is set to true to allow the call for query streams\n    // created via ResultSet.toQueryStream()\n    try {\n      this._fetching = true;\n      this._resultSet._allowGetRowCall = true;\n      const row = await this._resultSet.getRow();\n      if (row) {\n        this.push(row);\n      } else {\n        this.push(null);\n      }\n    } catch (err) {\n      this.destroy(err);\n    } finally {\n      this._fetching = false;\n      if (this._resultSet) {\n        this._resultSet._allowGetRowCall = false;\n      } else {\n        this.emit('_doneFetching');\n      }\n    }\n  }\n\n}\n\nmodule.exports = QueryStream;\n", "// Copyright (c) 2016, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst QueryStream = require('./queryStream.js');\nconst BaseDbObject = require('./dbObject.js');\nconst nodbUtil = require('./util.js');\nconst constants = require('./constants.js');\nconst Lob = require('./lob.js');\nconst errors = require('./errors.js');\n\nclass ResultSet {\n\n  constructor() {\n    this._rowCache = [];\n    this._processingStarted = false;\n    this._convertedToStream = false;\n    this._allowGetRowCall = false;\n    this._isActive = false;\n  }\n\n  //---------------------------------------------------------------------------\n  // _getAllRows()\n  //\n  // Return all of the rows in the result set.\n  //---------------------------------------------------------------------------\n  async _getAllRows() {\n\n    try {\n\n      // retain initial values of the maximum number of rows to fetch and the\n      // number of rows to fetch from the database at a single time\n      let maxRows = this._impl.maxRows;\n      let fetchArraySize = this._impl.fetchArraySize;\n\n      // fetch all rows\n      let rowsFetched = [];\n      while (true) {    // eslint-disable-line\n        if (maxRows > 0 && fetchArraySize >= maxRows) {\n          fetchArraySize = maxRows;\n        }\n        const rows = await this._getRows(fetchArraySize);\n        if (rows) {\n          await this._processRows(rows, true);\n          rowsFetched = rowsFetched.concat(rows);\n        }\n        if (rows.length == maxRows || rows.length < fetchArraySize) {\n          break;\n        }\n        if (maxRows > 0) {\n          maxRows -= rows.length;\n        }\n      }\n\n      return rowsFetched;\n\n    } finally {\n      await this._impl.close();\n      delete this._impl;\n    }\n\n  }\n\n  //---------------------------------------------------------------------------\n  // _getRows()\n  //\n  // Return up to the specified number of rows from the result set. If nested\n  // cursors are possible, setup the execute options so that they can be\n  // examined within the implementation's setup routine.\n  //---------------------------------------------------------------------------\n  async _getRows(numRows) {\n    let options = {};\n    if (this._impl.nestedCursorIndices.length > 0) {\n      options = {\n        connection: this._connection,\n        outFormat: this._impl.outFormat,\n        fetchArraySize: this._impl.fetchArraySize,\n        dbObjectAsPojo: this._impl.dbObjectAsPojo,\n        maxRows: this._impl.maxRows,\n        fetchTypeMap: this._impl.fetchTypeMap\n      };\n    }\n    return await this._impl.getRows(numRows, options);\n  }\n\n  //---------------------------------------------------------------------------\n  // _processRows()\n  //\n  // Process rows returned by the implementation. This will transform result\n  // set and LOB implementations into user facing objects. It will also perform\n  // any fetched that are needed (if a result set is undesirable)\n  //---------------------------------------------------------------------------\n  async _processRows(rows, expandNestedCursors) {\n\n    // transform any nested cursors into user facing objects\n    for (const i of this._impl.nestedCursorIndices) {\n      for (let j = 0; j < rows.length; j++) {\n        const val = rows[j][i];\n        if (val) {\n          const resultSet = new ResultSet();\n          resultSet._setup(this._connection, val);\n          this._impl.metaData[i].metaData = val.metaData;\n          if (expandNestedCursors) {\n            rows[j][i] = await resultSet._getAllRows();\n          } else {\n            rows[j][i] = resultSet;\n          }\n        }\n      }\n    }\n\n    // transform any LOBs into user facing objects\n    for (const i of this._impl.lobIndices) {\n      for (let j = 0; j < rows.length; j++) {\n        const val = rows[j][i];\n        if (val) {\n          const lob = rows[j][i] = new Lob();\n          lob._setup(val, true);\n        }\n      }\n    }\n\n    // transform any database objects into user facing objects\n    for (const i of this._impl.dbObjectIndices) {\n      const dbObjectClass = this._impl.metaData[i].dbTypeClass;\n      for (let j = 0; j < rows.length; j++) {\n        const val = rows[j][i];\n        if (val) {\n          const obj = rows[j][i] = Object.create(dbObjectClass.prototype);\n          obj._impl = val;\n          if (this._impl.dbObjectAsPojo) {\n            rows[j][i] = obj._toPojo();\n          } else if (obj.isCollection) {\n            rows[j][i] = new Proxy(obj, BaseDbObject._collectionProxyHandler);\n          }\n        }\n      }\n    }\n\n    // run any conversion functions, if applicable\n    // NOTE: we mark the connection as no longer in progress before making\n    // calls to the converter function; this is needed to allow calls against\n    // the database (like getting LOB data) to succeed, as this code is running\n    // in the middle of a call to connection.execute() or resultSet.getRows()\n    for (const i of this._impl.converterIndices) {\n      const fn = this._impl.metaData[i].converter;\n      this._connection._impl._inProgress = false;\n      try {\n        for (let j = 0; j < rows.length; j++) {\n          let result = fn(rows[j][i]);\n          if (result instanceof Promise) {\n            result = await result;\n          }\n          rows[j][i] = result;\n        }\n      } finally {\n        this._connection._impl._inProgress = true;\n      }\n    }\n\n    // create objects, if desired\n    if (this._impl.outFormat === constants.OUT_FORMAT_OBJECT) {\n      for (let i = 0; i < rows.length; i++) {\n        const origRow = rows[i];\n        const newRow = rows[i] = {};\n        const metaData = this._impl.metaData;\n        for (let j = 0; j < metaData.length; j++) {\n          newRow[metaData[j].name] = origRow[j];\n        }\n      }\n    }\n\n  }\n\n  //---------------------------------------------------------------------------\n  // _setup()\n  //\n  // Setup a result set.\n  // ---------------------------------------------------------------------------\n  _setup(connection, resultSetImpl) {\n    this._connection = connection;\n    this._impl = resultSetImpl;\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the result set and make it unusable for further operations.\n  //---------------------------------------------------------------------------\n  async close() {\n    errors.assertArgCount(arguments, 0, 0);\n    errors.assert(this._impl && this._connection._impl, errors.ERR_INVALID_RS);\n\n    if (this._convertedToStream) {\n      errors.throwErr(errors.ERR_CANNOT_INVOKE_RS_METHODS);\n    }\n\n    this._processingStarted = true;\n    const resultSetImpl = this._impl;\n    delete this._impl;\n    await resultSetImpl.close();\n  }\n\n  //---------------------------------------------------------------------------\n  // getRow()\n  //\n  // Returns a single row to the caller from the result set, if one is\n  // available. Rows are buffered in a JavaScript array in order to avoid trips\n  // through the thread pool that would be required if implemented in C.\n  //---------------------------------------------------------------------------\n  async getRow() {\n    errors.assertArgCount(arguments, 0, 0);\n    errors.assert(this._impl && this._connection._impl, errors.ERR_INVALID_RS);\n\n    if (this._convertedToStream && !this._allowGetRowCall) {\n      errors.throwErr(errors.ERR_CANNOT_INVOKE_RS_METHODS);\n    }\n\n    this._allowGetRowCall = false;\n    this._processingStarted = true;\n\n    if (this._rowCache.length == 0) {\n      const rows = await this._getRows(this._impl.fetchArraySize);\n      await this._processRows(rows, false);\n      this._rowCache = rows;\n    }\n    return this._rowCache.shift();\n  }\n\n  //---------------------------------------------------------------------------\n  // getRows()\n  //\n  // Check to see if any rows are in the JS buffer (which could result from\n  // interspersed calls to getRow() and getRows()). If no rows are in the\n  // buffer, the call is just proxied to the implementation layer. Otherwise,\n  // rows are pulled from the buffer and potentially concatenated with rows\n  // from calls to the implementation's getRows().\n  //---------------------------------------------------------------------------\n  async getRows(numRows) {\n    let rowsNeeded;\n\n    errors.assertArgCount(arguments, 0, 1);\n    errors.assert(this._impl && this._connection._impl, errors.ERR_INVALID_RS);\n\n    if (arguments.length == 0) {\n      numRows = 0;\n    } else {\n      errors.assertParamValue(Number.isInteger(numRows) && numRows >= 0, 1);\n    }\n\n    if (this._convertedToStream) {\n      errors.throwErr(errors.ERR_CANNOT_INVOKE_RS_METHODS);\n    }\n\n    this._processingStarted = true;\n\n    let requestedRows;\n    if (numRows == 0) {\n      requestedRows = this._rowCache;\n      const fetchArraySize = this._impl.fetchArraySize;\n      while (true) {  // eslint-disable-line\n        const rows = await this._getRows(fetchArraySize);\n        if (rows) {\n          await this._processRows(rows, false);\n          requestedRows = requestedRows.concat(rows);\n        }\n        if (rows.length < fetchArraySize)\n          break;\n      }\n      return requestedRows;\n    }\n\n    if (this._rowCache.length === 0) {\n      requestedRows = await this._getRows(numRows);\n      await this._processRows(requestedRows, false);\n    } else {\n      rowsNeeded = numRows - this._rowCache.length;\n      if (rowsNeeded <= 0) {\n        requestedRows = this._rowCache.splice(0, numRows);\n      } else {\n        const rows = await this._getRows(rowsNeeded);\n        await this._processRows(rows, false);\n        requestedRows = this._rowCache.concat(rows);\n        this._rowCache = [];\n      }\n    }\n\n    return requestedRows;\n  }\n\n  //---------------------------------------------------------------------------\n  // metaData()\n  //\n  // Property returning the metadata associated with the result set.\n  //---------------------------------------------------------------------------\n  get metaData() {\n    if (this._impl) {\n      return this._impl.metaData;\n    }\n    return undefined;\n  }\n\n  //---------------------------------------------------------------------------\n  // toQueryStream()\n  //\n  // Converts a result set to a QueryStream object.\n  //---------------------------------------------------------------------------\n  toQueryStream() {\n    errors.assertArgCount(arguments, 0, 0);\n\n    if (this._processingStarted) {\n      errors.throwErr(errors.ERR_CANNOT_CONVERT_RS_TO_STREAM);\n    }\n\n    if (this._convertedToStream) {\n      errors.throwErr(errors.ERR_RS_ALREADY_CONVERTED);\n    }\n\n    this._convertedToStream = true;\n\n    return new QueryStream(this);\n  }\n\n  [Symbol.asyncIterator]() {\n    const resultSet = this;\n    return {\n      async next() {\n        const row = await resultSet.getRow();\n        return {value: row, done: row === undefined};\n      },\n      return() {\n        return {done: true};\n      }\n    };\n  }\n\n}\n\nnodbUtil.wrapFns(ResultSet.prototype, errors.ERR_BUSY_RS,\n  \"close\",\n  \"getRow\",\n  \"getRows\");\n\nmodule.exports = ResultSet;\n", "// Copyright (c) 2023, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst BaseDbObject = require('./dbObject.js');\nconst { Buffer } = require('buffer');\nconst Lob = require('./lob.js');\nconst ResultSet = require('./resultset.js');\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst util = require('util');\nconst types = require('./types.js');\nconst nodbUtil = require('./util.js');\n\n//-----------------------------------------------------------------------------\n// checkType()\n//\n// Checks that the type of the data matches one of the given types. If the type\n// has not been specified yet, the first type is assumed to be the correct one.\n//\n// A failure to match results in an exception being thrown. The data in the\n// info parameter is used to determine which error should be thrown.\n//-----------------------------------------------------------------------------\nfunction checkType(info, options) {\n  if (info.type === undefined && arguments.length > 2) {\n    info.type = arguments[2];\n  } else {\n    let matches = false;\n    for (let i = 2; i < arguments.length; i++) {\n      if (info.type === arguments[i]) {\n        matches = true;\n        break;\n      }\n    }\n    if (!matches) {\n      if (info.attrName) {\n        errors.throwErr(errors.ERR_WRONG_VALUE_FOR_DBOBJECT_ATTR,\n          info.attrName, info.fqn);\n      } else if (info.fqn) {\n        errors.throwErr(errors.ERR_WRONG_VALUE_FOR_DBOBJECT_ELEM, info.fqn);\n      } else if (info.isArray && info.name) {\n        errors.throwErr(errors.ERR_INCOMPATIBLE_TYPE_ARRAY_BIND, options.pos,\n          info.name);\n      } else if (info.isArray) {\n        errors.throwErr(errors.ERR_INCOMPATIBLE_TYPE_ARRAY_INDEX_BIND,\n          options.pos, info.pos);\n      } else {\n        errors.throwErr(errors.ERR_BIND_VALUE_AND_TYPE_MISMATCH);\n      }\n    }\n  }\n}\n\n//-----------------------------------------------------------------------------\n// transformJsonValue()\n//\n// Returns a normalized JSON value. Scalar values are returned unchanged.\n// Arrays are returned as a new array with transformed JSON values. Objects are\n// returned as new objects with keys \"fields\" and \"values\", both of which\n// are arrays (with the value transformed to JSON values).\n//-----------------------------------------------------------------------------\nfunction transformJsonValue(value) {\n\n  // handle simple scalars\n  if (value === undefined || value === null ||\n    typeof value === 'number' || typeof value === 'string' ||\n    typeof value === 'boolean' || Buffer.isBuffer(value) ||\n    util.types.isDate(value) || nodbUtil.isVectorValue(value))\n    return value;\n\n  // arrays are transformed to a new array with processed values\n  if (Array.isArray(value)) {\n    const outValue = new Array(value.length);\n    for (let i = 0; i < value.length; i++) {\n      outValue[i] = transformJsonValue(value[i]);\n    }\n    return outValue;\n  }\n\n  // database objects are treated as empty objects\n  if (value instanceof BaseDbObject)\n    return {fields: [], values: []};\n\n  // JsonId is a special type to represent autogenerated id\n  // for SODA documents.\n  if (value instanceof types.JsonId) {\n    return value;\n  }\n\n  // all other objects are transformed to an object with two arrays (fields\n  // and values)\n  const outValue = {};\n  outValue.fields = Object.getOwnPropertyNames(value);\n  outValue.values = new Array(outValue.fields.length);\n  for (let i = 0; i < outValue.fields.length; i++) {\n    outValue.values[i] = transformJsonValue(value[outValue.fields[i]]);\n  }\n  return outValue;\n\n}\n\n//-----------------------------------------------------------------------------\n// transformValueIn()\n//\n// Processes the value supplied by the caller and returns a normalized value,\n// if necessary, for use by the implementation. All checks are performed on the\n// value to ensure it is suitable for the type information supplied. If no type\n// information is supplied, however, the value defines it instead!\n//-----------------------------------------------------------------------------\nfunction transformValueIn(info, value, options) {\n\n  // null and undefined can always be set so nothing needs to be done\n  if (value === undefined || value === null)\n    return undefined;\n\n  // handle setting plain JS values to database objects\n  if (info.type === types.DB_TYPE_OBJECT) {\n    let obj = value;\n    if (!(value instanceof BaseDbObject)) {\n      obj = new info.typeClass(value);\n    }\n    return obj._impl;\n\n  // handle setting plain JS values to JSON\n  } else if (info.type === types.DB_TYPE_JSON) {\n    return transformJsonValue(value);\n\n  // handle strings\n  } else if (typeof value === 'string') {\n    checkType(info, options,\n      types.DB_TYPE_VARCHAR,\n      types.DB_TYPE_NVARCHAR,\n      types.DB_TYPE_CHAR,\n      types.DB_TYPE_NCHAR,\n      types.DB_TYPE_CLOB,\n      types.DB_TYPE_NCLOB);\n    if (info.type !== types.DB_TYPE_CLOB &&\n        info.type !== types.DB_TYPE_NCLOB) {\n      const valueLen = Buffer.byteLength(value);\n      if (info.maxSize === undefined || valueLen > info.maxSize) {\n        if (info.checkSize) {\n          errors.throwErr(errors.ERR_MAX_SIZE_TOO_SMALL, info.maxSize,\n            valueLen, options.pos);\n        }\n        info.maxSize = valueLen;\n      }\n    }\n    return value;\n\n  // handle numbers\n  } else if (typeof value === 'number' || typeof value === 'bigint') {\n    checkType(info, options,\n      types.DB_TYPE_NUMBER,\n      types.DB_TYPE_BINARY_INTEGER,\n      types.DB_TYPE_BINARY_FLOAT,\n      types.DB_TYPE_BINARY_DOUBLE);\n    if (Number.isNaN(value) && info.type === types.DB_TYPE_NUMBER) {\n      errors.throwErr(errors.ERR_NAN_VALUE);\n    }\n    return value;\n\n  // handle booleans\n  } else if (typeof value === 'boolean') {\n    checkType(info, options, types.DB_TYPE_BOOLEAN);\n    return value;\n\n  // handle dates\n  } else if (util.types.isDate(value)) {\n    checkType(info, options,\n      types.DB_TYPE_TIMESTAMP,\n      types.DB_TYPE_TIMESTAMP_TZ,\n      types.DB_TYPE_TIMESTAMP_LTZ,\n      types.DB_TYPE_DATE);\n    return value;\n\n  // handle binding buffers\n  } else if (Buffer.isBuffer(value)) {\n    checkType(info, options,\n      types.DB_TYPE_RAW,\n      types.DB_TYPE_BLOB);\n    if (info.type === types.DB_TYPE_RAW &&\n        (info.maxSize === undefined || value.length > info.maxSize)) {\n      if (info.checkSize) {\n        errors.throwErr(errors.ERR_MAX_SIZE_TOO_SMALL, info.maxSize,\n          value.length, options.pos);\n      }\n      info.maxSize = value.length;\n    }\n    return value;\n\n  // handle result sets\n  } else if (value instanceof ResultSet) {\n    checkType(info, options, types.DB_TYPE_CURSOR);\n    return value._impl;\n\n  // handle binding LOBs\n  } else if (value instanceof Lob) {\n    checkType(info, options, value.type);\n    return value._impl;\n\n  // handle database objects\n  } else if (value instanceof BaseDbObject) {\n    checkType(info, options, types.DB_TYPE_OBJECT);\n    return value._impl;\n\n  // handle vectors\n  } else if (value instanceof Float32Array || value instanceof Float64Array ||\n    value instanceof Int8Array) {\n    checkType(info, options, types.DB_TYPE_VECTOR);\n    return value;\n  } else if (info.type === types.DB_TYPE_VECTOR && Array.isArray(value)) {\n    return new Float64Array(value);\n\n  // handle arrays\n  } else if (options.allowArray && Array.isArray(value)) {\n    info.isArray = true;\n    if (info.dir === constants.BIND_IN) {\n      info.maxArraySize = value.length || 1;\n    } else if (info.maxArraySize === undefined) {\n      errors.throwErr(errors.ERR_REQUIRED_MAX_ARRAY_SIZE);\n    } else if (value.length > info.maxArraySize) {\n      errors.throwErr(errors.ERR_INVALID_ARRAY_SIZE);\n    }\n    options.allowArray = false;\n    const transformed = new Array(value.length);\n    for (let i = 0; i < value.length; i++) {\n      options.pos = i;\n      transformed[i] = transformValueIn(info, value[i], options);\n    }\n    return transformed;\n  }\n\n  // no suitable bind value found\n  if (info.type === undefined)\n    errors.throwErr(errors.ERR_INVALID_BIND_DATA_TYPE, 2);\n  checkType(info, options);\n\n}\n\n// define exports\nmodule.exports = {\n  transformJsonValue,\n  transformValueIn\n\n};\n", "// Copyright (c) 2019, 2024, Oracle and/or its affiliates.\n\n//----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Lob = require('./lob.js');\nconst impl = require('./impl');\nconst errors = require('./errors.js');\nconst types = require('./types.js');\nconst util = require('util');\n\n//---------------------------------------------------------------------------\n// validatePropertyValue\n//\n// Validate the value based on metadata.\n// For object type, metaData corresponds to the attribute which is set.\n// For collection type, metaData corresponds to element in the collection.\n//---------------------------------------------------------------------------\nfunction validatePropertyValue(objType, metaData, value, index) {\n  let valueLen, lengthErr = false;\n\n  if (value) {\n    switch (metaData.type) {\n      case types.DB_TYPE_VARCHAR:\n      case types.DB_TYPE_NVARCHAR:\n      case types.DB_TYPE_NCHAR:\n      case types.DB_TYPE_CHAR:\n        valueLen = Buffer.byteLength(value);\n        if (valueLen > metaData.maxSize) {\n          lengthErr = true;\n        }\n        break;\n      case types.DB_TYPE_RAW:\n        valueLen = value.length;\n        if (valueLen > metaData.maxSize) {\n          lengthErr = true;\n        }\n        break;\n      default:\n        break;\n    }\n    if (lengthErr) {\n      if (index !== undefined) {\n        errors.throwErr(errors.ERR_WRONG_LENGTH_FOR_DBOBJECT_ELEM,\n          index, objType.fqn, valueLen, metaData.maxSize);\n      } else {\n        errors.throwErr(errors.ERR_WRONG_LENGTH_FOR_DBOBJECT_ATTR,\n          metaData.name, objType.fqn, valueLen, metaData.maxSize);\n      }\n    }\n  }\n}\n\n// define base database object class; instances of this class are never\n// instantiated; instead, classes subclassed from this one will be\n// instantiated; a cache of these classes are maintained on each connection\nclass BaseDbObject {\n\n  //---------------------------------------------------------------------------\n  // _getAttrValue()\n  //\n  // Returns the value of the given attribute on the object.\n  //---------------------------------------------------------------------------\n  _getAttrValue(attr) {\n    const value = this._impl.getAttrValue(attr);\n    return this._transformValueOut(value, attr.typeClass);\n  }\n\n  //---------------------------------------------------------------------------\n  // _setAttrValue()\n  //\n  // Sets the value of the attribute on the object to the given value.\n  //---------------------------------------------------------------------------\n  _setAttrValue(attr, value) {\n    const info = {\n      fqn: this._objType.fqn,\n      attrName: attr.name,\n      type: attr.type,\n      typeClass: attr.typeClass\n    };\n    const options = {allowArray: false};\n    value = transformer.transformValueIn(info, value, options);\n    validatePropertyValue(this._objType, attr, value);\n    this._impl.setAttrValue(attr, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // _toPojo()\n  //\n  // Returns the database object as a plain Javascript object.\n  //---------------------------------------------------------------------------\n  _toPojo() {\n    if (this.isCollection) {\n      const result = this.getValues();\n      if (this.elementType === types.DB_TYPE_OBJECT) {\n        for (let i = 0; i < result.length; i++) {\n          result[i] = result[i]._toPojo();\n        }\n      }\n      return (result);\n    }\n    const result = {};\n    for (const name in this.attributes) {\n      let value = this[name];\n      if (value instanceof BaseDbObject) {\n        value = value._toPojo();\n      }\n      result[name] = value;\n    }\n    return (result);\n  }\n\n  //---------------------------------------------------------------------------\n  // _transformValueOut()\n  //\n  // Transforms a value going out to the caller from the implementation.\n  //---------------------------------------------------------------------------\n  _transformValueOut(value, cls) {\n    let outValue = value;\n    if (value instanceof impl.LobImpl) {\n      outValue = new Lob();\n      outValue._setup(value, true);\n    } else if (value instanceof impl.DbObjectImpl) {\n      outValue = Object.create(cls.prototype);\n      outValue._impl = value;\n      if (outValue.isCollection) {\n        outValue = new Proxy(outValue, BaseDbObject._collectionProxyHandler);\n      }\n    }\n    return outValue;\n  }\n\n  //---------------------------------------------------------------------------\n  // append()\n  //\n  // Appends an element to the collection.\n  //---------------------------------------------------------------------------\n  append(value) {\n    errors.assertArgCount(arguments, 1, 1);\n    const info = {\n      fqn: this._objType.fqn,\n      type: this._objType.elementType,\n      typeClass: this._objType.elementTypeClass\n    };\n    const options = {allowArray: false};\n    value = transformer.transformValueIn(info, value, options);\n    let index = this._impl.getLastIndex();\n    if (index) {\n      index = index + 1; // element will be appended at index + 1.\n    } else {\n      index = 0; // undefined for initial append, so set it to 0\n    }\n    validatePropertyValue(this._objType, this._objType.elementTypeInfo, value, index);\n    this._impl.append(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // attributes\n  //\n  // Property for the attributes stored on the object type.\n  //---------------------------------------------------------------------------\n  get attributes() {\n    if (!this._attributes) {\n      const implAttrs = this._objType.attributes || [];\n      const attrs = {};\n      for (let i = 0; i < implAttrs.length; i++) {\n        const implAttr = implAttrs[i];\n        const attr = {\n          type: implAttr.type,\n          typeName: implAttr.typeName\n        };\n        if (implAttr.typeClass) {\n          attr.typeClass = implAttr.typeClass;\n        }\n        attrs[implAttr.name] = attr;\n      }\n      this._attributes = attrs;\n    }\n    return this._attributes;\n  }\n\n  //---------------------------------------------------------------------------\n  // deleteElement()\n  //\n  // Deletes the element in a collection at the specified index.\n  //---------------------------------------------------------------------------\n  deleteElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.deleteElement(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // elementType\n  //\n  // Property for the element type, if the database object type is a\n  // collection. It will be one of the DB_TYPE_ constants.\n  //---------------------------------------------------------------------------\n  get elementType() {\n    return this._objType.elementType;\n  }\n\n  //---------------------------------------------------------------------------\n  // elementTypeClass\n  //\n  // Property for the element type class, if the database object type is a\n  // collection and the elements in the collection refer to database objects.\n  //---------------------------------------------------------------------------\n  get elementTypeClass() {\n    return this._objType.elementTypeClass;\n  }\n\n  //---------------------------------------------------------------------------\n  // elementTypeName\n  //\n  // Property for the element type name, if the database object type is a\n  // collection.\n  //---------------------------------------------------------------------------\n  get elementTypeName() {\n    return this._objType.elementTypeName;\n  }\n\n  //---------------------------------------------------------------------------\n  // fqn\n  //\n  // Property for the fully qualified name of the database object type in the\n  // form: <schema>.<name>.\n  //---------------------------------------------------------------------------\n  get fqn() {\n    return this._objType.fqn;\n  }\n\n  //---------------------------------------------------------------------------\n  // getElement()\n  //\n  // Returns the element in a collection at the specified index.\n  //---------------------------------------------------------------------------\n  getElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    const value = this._impl.getElement(index);\n    return this._transformValueOut(value, this.elementTypeClass);\n  }\n\n  //---------------------------------------------------------------------------\n  // getKeys()\n  //\n  // Returns an array of the keys of the collection.\n  //---------------------------------------------------------------------------\n  getKeys() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getKeys();\n  }\n\n  //---------------------------------------------------------------------------\n  // getFirstIndex()\n  //\n  // Returns the first index in the collection.\n  //---------------------------------------------------------------------------\n  getFirstIndex() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getFirstIndex();\n  }\n\n  //---------------------------------------------------------------------------\n  // getLastIndex()\n  //\n  // Returns the last index in the collection.\n  //---------------------------------------------------------------------------\n  getLastIndex() {\n    errors.assertArgCount(arguments, 0, 0);\n    return this._impl.getLastIndex();\n  }\n\n  //---------------------------------------------------------------------------\n  // getNextIndex()\n  //\n  // Returns the next index in the collection.\n  //---------------------------------------------------------------------------\n  getNextIndex(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.getNextIndex(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // getPrevIndex()\n  //\n  // Returns the previous index in the collection.\n  //---------------------------------------------------------------------------\n  getPrevIndex(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.getPrevIndex(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // getValues()\n  //\n  // Returns the elements in a collection.\n  //---------------------------------------------------------------------------\n  getValues() {\n    errors.assertArgCount(arguments, 0, 0);\n    const values = this._impl.getValues();\n    for (let i = 0; i < values.length; i++) {\n      values[i] = this._transformValueOut(values[i], this.elementTypeClass);\n    }\n    return values;\n  }\n\n  //---------------------------------------------------------------------------\n  // hasElement()\n  //\n  // Returns a boolean indicating if an element exists at the specified index.\n  //---------------------------------------------------------------------------\n  hasElement(index) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    return this._impl.hasElement(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // isCollection\n  //\n  // Property indicating if the object is a collection or not.\n  //---------------------------------------------------------------------------\n  get isCollection() {\n    return this._objType.isCollection;\n  }\n\n  //---------------------------------------------------------------------------\n  // name\n  //\n  // Property for the name of the database object type.\n  //---------------------------------------------------------------------------\n  get name() {\n    return this._objType.name;\n  }\n\n  //---------------------------------------------------------------------------\n  // schema\n  //\n  // Property for the schema of the database object type.\n  //---------------------------------------------------------------------------\n  get schema() {\n    return this._objType.schema;\n  }\n\n  //---------------------------------------------------------------------------\n  // packageName\n  //\n  // Property for the packageName of the database object type.\n  //---------------------------------------------------------------------------\n  get packageName() {\n    return this._objType.packageName;\n  }\n\n  //---------------------------------------------------------------------------\n  // setElement()\n  //\n  // Sets the element in the collection at the specified index to the given\n  // value.\n  //---------------------------------------------------------------------------\n  setElement(index, value) {\n    errors.assertArgCount(arguments, 2, 2);\n    errors.assertParamValue(Number.isInteger(index), 1);\n    const info = {\n      fqn: this._objType.fqn,\n      type: this._objType.elementType,\n      typeClass: this._objType.elementTypeClass\n    };\n    const options = {allowArray: false};\n    value = transformer.transformValueIn(info, value, options);\n    validatePropertyValue(this._objType, this._objType.elementTypeInfo, value, index);\n    this._impl.setElement(index, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // trim()\n  //\n  // Trims the specified number of elements from the end of the collection.\n  //---------------------------------------------------------------------------\n  trim(numToTrim) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(numToTrim) && numToTrim >= 0, 1);\n    this._impl.trim(numToTrim);\n  }\n\n  // custom inspection routine\n  [util.inspect.custom](depth, options) {\n    return ('[' + this.fqn + '] ' + util.inspect(this._toPojo(), options));\n  }\n\n  [Symbol.iterator]() {\n    if (this.isCollection) {\n      const values = this.getValues();\n      return (values[Symbol.iterator]());\n    }\n    throw TypeError(\"obj is not iterable\");\n  }\n\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return (NaN);\n      default:\n        return ('[' + this.fqn + '] ' + util.inspect(this._toPojo(), {}));\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return (this.fqn);\n  }\n\n  toJSON() {\n    return (this._toPojo());\n  }\n\n  //---------------------------------------------------------------------------\n  // toMap()\n  //\n  // Returns the Map object where the collection’s indexes are the keys and\n  // the elements are its values.\n  //---------------------------------------------------------------------------\n  toMap() {\n    errors.assertArgCount(arguments, 0, 0);\n    if (!this.isCollection) {\n      errors.throwErr(errors.ERR_OBJECT_IS_NOT_A_COLLECTION,\n        this.name);\n    }\n    const result = new Map();\n    this.getKeys().forEach(element => {\n      result.set(element, this.getElement(element));\n    });\n    return result;\n  }\n\n}\n\n// method for transforming the error\nfunction transformErr(func) {\n  return function() {\n    try {\n      return func.apply(this, arguments);\n    } catch (err) {\n      throw errors.transformErr(err, errors.transformErr);\n    }\n  };\n}\n\n// method for wrapping the functions so that any errors thrown are transformed\nfunction wrapFns(proto) {\n  for (let i = 1; i < arguments.length; i++) {\n    const name = arguments[i];\n    proto[name] = transformErr(proto[name]);\n  }\n}\n\nwrapFns(BaseDbObject.prototype,\n  \"_getAttrValue\",\n  \"_setAttrValue\",\n  \"append\",\n  \"deleteElement\",\n  \"getElement\",\n  \"getKeys\",\n  \"getFirstIndex\",\n  \"getLastIndex\",\n  \"getNextIndex\",\n  \"getPrevIndex\",\n  \"getValues\",\n  \"toMap\",\n  \"hasElement\",\n  \"setElement\",\n  \"trim\"\n);\n\n// define proxy handler used for collections\nBaseDbObject._collectionProxyHandler = {\n\n  deleteProperty(target, prop) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        return (target.deleteElement(index));\n      }\n    }\n    return (delete target[prop]);\n  },\n\n  get(target, prop) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        return (target.getElement(index));\n      }\n    }\n    const value = target[prop];\n    if (typeof value === 'function') {\n      return (value.bind(target));\n    }\n    return (value);\n  },\n\n  set(target, prop, value) {\n    if (typeof prop === 'string') {\n      const index = +prop;\n      if (!isNaN(index)) {\n        target.setElement(index, value);\n        return (true);\n      }\n    }\n    target[prop] = value;\n    return (true);\n  }\n\n};\n\nmodule.exports = BaseDbObject;\n\n// load this after the module exports are set so that it is available\nconst transformer = require('./transformer.js');\n", "// Copyright (c) 2019, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst AqDeqOptions = require('./aqDeqOptions.js');\nconst AqEnqOptions = require('./aqEnqOptions.js');\nconst AqMessage = require('./aqMessage.js');\nconst BaseDbObject = require('./dbObject.js');\nconst transformer = require('./transformer.js');\nconst types = require('./types.js');\n\nclass AqQueue {\n\n  //---------------------------------------------------------------------------\n  // _isPayload()\n  //\n  // Returns a boolean indicating if the value is a valid payload.\n  //---------------------------------------------------------------------------\n  _isPayload(value) {\n    return (typeof value === 'string' || Buffer.isBuffer(value) ||\n        value instanceof BaseDbObject);\n  }\n\n  //---------------------------------------------------------------------------\n  // _makeMessage()\n  //\n  // For enqOne()/deqOne()/enqMany()/deqMany(), wrap the return value with JS\n  // layer object.\n  //---------------------------------------------------------------------------\n  _makeMessage(msgImpl) {\n    const msg = new AqMessage();\n    msg._impl = msgImpl;\n    msg._payloadTypeClass = this._payloadTypeClass;\n    return msg;\n  }\n\n  //---------------------------------------------------------------------------\n  // _verifyMessage()\n  //\n  // Messages that can be enqueued must be a string, Buffer or database object\n  // (in which case all message properties are defaulted) or an object\n  // containing a \"payload\" property along with the other properties to use\n  // during the enqueue. A normalized object is returned.\n  //---------------------------------------------------------------------------\n  _verifyMessage(message) {\n\n    // validate we have a payload of the correct type\n    let payload;\n    if (this._isPayload(message)) {\n      payload = message;\n      message = {};\n    } else {\n      message = {...message};\n      if (this._isJson || this._isPayload(message.payload)) {\n        payload = message.payload;\n      } else if (this._payloadTypeClass) {\n        payload = new this._payloadTypeClass(message.payload);\n      } else {\n        errors.throwErr(errors.ERR_INVALID_AQ_MESSAGE);\n      }\n    }\n\n    // validate payload\n    if (this._isJson) {\n      message.payload = transformer.transformJsonValue(payload);\n    } else if (typeof payload === 'string') {\n      message.payload = Buffer.from(payload);\n    } else if (Buffer.isBuffer(payload)) {\n      message.payload = payload;\n    } else {\n      message.payload = payload._impl;\n    }\n\n    // validate options, if applicable\n    if (message.correlation !== undefined) {\n      errors.assertParamPropValue(typeof message.correlation === 'string', 1,\n        \"correlation\");\n    }\n    if (message.delay !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(message.delay), 1, \"delay\");\n    }\n    if (message.exceptionQueue !== undefined) {\n      errors.assertParamPropValue(typeof message.exceptionQueue === 'string',\n        1, \"exceptionQueue\");\n    }\n    if (message.expiration !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(message.expiration), 1,\n        \"expiration\");\n    }\n    if (message.priority !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(message.priority), 1,\n        \"priority\");\n    }\n    if (message.recipients !== undefined) {\n      errors.assertParamPropValue(nodbUtil.isArrayOfStrings(message.recipients),\n        1, \"recipients\");\n    }\n\n    return message;\n  }\n\n  //---------------------------------------------------------------------------\n  // create()\n  //\n  // Creates the queue and populates some internal attributes.\n  //---------------------------------------------------------------------------\n  async create(conn, name, options) {\n    if (options.payloadType === types.DB_TYPE_JSON) {\n      this._isJson = true;\n      this._payloadType = types.DB_TYPE_JSON;\n      this._payloadTypeName = \"JSON\";\n    } else if (options.payloadType === undefined ||\n               options.payloadType === types.DB_TYPE_RAW) {\n      this._payloadType = types.DB_TYPE_RAW;\n      this._payloadTypeName = \"RAW\";\n    } else {\n      if (typeof options.payloadType === 'string') {\n        // DB Object type\n        const cls = await conn._getDbObjectClassForName(options.payloadType);\n        this._payloadTypeClass = cls;\n        options.payloadType = cls;\n      } else {\n        errors.assertParamPropValue(nodbUtil.isObject(options.payloadType) &&\n          options.payloadType.prototype instanceof BaseDbObject, 2, \"payloadType\");\n        this._payloadTypeClass = options.payloadType;\n      }\n      this._payloadType = types.DB_TYPE_OBJECT;\n      this._payloadTypeName = this._payloadTypeClass.prototype.name;\n    }\n    this._name = name;\n    this._impl = await conn._impl.getQueue(name, this._payloadTypeClass,\n      this._payloadType);\n  }\n\n  //---------------------------------------------------------------------------\n  // deqMany()\n  //\n  // Returns an array of messages from the queue, up to the maximum specified,\n  // if any are available.\n  //---------------------------------------------------------------------------\n  async deqMany(maxMessages) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(maxMessages) && maxMessages > 0,\n      1);\n    const msgImpls = await this._impl.deq(maxMessages);\n    return  msgImpls.map(i => this._makeMessage(i));\n  }\n\n  //---------------------------------------------------------------------------\n  // deqOne()\n  //\n  // Returns a single message from the queue, if one is available.\n  //---------------------------------------------------------------------------\n  async deqOne() {\n    errors.assertArgCount(arguments, 0, 0);\n    const msgImpls = await this._impl.deq(1);\n    if (msgImpls.length > 0)\n      return this._makeMessage(msgImpls[0]);\n  }\n\n  //---------------------------------------------------------------------------\n  // deqOptions\n  //\n  // Property for the dequeue options associated with the queue.\n  //---------------------------------------------------------------------------\n  get deqOptions() {\n    if (!this._deqOptions) {\n      const deqOptions = new AqDeqOptions();\n      deqOptions._impl = this._impl.deqOptions;\n      this._deqOptions = deqOptions;\n    }\n    return this._deqOptions;\n  }\n\n  //---------------------------------------------------------------------------\n  // enqMany()\n  //\n  // Enqueues multiple messages into the queue at the same time, avoiding\n  // multiple round-trips.\n  //---------------------------------------------------------------------------\n  async enqMany(messages) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Array.isArray(messages) && messages.length > 0, 1);\n    const verifiedMessages = new Array(messages.length);\n    for (let i = 0; i < messages.length; i++) {\n      verifiedMessages[i] = this._verifyMessage(messages[i]);\n    }\n    const msgImpls = await this._impl.enq(verifiedMessages);\n    return msgImpls.map(i => this._makeMessage(i));\n  }\n\n  //---------------------------------------------------------------------------\n  // enqOne()\n  //\n  // Enqueues a single message into the queue.\n  //---------------------------------------------------------------------------\n  async enqOne(message) {\n    errors.assertArgCount(arguments, 1, 1);\n    message = this._verifyMessage(message);\n    const msgImpls = await this._impl.enq([message]);\n    return this._makeMessage(msgImpls[0]);\n  }\n\n  //---------------------------------------------------------------------------\n  // enqOptions\n  //\n  // Property for the enqueue options associated with the queue.\n  //---------------------------------------------------------------------------\n  get enqOptions() {\n    if (!this._enqOptions) {\n      const enqOptions = new AqEnqOptions();\n      enqOptions._impl = this._impl.enqOptions;\n      this._enqOptions = enqOptions;\n    }\n    return this._enqOptions;\n  }\n\n  //---------------------------------------------------------------------------\n  // name\n  //\n  // Property for the name of the queue.\n  //---------------------------------------------------------------------------\n  get name() {\n    return this._name;\n  }\n\n  //---------------------------------------------------------------------------\n  // payloadType\n  //\n  // Property for the payload type.\n  //---------------------------------------------------------------------------\n  get payloadType() {\n    return this._payloadType;\n  }\n\n  //---------------------------------------------------------------------------\n  // payloadTypeName\n  //\n  // Property for the payload type name.\n  //---------------------------------------------------------------------------\n  get payloadTypeName() {\n    return this._payloadTypeName;\n  }\n\n  //---------------------------------------------------------------------------\n  // payloadTypeClass\n  //\n  // Property for the payload type class.\n  //---------------------------------------------------------------------------\n  get payloadTypeClass() {\n    return this._payloadTypeClass;\n  }\n\n}\n\nnodbUtil.wrapFns(AqQueue.prototype,\n  \"deqOne\",\n  \"deqMany\",\n  \"enqOne\",\n  \"enqMany\");\n\nmodule.exports = AqQueue;\n", "// Copyright (c) 2018, 2022, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nclass SodaDocument {\n\n  //---------------------------------------------------------------------------\n  // createdOn\n  //\n  // Property for the created date of the document.\n  //---------------------------------------------------------------------------\n  get createdOn() {\n    return this._impl.getCreatedOn();\n  }\n\n  //---------------------------------------------------------------------------\n  // getContent()\n  //\n  // Returns the document content as a Javascript object.\n  //---------------------------------------------------------------------------\n  getContent() {\n    return JSON.parse(this._impl.getContentAsString());\n  }\n\n  //---------------------------------------------------------------------------\n  // getContentAsBuffer()\n  //\n  // Returns the document content as a buffer.\n  //---------------------------------------------------------------------------\n  getContentAsBuffer() {\n    return this._impl.getContentAsBuffer();\n  }\n\n  //---------------------------------------------------------------------------\n  // getContentAsString()\n  //\n  // Returns the document content as a string.\n  //---------------------------------------------------------------------------\n  getContentAsString() {\n    return this._impl.getContentAsString();\n  }\n\n  //---------------------------------------------------------------------------\n  // key\n  //\n  // Property for the key of the document.\n  //---------------------------------------------------------------------------\n  get key() {\n    return this._impl.getKey();\n  }\n\n  //---------------------------------------------------------------------------\n  // lastModified\n  //\n  // Property for the last modified date of the document.\n  //---------------------------------------------------------------------------\n  get lastModified() {\n    return this._impl.getLastModified();\n  }\n\n  //---------------------------------------------------------------------------\n  // mediaType\n  //\n  // Property for the media type of the document.\n  //---------------------------------------------------------------------------\n  get mediaType() {\n    return this._impl.getMediaType();\n  }\n\n  //---------------------------------------------------------------------------\n  // verison\n  //\n  // Property for the version of the document.\n  //---------------------------------------------------------------------------\n  get version() {\n    return this._impl.getVersion();\n  }\n\n}\n\nSodaDocument.prototype._sodaDocumentMarker = true;\n\nmodule.exports = SodaDocument;\n", "// Copyright (c) 2018, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst SodaDocument = require('./sodaDocument.js');\n\nclass SodaDocCursor {\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the cursor and make it unusable for further operations.\n  //--------------------------------------------------------------------------\n  async close() {\n    errors.assertArgCount(arguments, 0, 0);\n    errors.assert(this._impl, errors.ERR_INVALID_SODA_DOC_CURSOR);\n    await this._impl.close();\n    delete this._impl;\n  }\n\n  //---------------------------------------------------------------------------\n  // getNext()\n  //\n  // Return the next document available from the cursor.\n  //---------------------------------------------------------------------------\n  async getNext() {\n    errors.assertArgCount(arguments, 0, 0);\n    errors.assert(this._impl, errors.ERR_INVALID_SODA_DOC_CURSOR);\n    const docImpl = await this._impl.getNext();\n    if (docImpl) {\n      const doc = new SodaDocument();\n      doc._impl = docImpl;\n      return doc;\n    }\n  }\n\n  [Symbol.asyncIterator]() {\n    const cursor = this;\n    return {\n      async next() {\n        const doc = await cursor.getNext();\n        return {value: doc, done: doc === undefined};\n      },\n      return() {\n        return {done: true};\n      }\n    };\n  }\n\n}\n\nnodbUtil.wrapFns(SodaDocCursor.prototype,\n  \"close\",\n  \"getNext\");\n\nmodule.exports = SodaDocCursor;\n", "// Copyright (c) 2018, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst SodaDocCursor = require('./sodaDocCursor.js');\nconst SodaDocument = require('./sodaDocument.js');\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst settings = require('./settings.js');\n\nclass SodaOperation {\n\n  constructor() {\n    this._options = {\n      autoCommit: settings.autoCommit,\n      fetchArraySize: settings.fetchArraySize\n    };\n  }\n\n  //---------------------------------------------------------------------------\n  // count()\n  //\n  // Return a count of the number of documents that match the search criteria.\n  //---------------------------------------------------------------------------\n  async count() {\n    errors.assertArgCount(arguments, 0, 0);\n    return await this._impl.count(this._options);\n  }\n\n  //---------------------------------------------------------------------------\n  // getCursor()\n  //\n  // Return a cursor which will return the documents that match the search\n  // criteria.\n  //---------------------------------------------------------------------------\n  async getCursor() {\n    errors.assertArgCount(arguments, 0, 0);\n    const cursor = new SodaDocCursor();\n    cursor._impl = await this._impl.getCursor(this._options);\n    return cursor;\n  }\n\n  //---------------------------------------------------------------------------\n  // getDocuments()\n  //   Return an array of documents that match the search criteria.\n  //---------------------------------------------------------------------------\n  async getDocuments() {\n    errors.assertArgCount(arguments, 0, 0);\n    const docImpls = await this._impl.getDocuments(this._options);\n    const returnVal = new Array(docImpls.length);\n    for (let i = 0; i < docImpls.length; i++) {\n      returnVal[i] = new SodaDocument();\n      returnVal[i]._impl = docImpls[i];\n    }\n    return returnVal;\n  }\n\n  //---------------------------------------------------------------------------\n  // getOne()\n  //\n  // Return the first document that matches the search criteria.\n  //---------------------------------------------------------------------------\n  async getOne() {\n    errors.assertArgCount(arguments, 0, 0);\n    const docImpl = await this._impl.getOne(this._options);\n    if (docImpl) {\n      const doc = new SodaDocument;\n      doc._impl = docImpl;\n      return doc;\n    }\n  }\n\n\n  //---------------------------------------------------------------------------\n  // lock()\n  //\n  //  Pessimistic locking - similar to SELECT FOR UPDATE, these documents\n  //  cannot be updated by other threads until an explicit commit/rollback is\n  //  called.  With autoCommit set to true is applicable only for one immediate\n  //  operation and is not recommended in this context\n  //---------------------------------------------------------------------------\n  lock()  {\n    errors.assertArgCount(arguments, 0, 0);\n    this._options.lock = true;\n    return this;\n  }\n\n\n  //---------------------------------------------------------------------------\n  // replaceOne()\n  //\n  // Replace the first document that matches the search criteria with the\n  // specified document.\n  //---------------------------------------------------------------------------\n  async replaceOne(content) {\n    errors.assertArgCount(arguments, 1, 1);\n    content = nodbUtil.verifySodaDoc(content);\n    return await this._impl.replaceOne(this._options, content);\n  }\n\n  //---------------------------------------------------------------------------\n  // replaceOneAndGet()\n  //\n  // Replace the first document that matches the search criteria with the\n  // specified document and then return a result document containing metadata.\n  //---------------------------------------------------------------------------\n  async replaceOneAndGet(content) {\n    errors.assertArgCount(arguments, 1, 1);\n    content = nodbUtil.verifySodaDoc(content);\n    const docImpl = await this._impl.replaceOneAndGet(this._options, content);\n    if (docImpl) {\n      const doc = new SodaDocument();\n      doc._impl = docImpl;\n      return doc;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // remove()\n  //\n  // Remove the documents that match the search criteria from the collection\n  // and return information about the operation to the caller.\n  //---------------------------------------------------------------------------\n  async remove() {\n    errors.assertArgCount(arguments, 0, 0);\n    return await this._impl.remove(this._options);\n  }\n\n  // fetchArraySize - a non-terminal function that can chain further\n  fetchArraySize(n) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Number.isInteger(n) && n >= 0, 1);\n    this._options.fetchArraySize = n;\n    return this;\n  }\n\n  // filter property - a non-terminal function and can chain further\n  filter(f) {\n    errors.assertArgCount (arguments, 1, 1);\n    errors.assertParamValue(nodbUtil.isObject(f), 1);\n    this._options.filter = JSON.stringify(f);\n    return this;\n  }\n\n  // hint - a non-terminal function and can chain further\n  hint(val) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(typeof val === 'string', 1);\n    this._options.hint = val;\n    return this;\n  }\n\n  // key - a non-terminal function and can chain further\n  key(k) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(typeof k === 'string', 1);\n    this._options.key = k;\n    this._options.keys = undefined;\n    return this;\n  }\n\n  // keys - a non-terminal function and can chain further\n  keys(arr) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Array.isArray(arr), 1);\n\n    for (let i = 0; i < arr.length; i++) {\n      errors.assertParamValue(typeof arr[i] === 'string', 1);\n    }\n\n    this._options.keys = arr;\n    this._options.key = undefined;\n    return this;\n  }\n\n  // limit property - a non-terminal function and can chain further\n  limit(n) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(typeof n === 'number', 1);\n    this._options.limit = n;\n    return this;\n  }\n\n  // skip property - a non-terminal function and can chain further\n  skip(n) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(typeof n === 'number', 1);\n    this._options.skip = n;\n    return this;\n  }\n\n  // version property - a non-terminal function and can chain further\n  version(v) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(typeof v === 'string', 1);\n    this._options.version = v;\n    return this;\n  }\n\n}\n\nnodbUtil.wrapFns(SodaOperation.prototype,\n  \"count\",\n  \"getCursor\",\n  \"getDocuments\",\n  \"getOne\",\n  \"remove\",\n  \"replaceOne\",\n  \"replaceOneAndGet\");\n\nmodule.exports = SodaOperation;\n", "// Copyright (c) 2018, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst SodaDocument = require('./sodaDocument.js');\nconst SodaOperation = require('./sodaOperation.js');\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst settings = require('./settings.js');\n\nclass SodaCollection {\n\n  //---------------------------------------------------------------------------\n  // createIndex()\n  //\n  // Create an index on the collection.\n  //---------------------------------------------------------------------------\n  async createIndex(spec) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(nodbUtil.isObject(spec), 1);\n    const options = {autoCommit: settings.autoCommit};\n    return await this._impl.createIndex(JSON.stringify(spec), options);\n  }\n\n  //---------------------------------------------------------------------------\n  // drop()\n  //\n  // Drop the collection.\n  //---------------------------------------------------------------------------\n  async drop() {\n    errors.assertArgCount(arguments, 0, 0);\n    const options = {autoCommit: settings.autoCommit};\n    return await this._impl.drop(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // dropIndex()\n  //\n  // Drop an index on the collection.\n  //---------------------------------------------------------------------------\n  async dropIndex(indexName, a2) {\n    const options = {autoCommit: settings.autoCommit};\n\n    errors.assertArgCount(arguments, 1, 2);\n    errors.assertParamValue(typeof indexName === 'string', 1);\n    if (arguments.length == 2) {\n      errors.assertParamValue(typeof a2 === 'object', 2);\n      if (a2.force !== undefined) {\n        errors.assertParamPropValue(typeof a2.force === 'boolean', 2, \"force\");\n        options.force = a2.force;\n      }\n    }\n    return await this._impl.dropIndex(indexName, options);\n  }\n\n  //---------------------------------------------------------------------------\n  // find()\n  //\n  // Returns a SODA operation associated with the collection.\n  //---------------------------------------------------------------------------\n  find() {\n    errors.assertArgCount(arguments, 0, 0);\n    const op = new SodaOperation();\n    op._impl = this._impl.find();\n    return op;\n  }\n\n  //---------------------------------------------------------------------------\n  // getDataGuide()\n  //   Return the data guide for the collection.\n  //---------------------------------------------------------------------------\n  async getDataGuide() {\n    errors.assertArgCount(arguments, 0, 0);\n    const doc = new SodaDocument();\n    doc._impl = await this._impl.getDataGuide();\n    return doc;\n  }\n\n  //---------------------------------------------------------------------------\n  // insertMany()\n  //\n  // Insert an array of documents into the collection in a single round-trip.\n  //---------------------------------------------------------------------------\n  async insertMany(docs) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Array.isArray(docs) && docs.length > 0, 1);\n\n    const actualDocs = Array(docs.length);\n    for (let i = 0; i < docs.length; i++) {\n      actualDocs[i] = nodbUtil.verifySodaDoc(docs[i]);\n    }\n\n    const options = {autoCommit: settings.autoCommit};\n    await this._impl.insertMany(actualDocs, options);\n  }\n\n  //---------------------------------------------------------------------------\n  // insertManyAndGet()\n  //\n  // Insert an array of documents into the collection in a single round-trip\n  // and return a set of result documents containing metadata.\n  //---------------------------------------------------------------------------\n  async insertManyAndGet(docs, a2) {\n    const options = {autoCommit: settings.autoCommit};\n\n    errors.assertArgCount(arguments, 1, 2);\n    errors.assertParamValue(Array.isArray(docs) && docs.length > 0, 1);\n\n    if (arguments.length == 2) {\n      errors.assertParamValue(nodbUtil.isObject(a2), 2);\n      if (a2.hint !== undefined) {\n        errors.assertParamPropValue(typeof a2.hint === 'string', 2, \"hint\");\n        options.hint = a2.hint;\n      }\n    }\n\n    const actualDocs = Array(docs.length);\n    for (let i = 0; i < docs.length; i++) {\n      actualDocs[i] = nodbUtil.verifySodaDoc(docs[i]);\n    }\n\n    const docImpls = await this._impl.insertManyAndGet(actualDocs, options);\n    for (let i = 0; i < docs.length; i++) {\n      const doc = actualDocs[i] = new SodaDocument();\n      doc._impl = docImpls[i];\n    }\n\n    return actualDocs;\n  }\n\n  //---------------------------------------------------------------------------\n  // insertOne()\n  //\n  // Inserts a single document into the collection.\n  //---------------------------------------------------------------------------\n  async insertOne(content) {\n    errors.assertArgCount(arguments, 1, 1);\n    content = nodbUtil.verifySodaDoc(content);\n    const options = {autoCommit: settings.autoCommit};\n    await this._impl.insertOne(content, options);\n  }\n\n  //---------------------------------------------------------------------------\n  // insertOneAndGet()\n  //\n  // Inserts a single document into the collection and returns a result\n  // document containing metadata.\n  //---------------------------------------------------------------------------\n  async insertOneAndGet(content, a2) {\n    const options = {autoCommit: settings.autoCommit};\n\n    errors.assertArgCount(arguments, 1, 2);\n    content = nodbUtil.verifySodaDoc(content);\n    if (arguments.length == 2) {\n      errors.assertParamValue(nodbUtil.isObject(a2), 2);\n      if (a2.hint !== undefined) {\n        errors.assertParamPropValue(typeof a2.hint === 'string', 2, \"hint\");\n        options.hint = a2.hint;\n      }\n    }\n\n    const doc = new SodaDocument();\n    doc._impl = await this._impl.insertOneAndGet(content, options);\n    return doc;\n  }\n\n  //---------------------------------------------------------------------------\n  // listIndexes()\n  //\n  //   To obtain all indices from the collection\n  //---------------------------------------------------------------------------\n  async listIndexes() {\n    const arr = await this._impl.listIndexes();\n    return arr.map(i => JSON.parse(i));\n  }\n\n  //---------------------------------------------------------------------------\n  // metaData()\n  //\n  // Property for the metadata associated with the collection.\n  //---------------------------------------------------------------------------\n  get metaData() {\n    return JSON.parse(this._impl.getMetaData());\n  }\n\n  //---------------------------------------------------------------------------\n  // name()\n  //\n  // Property for the name of the collection.\n  //---------------------------------------------------------------------------\n  get name() {\n    return this._impl.getName();\n  }\n\n  //---------------------------------------------------------------------------\n  // save()\n  //\n  // Saves a single document into the collection.\n  //---------------------------------------------------------------------------\n  async save(content) {\n    errors.assertArgCount(arguments, 1, 1);\n    content = nodbUtil.verifySodaDoc(content);\n    const options = {autoCommit: settings.autoCommit};\n    await this._impl.save(content, options);\n  }\n\n  //---------------------------------------------------------------------------\n  // saveAndGet()\n  //\n  // Saves a single document into the collection and returns a result document\n  // containing metadata.\n  //---------------------------------------------------------------------------\n  async saveAndGet(content, a2) {\n    errors.assertArgCount(arguments, 1, 2);\n    content = nodbUtil.verifySodaDoc(content);\n    const options = {autoCommit: settings.autoCommit};\n    if (arguments.length == 2) {\n      errors.assertParamValue(nodbUtil.isObject(a2), 2);\n      if (a2.hint !== undefined) {\n        errors.assertParamPropValue(typeof a2.hint === 'string', 2, \"hint\");\n        options.hint = a2.hint;\n      }\n    }\n\n    const doc = new SodaDocument();\n    doc._impl = await this._impl.saveAndGet(content, options);\n    return doc;\n  }\n\n  //---------------------------------------------------------------------------\n  // truncate()\n  //\n  // Remove all of the documents from a collection.\n  //---------------------------------------------------------------------------\n  async truncate() {\n    errors.assertArgCount(arguments, 0, 0);\n    await this._impl.truncate();\n  }\n\n}\n\nnodbUtil.wrapFns(SodaCollection.prototype,\n  \"createIndex\",\n  \"drop\",\n  \"dropIndex\",\n  \"getDataGuide\",\n  \"insertMany\",\n  \"insertManyAndGet\",\n  \"insertOne\",\n  \"insertOneAndGet\",\n  \"listIndexes\",\n  \"save\",\n  \"saveAndGet\",\n  \"truncate\");\n\nmodule.exports = SodaCollection;\n", "// Copyright (c) 2018, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst SodaCollection = require('./sodaCollection.js');\nconst SodaDocument = require('./sodaDocument.js');\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst settings = require('./settings.js');\n\nclass SodaDatabase {\n\n  _getConnection() {\n    return this._connection;\n  }\n\n  //---------------------------------------------------------------------------\n  // createCollection()\n  //\n  // Creates a SODA collection.\n  //---------------------------------------------------------------------------\n  async createCollection(name, a2) {\n    const options = {autoCommit: settings.autoCommit};\n\n    errors.assertArgCount(arguments, 1, 2);\n    errors.assertParamValue(typeof name === 'string', 1);\n\n    if (arguments.length == 2) {\n      errors.assertParamValue(nodbUtil.isObject(a2), 2);\n      if (a2.mode !== undefined) {\n        errors.assertParamPropValue(Number.isInteger(a2.mode) && a2.mode > 0,\n          2, \"mode\");\n        options.mode = a2.mode;\n      }\n      if (a2.metaData !== undefined) {\n        errors.assertParamPropValue(nodbUtil.isObject(a2.metaData), 2,\n          \"metaData\");\n        options.metaData = JSON.stringify(a2.metaData);\n      }\n    }\n\n    const coll = new SodaCollection();\n    coll._impl = await this._impl.createCollection(name, options);\n    return coll;\n  }\n\n  //---------------------------------------------------------------------------\n  // createDocument()\n  //\n  // Creates a SODA document.\n  //---------------------------------------------------------------------------\n  createDocument(content, a2) {\n    let options = {};\n\n    errors.assertArgCount(arguments, 1, 2);\n    errors.assertParamValue(Buffer.isBuffer(content) ||\n        typeof content === 'string' || nodbUtil.isObject(content), 1);\n    if (arguments.length > 1) {\n      errors.assertParamValue(nodbUtil.isObject(a2), 2);\n      options = a2;\n      errors.assertParamPropString(options, 2, \"key\");\n      errors.assertParamPropString(options, 2, \"mediaType\");\n    }\n\n    if (typeof content === 'string') {\n      content = Buffer.from(content);\n    } else if (nodbUtil.isObject(content)) {\n      content = Buffer.from(JSON.stringify(content));\n    }\n\n    const doc = new SodaDocument();\n    doc._impl = this._impl.createDocument(content, options);\n    return doc;\n  }\n\n  //---------------------------------------------------------------------------\n  // getCollectionNames()\n  //\n  // Return an array of the names of the collections in the database.\n  //---------------------------------------------------------------------------\n  async getCollectionNames(a1) {\n    let options = {};\n\n    errors.assertArgCount(arguments, 0, 1);\n    if (arguments.length == 1) {\n      errors.assertParamValue(nodbUtil.isObject(a1), 1);\n      options = a1;\n      if (options.startsWith !== undefined) {\n        errors.assertParamPropValue(typeof options.startsWith === 'string', 1,\n          \"startsWith\");\n      }\n      if (options.limit !== undefined) {\n        errors.assertParamPropValue(Number.isInteger(options.limit), 1,\n          \"limit\");\n      }\n    }\n    return await this._impl.getCollectionNames(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // openCollection()\n  //\n  // Open an existing SODA collection and return it to the caller.\n  //---------------------------------------------------------------------------\n  async openCollection(name) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(typeof name === 'string', 1);\n    const options = {autoCommit: settings.autoCommit};\n    const collImpl = await this._impl.openCollection(name, options);\n    if (collImpl) {\n      const coll = new SodaCollection();\n      coll._impl = collImpl;\n      return coll;\n    }\n  }\n\n}\n\nnodbUtil.wrapFns(SodaDatabase.prototype,\n  \"createCollection\",\n  \"getCollectionNames\",\n  \"openCollection\");\n\nmodule.exports = SodaDatabase;\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"events\" has been externalized for browser compatibility. Cannot access \"events.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (c) 2016, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst AqQueue = require('./aqQueue.js');\nconst BaseDbObject = require('./dbObject.js');\nconst { Buffer } = require('buffer');\nconst Lob = require('./lob.js');\nconst ResultSet = require('./resultset.js');\nconst SodaDatabase = require('./sodaDatabase.js');\nconst EventEmitter = require('events');\nconst QueryStream = require('./queryStream.js');\nconst errors = require('./errors.js');\nconst nodbUtil = require('./util.js');\nconst impl = require('./impl');\nconst process = require('process');\nconst util = require('util');\nconst constants = require('./constants.js');\nconst settings = require('./settings.js');\nconst transformer = require('./transformer.js');\nconst types = require('./types.js');\nconst oson = require('./impl/datahandlers/oson.js');\n\n// global mapping of subscriptions; these cannot be tied to a particular\n// connection or pool since subscriptions can be created with one connection\n// and destroyed with another!\nconst _subscriptions = new Map();\n\n// define class\nclass Connection extends EventEmitter {\n\n  constructor() {\n    super();\n    this._dbObjectClasses = new Map();\n    this._closing = false;\n  }\n\n  //---------------------------------------------------------------------------\n  // _addDefaultsToExecOpts()\n  //\n  // Add values to the execute options from the global settings, if needed.\n  //---------------------------------------------------------------------------\n  _addDefaultsToExecOpts(options) {\n    options.connection = this;\n    if (options.keepInStmtCache === undefined)\n      options.keepInStmtCache = true;\n    settings.addToOptions(options,\n      \"autoCommit\",\n      \"dbObjectAsPojo\",\n      \"fetchArraySize\",\n      \"fetchTypeHandler\",\n      \"maxRows\",\n      \"outFormat\",\n      \"prefetchRows\");\n  }\n\n  //---------------------------------------------------------------------------\n  // _buildDbObjectClass()\n  //\n  // Builds and returns a database object class given the object type\n  // information supplied by the implementation.\n  //---------------------------------------------------------------------------\n  _buildDbObjectClass(objType) {\n    const DbObject = function(initialValue) {\n      this._impl = new impl.DbObjectImpl(objType);\n      if (this.isCollection) {\n        const proxy = new Proxy(this, BaseDbObject._collectionProxyHandler);\n        if (initialValue !== undefined) {\n          for (let i = 0; i < initialValue.length; i++) {\n            this.append(initialValue[i]);\n          }\n        }\n        return (proxy);\n      } else if (initialValue !== undefined) {\n        Object.assign(this, initialValue);\n      }\n    };\n    DbObject.prototype = Object.create(BaseDbObject.prototype);\n    DbObject.prototype.constructor = DbObject;\n    DbObject.prototype._objType = objType;\n    if (objType.elementTypeClass) {\n      const cls = this._getDbObjectClass(objType.elementTypeClass);\n      objType.elementTypeClass = cls;\n    }\n    if (objType.isCollection) {\n      nodbUtil.addTypeProperties(objType, \"elementType\");\n      objType.elementTypeInfo.type = objType.elementType;\n    }\n    if (objType.attributes) {\n      const props = {};\n      for (const attr of objType.attributes) {\n        if (attr.typeClass) {\n          attr.typeClass = this._getDbObjectClass(attr.typeClass);\n        }\n        nodbUtil.addTypeProperties(attr, \"type\");\n        const prop = {\n          get() {\n            return this._getAttrValue(attr);\n          },\n          set(value) {\n            this._setAttrValue(attr, value);\n          }\n        };\n        props[attr.name] = prop;\n      }\n      Object.defineProperties(DbObject.prototype, props);\n    }\n    DbObject.toString = function() {\n      return ('DbObjectClass [' + objType.fqn + ']');\n    };\n    return (DbObject);\n  }\n\n  //---------------------------------------------------------------------------\n  // _getDbObjectClass()\n  //\n  // Returns the database object class given the object type information\n  // supplied by the implementation. The cache is searched first to see if an\n  // object class has already been built.\n  //---------------------------------------------------------------------------\n  _getDbObjectClass(objType) {\n    if (objType.prototype instanceof BaseDbObject)\n      return objType;\n    let cls = this._dbObjectClasses.get(objType);\n    if (!cls) {\n      cls = this._buildDbObjectClass(objType);\n      cls._connection = this;\n      cls._objType = objType;\n      objType._connection = this._impl;\n      this._dbObjectClasses.set(objType, cls);\n    }\n    return (cls);\n  }\n\n  //---------------------------------------------------------------------------\n  // _getDbObjectClassForName()\n  //\n  // Returns the database object class given the name of the database object\n  // type. The cache is searched first to see if an object class has already\n  // been built.\n  //---------------------------------------------------------------------------\n  async _getDbObjectClassForName(name) {\n    let cls = this._dbObjectClasses.get(name);\n    if (!cls) {\n      const objType = await this._impl.getDbObjectClass(name);\n      cls = this._getDbObjectClass(objType);\n      this._dbObjectClasses.set(name, cls);\n    }\n    return cls;\n  }\n\n  //---------------------------------------------------------------------------\n  // _isBindDir()\n  //\n  // Returns a boolean indicating if the supplied value is a valid bind\n  // direction.\n  //---------------------------------------------------------------------------\n  _isBindDir(value) {\n    return (\n      value === constants.BIND_IN ||\n      value === constants.BIND_OUT ||\n      value === constants.BIND_INOUT\n    );\n  }\n\n  //---------------------------------------------------------------------------\n  // _isBindValue()\n  //\n  // Returns a boolean indicating if the supplied value is one that can be\n  // bound.\n  //---------------------------------------------------------------------------\n  _isBindValue(value) {\n    return (\n      value === null ||\n      value === undefined ||\n      typeof value === 'number' ||\n      typeof value === 'string' ||\n      typeof value === 'boolean' ||\n      typeof value === 'bigint' ||\n      Array.isArray(value) ||\n      value instanceof Float32Array ||\n      value instanceof Float64Array ||\n      value instanceof Int8Array ||\n      Buffer.isBuffer(value) ||\n      util.types.isDate(value) ||\n      value instanceof Lob ||\n      value instanceof ResultSet ||\n      value instanceof BaseDbObject\n    );\n  }\n\n  //---------------------------------------------------------------------------\n  // _processBindUnit()\n  //\n  // Processes a bind unit (object) supplied by the user and returns the value\n  // stored in it (if one is).\n  //---------------------------------------------------------------------------\n  async _processBindUnit(bindInfo, bindUnit, inExecuteMany) {\n    let okBindUnit = false;\n\n    // get and validate bind direction; if not specified, IN is assumed\n    if (bindUnit.dir === undefined) {\n      bindInfo.dir = constants.BIND_IN;\n    } else {\n      errors.assert(this._isBindDir(bindUnit.dir),\n        errors.ERR_INVALID_BIND_DIRECTION);\n      bindInfo.dir = bindUnit.dir;\n      okBindUnit = true;\n    }\n\n    // get and validate bind type; it must be one of the integer constants\n    // identifying types, a string identifying an object type or a constructor\n    // function identifying an object type\n    if (bindUnit.type !== undefined) {\n      if (typeof bindUnit.type === 'string') {\n        bindInfo.type = types.DB_TYPE_OBJECT;\n        bindInfo.typeClass = await this._getDbObjectClassForName(bindUnit.type);\n        bindInfo.objType = bindInfo.typeClass._objType;\n      } else if (bindUnit.type.prototype instanceof BaseDbObject) {\n        bindInfo.type = types.DB_TYPE_OBJECT;\n        bindInfo.typeClass = bindUnit.type;\n        bindInfo.objType = bindInfo.typeClass._objType;\n      } else {\n        errors.assert(bindUnit.type instanceof types.DbType,\n          errors.ERR_INVALID_BIND_DATA_TYPE, 2);\n        bindInfo.type = bindUnit.type;\n      }\n      okBindUnit = true;\n\n    // when calling executeMany(), bind type is mandatory\n    } else if (inExecuteMany) {\n      if (bindInfo.name)\n        errors.throwErr(errors.ERR_MISSING_TYPE_BY_NAME, bindInfo.name);\n      errors.throwErr(errors.ERR_MISSING_TYPE_BY_POS, bindInfo.pos);\n    }\n\n    // get and validate the maximum size for strings/buffers; this value is\n    // used for IN/OUT and OUT binds in execute() and at all times for\n    // executeMany()\n    if (bindInfo.dir !== constants.BIND_IN || inExecuteMany) {\n      if (bindUnit.maxSize !== undefined) {\n        errors.assertParamPropValue(Number.isInteger(bindUnit.maxSize) &&\n          bindUnit.maxSize > 0, 2, \"maxSize\");\n        bindInfo.maxSize = bindUnit.maxSize;\n        bindInfo.checkSize = true;\n        okBindUnit = true;\n      } else if (inExecuteMany) {\n        if (bindInfo.type === types.DB_TYPE_VARCHAR ||\n            bindInfo.type === types.DB_TYPE_RAW) {\n          if (bindInfo.name)\n            errors.throwErr(errors.ERR_MISSING_MAX_SIZE_BY_NAME, bindInfo.name);\n          errors.throwErr(errors.ERR_MISSING_MAX_SIZE_BY_POS, bindInfo.pos);\n        }\n      } else {\n        bindInfo.maxSize = constants.DEFAULT_MAX_SIZE_FOR_OUT_BINDS;\n      }\n    }\n\n    // get max array size (for array binds, not possible in executeMany())\n    bindInfo.isArray = false;\n    if (!inExecuteMany) {\n      if (bindUnit.maxArraySize !== undefined) {\n        errors.assertParamPropValue(Number.isInteger(bindUnit.maxArraySize) &&\n          bindUnit.maxArraySize > 0, 2, \"maxArraySize\");\n        bindInfo.maxArraySize = bindUnit.maxArraySize;\n        bindInfo.isArray = true;\n      }\n    }\n\n    // get the value, if specified (not used in executeMany())\n    if (!inExecuteMany && bindUnit.val !== undefined) {\n      return bindUnit.val;\n    }\n\n    if (!okBindUnit)\n      errors.throwErr(errors.ERR_INVALID_BIND_UNIT);\n  }\n\n  //---------------------------------------------------------------------------\n  // _processBindValue()\n  //\n  // Processes the bind value supplied by the caller. This performs all checks\n  // on the value and normalizes it for use by the implementation class. If no\n  // bind info has been defined yet, the value defines that.\n  //---------------------------------------------------------------------------\n  async _processBindValue(bindInfo, value, options) {\n    const transformed = transformer.transformValueIn(bindInfo, value, options);\n    if (bindInfo.isArray) {\n      bindInfo.values = transformed.concat(bindInfo.values.slice(transformed.length));\n    } else {\n      bindInfo.values[options.pos] = transformed;\n    }\n    if (bindInfo.type === types.DB_TYPE_OBJECT &&\n        bindInfo.typeClass === undefined) {\n      bindInfo.typeClass = await this._getDbObjectClass(value._objType);\n      bindInfo.objType = bindInfo.typeClass._objType;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _processExecuteBind()\n  //\n  // Processes a single execute bind supplied by the caller. This performs all\n  // checks on the bind and normalizes it for use by the implementation class.\n  //---------------------------------------------------------------------------\n  async _processExecuteBind(bindInfo, bindData) {\n\n    // setup defaults\n    bindInfo.isArray = false;\n\n    // if bind data is a value that can be bound directly, use it; otherwise,\n    // scan the bind unit for bind information and its value\n    let bindValue;\n    if (this._isBindValue(bindData)) {\n      bindInfo.dir = constants.BIND_IN;\n      bindValue = bindData;\n    } else {\n      bindValue = await this._processBindUnit(bindInfo, bindData, false);\n    }\n\n    // for IN and IN/OUT binds, process the value\n    if (bindInfo.dir !== constants.BIND_OUT) {\n      const options = {pos: 0, allowArray: true};\n      await this._processBindValue(bindInfo, bindValue, options);\n    }\n\n    // if only null values were found (or an OUT bind was specified), type\n    // information may not be set, so complete bind information as a string\n    // and set the maxSize to 1 if it has not already been set\n    if (bindInfo.type === undefined) {\n      bindInfo.type = types.DB_TYPE_VARCHAR;\n      if (bindInfo.maxSize === undefined)\n        bindInfo.maxSize = 1;\n    }\n\n    // check valid bind type for array binds\n    if (bindInfo.isArray &&\n        bindInfo.type !== types.DB_TYPE_VARCHAR &&\n        bindInfo.type !== types.DB_TYPE_NVARCHAR &&\n        bindInfo.type !== types.DB_TYPE_CHAR &&\n        bindInfo.type !== types.DB_TYPE_NCHAR &&\n        bindInfo.type !== types.DB_TYPE_NUMBER &&\n        bindInfo.type !== types.DB_TYPE_BINARY_FLOAT &&\n        bindInfo.type !== types.DB_TYPE_BINARY_DOUBLE &&\n        bindInfo.type !== types.DB_TYPE_DATE &&\n        bindInfo.type !== types.DB_TYPE_TIMESTAMP &&\n        bindInfo.type !== types.DB_TYPE_TIMESTAMP_LTZ &&\n        bindInfo.type !== types.DB_TYPE_TIMESTAMP_TZ &&\n        bindInfo.type !== types.DB_TYPE_RAW) {\n      errors.throwErr(errors.ERR_INVALID_TYPE_FOR_ARRAY_BIND);\n    }\n\n  }\n\n  //---------------------------------------------------------------------------\n  // _processExecuteBinds()\n  //\n  // Processes the binds supplied by the caller. This performs all checks on\n  // the binds and normalizes them for use by the implementation class.\n  //---------------------------------------------------------------------------\n  async _processExecuteBinds(binds) {\n    const normBinds = [];\n    if (Array.isArray(binds)) {\n      for (let i = 0; i < binds.length; i++) {\n        const bindInfo = normBinds[i] = {pos: i + 1, values: []};\n        await this._processExecuteBind(bindInfo, binds[i]);\n      }\n    } else {\n      errors.assertParamValue(nodbUtil.isObject(binds), 2);\n      const bindNames = Object.getOwnPropertyNames(binds);\n      for (let i = 0; i < bindNames.length; i++) {\n        const bindInfo = normBinds[i] = {name: bindNames[i], values: []};\n        await this._processExecuteBind(bindInfo, binds[bindNames[i]]);\n      }\n    }\n    return normBinds;\n  }\n\n  //---------------------------------------------------------------------------\n  // _processExecuteManyBinds()\n  //\n  // Processes the binds supplied by the caller. This performs all checks on\n  // the binds and normalizes them for use by the implementation class.\n  //---------------------------------------------------------------------------\n  async _processExecuteManyBinds(binds, bindDefs) {\n    const normBinds = [];\n    let byPosition;\n\n    // transform bindDefs into normalized binds, if available\n    if (bindDefs !== undefined) {\n      if (Array.isArray(bindDefs)) {\n        byPosition = true;\n        for (let i = 0; i < bindDefs.length; i++) {\n          const bindInfo = normBinds[i] = {pos: i + 1, values: []};\n          await this._processBindUnit(bindInfo, bindDefs[i], true);\n        }\n      } else {\n        byPosition = false;\n        const bindNames = Object.getOwnPropertyNames(bindDefs);\n        for (let i = 0; i < bindNames.length; i++) {\n          const bindInfo = normBinds[i] = {name: bindNames[i], values: []};\n          await this._processBindUnit(bindInfo, bindDefs[bindNames[i]], true);\n        }\n      }\n\n    // otherwise, use the first row to determine the binds to use\n    } else {\n      const row = binds[0];\n      errors.assertParamValue(nodbUtil.isObjectOrArray(row), 2);\n      if (Array.isArray(row)) {\n        byPosition = true;\n        for (let i = 0; i < row.length; i++) {\n          normBinds[i] = {pos: i + 1};\n        }\n      } else {\n        byPosition = false;\n        const bindNames = Object.getOwnPropertyNames(row);\n        for (let i = 0; i < bindNames.length; i++) {\n          normBinds[i] = {name: bindNames[i]};\n        }\n      }\n      for (let i = 0; i < normBinds.length; i++) {\n        normBinds[i].dir = constants.BIND_IN;\n        normBinds[i].isArray = false;\n        normBinds[i].values = [];\n      }\n    }\n\n    // process each of the rows\n    for (let i = 0; i < binds.length; i++) {\n      const row = binds[i];\n      const options = {pos: i, allowArray: false};\n      errors.assert((byPosition && Array.isArray(row)) ||\n        (!byPosition && nodbUtil.isObject(row)), errors.ERR_MIXED_BIND);\n      for (let j = 0; j < normBinds.length; j++) {\n        const bindInfo = normBinds[j];\n        const value = (byPosition) ? row[j] : row[bindInfo.name];\n        await this._processBindValue(bindInfo, value, options);\n      }\n    }\n\n    // set bind type and size to a string of size 1 if no bind type was\n    // specified (and all values are null)\n    for (let i = 0; i < normBinds.length; i++) {\n      const bindInfo = normBinds[i];\n      if (bindInfo.type === undefined) {\n        bindInfo.type = types.DB_TYPE_VARCHAR;\n        bindInfo.maxSize = 1;\n      }\n    }\n\n    return normBinds;\n  }\n\n  //---------------------------------------------------------------------------\n  // _transformOutBind()\n  //\n  // Transform an output bind value from an implementation value to a user\n  // facing value (for result sets and LOBs). DML returning output variables\n  // are always an array of values.\n  //---------------------------------------------------------------------------\n  _transformOutBind(val, options) {\n    let outVal = val;\n    if (Array.isArray(val)) {\n      outVal = [];\n      for (let i = 0; i < val.length; i++)\n        outVal.push(this._transformOutBind(val[i], options));\n    } else if (val instanceof impl.ResultSetImpl) {\n      outVal = new ResultSet();\n      outVal._setup(this, val);\n    } else if (val instanceof impl.LobImpl) {\n      outVal = new Lob();\n      outVal._setup(val, true);\n    } else if (val instanceof impl.DbObjectImpl) {\n      const cls = this._dbObjectClasses.get(val._objType);\n      outVal = Object.create(cls.prototype);\n      outVal._impl = val;\n      if (options.dbObjectAsPojo) {\n        outVal = outVal._toPojo();\n      } else if (outVal.isCollection) {\n        outVal = new Proxy(outVal, BaseDbObject._collectionProxyHandler);\n      }\n    }\n    return outVal;\n  }\n\n  //---------------------------------------------------------------------------\n  // _verifyExecOpts\n  //\n  // Verify that the value passed by the user for binds is acceptable. Perform\n  // any transformations necessary.\n  //---------------------------------------------------------------------------\n  _verifyExecOpts(options, inExecuteMany) {\n\n    // define normalized options (value returned to caller)\n    const outOptions = {};\n\n    // handle common options\n    errors.assertParamValue(nodbUtil.isObject(options), 3);\n\n    // autoCommit must be a boolean value\n    if (options.autoCommit !== undefined) {\n      errors.assertParamPropValue(typeof options.autoCommit === 'boolean', 3,\n        \"autoCommit\");\n      outOptions.autoCommit = options.autoCommit;\n    }\n\n    // dbObjectAsPojo must be a boolean value\n    if (options.dbObjectAsPojo !== undefined) {\n      errors.assertParamPropValue(typeof options.dbObjectAsPojo === 'boolean',\n        3, \"dbObjectAsPojo\");\n      outOptions.dbObjectAsPojo = options.dbObjectAsPojo;\n    }\n\n    // keepInStmtCache must be a boolean value\n    if (options.keepInStmtCache !== undefined) {\n      errors.assertParamPropValue(typeof options.keepInStmtCache === 'boolean',\n        3, \"keepInStmtCache\");\n      outOptions.keepInStmtCache = options.keepInStmtCache;\n    }\n\n    // handle options specific to executeMany()\n    if (inExecuteMany) {\n\n      // bindDefs must be an object or array\n      if (options.bindDefs !== undefined) {\n        errors.assertParamPropValue(nodbUtil.isObjectOrArray(options.bindDefs),\n          3, \"bindDefs\");\n        outOptions.bindDefs = options.bindDefs;\n      }\n\n      // batchErrors must be a boolean value\n      if (options.batchErrors !== undefined) {\n        errors.assertParamPropValue(typeof options.batchErrors === 'boolean',\n          3, \"batchErrors\");\n        outOptions.batchErrors = options.batchErrors;\n      }\n\n      // dmlRowCounts must be a boolean value\n      if (options.dmlRowCounts !== undefined) {\n        errors.assertParamPropValue(typeof options.dmlRowCounts === 'boolean',\n          3, \"dmlRowCounts\");\n        outOptions.dmlRowCounts = options.dmlRowCounts;\n      }\n\n    // handle options specific to execute()\n    } else {\n\n      // fetchArraySize must be a positive integer\n      errors.assertParamPropUnsignedIntNonZero(options, 3, \"fetchArraySize\");\n      outOptions.fetchArraySize = options.fetchArraySize;\n\n      // fetchInfo must be an object with keys containing an object with a\n      // \"type\" property; these are converted to an array of objects for ease\n      // of processing by the implementation\n      if (options.fetchInfo !== undefined) {\n        errors.assertParamPropValue(nodbUtil.isObject(options.fetchInfo), 3,\n          \"fetchInfo\");\n        const names = Object.getOwnPropertyNames(options.fetchInfo);\n        const map = new Map(settings.fetchTypeMap);\n        for (const name of names) {\n          const info = options.fetchInfo[name];\n          if (info.type === undefined)\n            errors.throwErr(errors.ERR_NO_TYPE_FOR_CONVERSION);\n          if (info.type !== constants.DEFAULT &&\n              info.type !== types.DB_TYPE_VARCHAR &&\n              info.type !== types.DB_TYPE_RAW) {\n            errors.throwErr(errors.ERR_INVALID_TYPE_FOR_CONVERSION);\n          }\n          map.set(name, info.type);\n        }\n        outOptions.fetchTypeMap = map;\n      }\n\n      // fetchTypeHandler must be a function which is called for each column to\n      // be fetched and accepts the metadata for a column\n      if (options.fetchTypeHandler !== undefined) {\n        const type = (typeof options.fetchTypeHandler);\n        errors.assertParamPropValue(type === 'function', 3, \"fetchTypeHandler\");\n        outOptions.fetchTypeHandler = options.fetchTypeHandler;\n      }\n\n      // maxRows must be a positive integer (or 0)\n      if (options.maxRows !== undefined) {\n        errors.assertParamPropValue(Number.isInteger(options.maxRows) &&\n          options.maxRows >= 0, 3, \"maxRows\");\n        outOptions.maxRows = options.maxRows;\n      }\n\n      // outFormat must be one of the two possible constants\n      if (options.outFormat !== undefined) {\n        errors.assertParamPropValue(\n          options.outFormat === constants.OUT_FORMAT_ARRAY ||\n          options.outFormat === constants.OUT_FORMAT_OBJECT, 3, \"outFormat\");\n        outOptions.outFormat = options.outFormat;\n      }\n\n      // prefetchRows must be a positive integer (or 0)\n      if (options.prefetchRows !== undefined) {\n        errors.assertParamPropValue(Number.isInteger(options.prefetchRows) &&\n          options.prefetchRows >= 0, 3, \"prefetchRows\");\n        outOptions.prefetchRows = options.prefetchRows;\n      }\n\n      // resultSet must be a boolean value\n      if (options.resultSet !== undefined) {\n        errors.assertParamPropValue(typeof options.resultSet === 'boolean', 3,\n          \"resultSet\");\n        outOptions.resultSet = options.resultSet;\n      }\n\n    }\n\n    return outOptions;\n  }\n\n  //---------------------------------------------------------------------------\n  // action\n  //\n  // Property for end-to-end tracing attribute.\n  //---------------------------------------------------------------------------\n  get action() {\n    return null;\n  }\n\n  set action(value) {\n    errors.assertPropValue(typeof value === 'string', \"action\");\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    this._impl.setAction(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // breakExecution()\n  //\n  // Breaks execution of a running statement.\n  //---------------------------------------------------------------------------\n  async breakExecution() {\n    errors.assertArgCount(arguments, 0, 0);\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    await this._impl.breakExecution();\n  }\n\n  //---------------------------------------------------------------------------\n  // callTimeout\n  //\n  // Property for round-trip timeouts.\n  //---------------------------------------------------------------------------\n  get callTimeout() {\n    if (this._impl)\n      return this._impl.getCallTimeout();\n    return undefined;\n  }\n\n  set callTimeout(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"callTimeout\");\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    this._impl.setCallTimeout(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // changePassword()\n  //\n  // Changes the password of the specified user.\n  //---------------------------------------------------------------------------\n  async changePassword(user, password, newPassword) {\n    errors.assertArgCount(arguments, 3, 3);\n    errors.assertParamValue(typeof user === 'string', 1);\n    errors.assertParamValue(typeof password === 'string', 2);\n    errors.assertParamValue(typeof newPassword === 'string', 3);\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    await this._impl.changePassword(user, password, newPassword);\n  }\n\n  //---------------------------------------------------------------------------\n  // clientId\n  //\n  // Property for end-to-end tracing attribute.\n  //---------------------------------------------------------------------------\n  get clientId() {\n    return null;\n  }\n\n  set clientId(value) {\n    errors.assertPropValue(typeof value === 'string', \"clientId\");\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    this._impl.setClientId(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // clientInfo\n  //\n  // Property for end-to-end tracing attribute.\n  //---------------------------------------------------------------------------\n  get clientInfo() {\n    return null;\n  }\n\n  set clientInfo(value) {\n    errors.assertPropValue(typeof value === 'string', \"clientInfo\");\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    this._impl.setClientInfo(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Closes the connection and makes it unusable for further work.\n  //---------------------------------------------------------------------------\n  async close(a1) {\n    let options = {};\n\n    errors.assertArgCount(arguments, 0, 1);\n    if (arguments.length == 1) {\n      errors.assertParamValue(nodbUtil.isObject(a1), 1);\n      options = a1;\n      errors.assertParamPropBool(options, 1, \"drop\");\n    }\n    errors.assert(this._impl && !this._closing, errors.ERR_INVALID_CONNECTION);\n\n    this._closing = true;\n    try {\n      await this._impl.close(options);\n    } finally {\n      this._closing = false;\n    }\n\n    delete this._impl;\n    this._dbObjectClasses.clear();\n    this.emit('_afterConnClose');\n  }\n\n  //---------------------------------------------------------------------------\n  // commit()\n  //\n  // Commits the current transaction.\n  //---------------------------------------------------------------------------\n  async commit() {\n    errors.assertArgCount(arguments, 0, 0);\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    await this._impl.commit();\n  }\n\n  //---------------------------------------------------------------------------\n  // createLob()\n  //\n  // Creates a temporary LOB and returns it to the caller.\n  //---------------------------------------------------------------------------\n  async createLob(type) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(type === types.DB_TYPE_CLOB ||\n      type === types.DB_TYPE_BLOB ||\n      type === types.DB_TYPE_NCLOB, 1);\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    const lob = new Lob();\n    lob._setup(await this._impl.createLob(type), false);\n    return lob;\n  }\n\n  //---------------------------------------------------------------------------\n  // currentSchema\n  //\n  // Property for identifying the current schema to use in the database.\n  //---------------------------------------------------------------------------\n  get currentSchema() {\n    if (this._impl)\n      return this._impl.getCurrentSchema();\n    return undefined;\n  }\n\n  set currentSchema(value) {\n    errors.assertPropValue(typeof value === 'string', \"currentSchema\");\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    this._impl.setCurrentSchema(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // dbOp\n  //\n  // Property for end-to-end tracing attribute.\n  //---------------------------------------------------------------------------\n  get dbOp() {\n    return null;\n  }\n\n  set dbOp(value) {\n    errors.assertPropValue(typeof value === 'string', \"dbOp\");\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    this._impl.setDbOp(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // thin()\n  //\n  // return true, if driver mode is thin while acquiring connection\n  // return false, if driver mode is thick while acquiring connection\n  //---------------------------------------------------------------------------\n  get thin() {\n    return settings.thin;\n  }\n\n  //---------------------------------------------------------------------------\n  // ecid\n  //\n  // Property for end-to-end tracing attribute.\n  //---------------------------------------------------------------------------\n  get ecid() {\n    return null;\n  }\n\n  set ecid(value) {\n    errors.assertPropValue(typeof value === 'string', \"ecid\");\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    this._impl.setECID(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // decode()\n  //\n  // Decodes OSON Buffer to JS data type.\n  //---------------------------------------------------------------------------\n  decodeOSON(buf) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(Buffer.isBuffer(buf), 1);\n    const decoder = new oson.OsonDecoder(buf);\n    return decoder.decode();\n  }\n\n\n  //---------------------------------------------------------------------------\n  // encode()\n  //\n  // Encodes the JS value into OSON bytes.\n  //---------------------------------------------------------------------------\n  encodeOSON(value) {\n    const encoder = new oson.OsonEncoder();\n    return encoder.encode(transformer.transformJsonValue(value), this._impl._osonMaxFieldNameSize);\n  }\n\n  //---------------------------------------------------------------------------\n  // execute()\n  //\n  // Executes a SQL statement and returns the results.\n  //---------------------------------------------------------------------------\n  async execute(sql, a2, a3) {\n    const numIters = 1;\n    let binds = [];\n    let options = {};\n\n    // process arguments\n    if (nodbUtil.isObject(sql) && typeof sql.statement === 'string') {\n      errors.assertArgCount(arguments, 1, 2);\n      if (sql.values) {\n        binds = await this._processExecuteBinds(sql.values);\n      }\n      sql = sql.statement;\n      if (arguments.length == 2) {\n        options = this._verifyExecOpts(a2, false);\n      }\n    } else {\n      errors.assertArgCount(arguments, 1, 3);\n      errors.assertParamValue(typeof sql === 'string', 1);\n      if (arguments.length >= 2) {\n        binds = await this._processExecuteBinds(a2);\n      }\n      if (arguments.length == 3) {\n        options = this._verifyExecOpts(a3, false);\n      }\n    }\n    this._addDefaultsToExecOpts(options);\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n\n    // perform actual execute\n    let result;\n    try {\n      result = await this._impl.execute(sql, numIters, binds, options, false);\n    } catch (err) {\n      if (err.errorNum === 1406)\n        errors.throwErr(errors.ERR_INSUFFICIENT_BUFFER_FOR_BINDS);\n      throw err;\n    }\n\n    // convert ORA errors to NJS\n    if (result.warning) {\n      result.warning = errors.transformErr(result.warning);\n    }\n\n    // process queries; if a result set is not desired, fetch all of the rows\n    // from the result set and then destroy the result set\n    if (result.resultSet !== undefined) {\n      const resultSet = new ResultSet();\n      resultSet._setup(this, result.resultSet);\n      result.metaData = resultSet._impl.metaData;\n      if (options.resultSet) {\n        result.resultSet = resultSet;\n      } else {\n        result.rows = await resultSet._getAllRows();\n        delete result.resultSet;\n      }\n    }\n\n    // process output binds\n    if (result.outBinds !== undefined) {\n      for (const [key, value] of Object.entries(result.outBinds)) {\n        const val = this._transformOutBind(value, options);\n        result.outBinds[key] = val;\n      }\n    }\n\n    // process implicit results; ensure all implicit results have their fetch\n    // array size fixed, or, if a result set is not requested, that all rows\n    // are fetched\n    if (result.implicitResults) {\n      for (const [key, impl] of Object.entries(result.implicitResults)) {\n        const resultSet = new ResultSet();\n        resultSet._setup(this, impl);\n        if (options.resultSet) {\n          result.implicitResults[key] = resultSet;\n        } else {\n          result.implicitResults[key] = await resultSet._getAllRows();\n        }\n      }\n    }\n\n    return (result);\n  }\n\n  //---------------------------------------------------------------------------\n  // executeMany()\n  //\n  // Executes a SQL statement multiple times and returns the results.\n  //---------------------------------------------------------------------------\n  async executeMany(sql, bindsOrNumIters, a3) {\n    let options = {};\n    let binds = [];\n    let numIters;\n\n    errors.assertArgCount(arguments, 2, 3);\n    errors.assertParamValue(typeof sql === 'string', 1);\n    if (arguments.length == 3) {\n      options = this._verifyExecOpts(a3, true);\n    }\n    this._addDefaultsToExecOpts(options);\n    if (typeof bindsOrNumIters === 'number') {\n      errors.assertParamValue(Number.isInteger(bindsOrNumIters) &&\n        bindsOrNumIters > 0, 2);\n      numIters = bindsOrNumIters;\n      if (options.bindDefs !== undefined) {\n        binds = await this._processExecuteManyBinds([], options.bindDefs);\n      }\n    } else {\n      errors.assertParamValue(Array.isArray(bindsOrNumIters) &&\n        bindsOrNumIters.length > 0, 2);\n      numIters = bindsOrNumIters.length;\n      binds = await this._processExecuteManyBinds(bindsOrNumIters,\n        options.bindDefs);\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n\n    const result = await this._impl.execute(sql, numIters, binds, options,\n      true);\n\n    // convert ORA warnings to NJS\n    if (result.warning) {\n      result.warning = errors.transformErr(result.warning);\n    }\n\n    // process output binds\n    if (result.outBinds !== undefined) {\n      for (let i = 0; i < result.outBinds.length; i++) {\n        const outBind = result.outBinds[i];\n        for (const [key, value] of Object.entries(outBind)) {\n          outBind[key] = this._transformOutBind(value, options);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  //---------------------------------------------------------------------------\n  // externalName\n  //\n  // Property for identifying the external name to use in TPC logging.\n  //---------------------------------------------------------------------------\n  get externalName() {\n    if (this._impl)\n      return this._impl.getExternalName();\n    return undefined;\n  }\n\n  set externalName(value) {\n    errors.assertPropValue(typeof value === 'string', \"externalName\");\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    this._impl.setExternalName(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // dbDomain (READONLY)\n  //\n  // Property for identifying the dbDomain of the Oracle Database.\n  //---------------------------------------------------------------------------\n  get dbDomain() {\n    return this._impl && this._impl.getDbDomain();\n  }\n\n  //---------------------------------------------------------------------------\n  // dbName (READONLY)\n  //\n  // Property for identifying the dbName of the Oracle Database.\n  //---------------------------------------------------------------------------\n  get dbName() {\n    return this._impl && this._impl.getDbName();\n  }\n\n  //---------------------------------------------------------------------------\n  // getDbObjectClass()\n  //\n  // Returns a database object class given its name. The cache is searched\n  // first, but if not found, the database is queried and the result is cached\n  // using the type information (as well as the name for easier lookup later).\n  //---------------------------------------------------------------------------\n  async getDbObjectClass(name) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(typeof name === 'string', 1);\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    return await this._getDbObjectClassForName(name);\n  }\n\n  //---------------------------------------------------------------------------\n  // getQueue()\n  //\n  // Returns a queue with the specified name.\n  //---------------------------------------------------------------------------\n  async getQueue(name, a2) {\n    let options = {};\n\n    errors.assertArgCount(arguments, 1, 2);\n    errors.assertParamValue(typeof name === 'string', 1);\n    if (arguments.length == 2) {\n      errors.assertParamValue(nodbUtil.isObject(a2), 2);\n      options = {...a2};\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    const queue = new AqQueue();\n    await queue.create(this, name, options);\n    return queue;\n  }\n\n  //---------------------------------------------------------------------------\n  // getSodaDatabase()\n  //\n  // Returns a SodaDatabase object (high-level SODA object associated with\n  // the current connection).\n  //---------------------------------------------------------------------------\n  getSodaDatabase() {\n    errors.assertArgCount(arguments, 0, 0);\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    const sodaDb = new SodaDatabase();\n    sodaDb._impl = this._impl.getSodaDatabase();\n    return sodaDb;\n  }\n\n  //---------------------------------------------------------------------------\n  // getStatementInfo()\n  //\n  // Returns information about the statement.\n  //---------------------------------------------------------------------------\n  async getStatementInfo(sql) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(typeof sql === 'string', 1);\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    const info = await this._impl.getStatementInfo(sql);\n    if (info.metaData) {\n      for (let i = 0; i < info.metaData.length; i++) {\n        const m = info.metaData[i];\n        nodbUtil.addTypeProperties(m, \"dbType\");\n        m.fetchType = types.DB_TYPE_FETCH_TYPE_MAP.get(m.dbType);\n      }\n    }\n    return info;\n  }\n\n  //---------------------------------------------------------------------------\n  // instanceName\n  //\n  // Returns the Oracle Database instance name associated with the connection.\n  // This is the equivalent of the SQL expression:\n  // sys_context('userenv', 'instance_name')\n  //---------------------------------------------------------------------------\n  get instanceName() {\n    if (this._impl)\n      return this._impl.getInstanceName();\n    return undefined;\n  }\n\n  //---------------------------------------------------------------------------\n  // internalName\n  //\n  // Property for identifying the internal name to use in TPC logging.\n  //---------------------------------------------------------------------------\n  get internalName() {\n    if (this._impl)\n      return this._impl.getInternalName();\n    return undefined;\n  }\n\n  set internalName(value) {\n    errors.assertPropValue(typeof value === 'string', \"internalName\");\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    this._impl.setInternalName(value);\n  }\n\n  //--------------------------------------------------------------------------\n  // isHealthy()\n  //\n  // Returns the health status of the connection. If this function returns\n  // false, the caller should close the connection.\n  //---------------------------------------------------------------------------\n  isHealthy() {\n    return (this._impl !== undefined && !this._closing &&\n      this._impl.isHealthy());\n  }\n\n  //---------------------------------------------------------------------------\n  // maxOpenCursors\n  //\n  // Returns maximum number of cursors that can be opened in one session.\n  //---------------------------------------------------------------------------\n  get maxOpenCursors() {\n    return this._impl && this._impl.getMaxOpenCursors();\n  }\n\n  //---------------------------------------------------------------------------\n  // warning\n  //\n  // Returns warningInfo.\n  //---------------------------------------------------------------------------\n  get warning() {\n    let warning = this._impl.getWarning();\n    if (warning) {\n      // Make sure that warning code attribute is populated and ORA error\n      // is converted to NJS, if required\n      warning = errors.transformErr(warning);\n    }\n    return this._impl && warning;\n  }\n\n  //---------------------------------------------------------------------------\n  // module\n  //\n  // Property for end-to-end tracing attribute.\n  //---------------------------------------------------------------------------\n  get module() {\n    return null;\n  }\n\n  set module(value) {\n    errors.assertPropValue(typeof value === 'string', \"module\");\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    this._impl.setModule(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // oracleServerVersion\n  //\n  // Returns an integer identifying the Oracle Server version.\n  //---------------------------------------------------------------------------\n  get oracleServerVersion() {\n    if (this._impl)\n      return this._impl.getOracleServerVersion();\n    return undefined;\n  }\n\n  //---------------------------------------------------------------------------\n  // oracleServerVersionString\n  //\n  // Returns a string identifying the Oracle Server version.\n  //---------------------------------------------------------------------------\n  get oracleServerVersionString() {\n    if (this._impl)\n      return this._impl.getOracleServerVersionString();\n    return undefined;\n  }\n\n  //---------------------------------------------------------------------------\n  // serviceName\n  //\n  // Returns the Oracle Database service name associated with the connection.\n  //---------------------------------------------------------------------------\n  get serviceName() {\n    return this._impl && this._impl.getServiceName();\n  }\n\n  //---------------------------------------------------------------------------\n  // transactionInProgress\n  //\n  // Returns a boolean value based on the presence of an active transaction\n  // on the connection\n  //---------------------------------------------------------------------------\n  get transactionInProgress() {\n    return this._impl && this._impl.getTransactionInProgress();\n  }\n\n  //---------------------------------------------------------------------------\n  // ping()\n  //\n  // Sends a \"ping\" to the database to see if it is \"alive\".\n  //---------------------------------------------------------------------------\n  async ping() {\n    errors.assertArgCount(arguments, 0, 0);\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    await this._impl.ping();\n  }\n\n  //--------------------------------------------------------------------------\n  // queryStream()\n  //\n  // Similar to execute() except that it immediately returns a QueryStream\n  // object.\n  // ---------------------------------------------------------------------------\n  queryStream(sql, binds, options) {\n    errors.assertArgCount(arguments, 1, 3);\n    errors.assertParamValue(typeof sql === 'string', 1);\n    if (arguments.length == 3) {\n      errors.assertParamValue(nodbUtil.isObject(options), 3);\n      options = {...options};\n    } else {\n      options = {};\n    }\n    options.resultSet = true;\n\n    const stream = new QueryStream();\n\n    // calling execute() via nextTick to ensure that handlers are registered\n    // prior to the events being emitted\n    process.nextTick(async () => {\n      try {\n        const result = await this.execute(sql, binds || [], options);\n        if (!result.resultSet)\n          errors.throwErr(errors.ERR_NOT_A_QUERY);\n        stream._open(result.resultSet);\n      } catch (err) {\n        stream.destroy(err);\n        return;\n      }\n    });\n\n    return (stream);\n  }\n\n  //---------------------------------------------------------------------------\n  // rollback()\n  //\n  // Rolls back the current transaction.\n  //---------------------------------------------------------------------------\n  async rollback() {\n    errors.assertArgCount(arguments, 0, 0);\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    await this._impl.rollback();\n  }\n\n  //---------------------------------------------------------------------------\n  // shutdown()\n  //   Shuts down the database instance.\n  //---------------------------------------------------------------------------\n  async shutdown(a1) {\n    let mode = constants.SHUTDOWN_MODE_DEFAULT;\n\n    errors.assertArgCount(arguments, 0, 1);\n    if (a1 !== undefined) {\n      errors.assertParamValue(typeof mode === 'number', 1);\n      mode = a1;\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n\n    await this._impl.shutdown(mode);\n  }\n\n  //---------------------------------------------------------------------------\n  // startup()\n  //   Starts up the database instance.\n  //---------------------------------------------------------------------------\n  async startup(a1) {\n    let options = {};\n\n    errors.assertArgCount(arguments, 0, 1);\n    if (arguments.length == 1) {\n      errors.assertParamValue(typeof options === 'object', 1);\n      options = a1;\n      errors.assertParamPropBool(options, 1, \"force\");\n      errors.assertParamPropBool(options, 1, \"restrict\");\n      errors.assertParamPropString(options, 1, \"pfile\");\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n\n    await this._impl.startup(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // stmtCacheSize\n  //\n  // Property for statement cache size.\n  //---------------------------------------------------------------------------\n  get stmtCacheSize() {\n    if (this._impl)\n      return this._impl.getStmtCacheSize();\n    return undefined;\n  }\n\n  set stmtCacheSize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"stmtCacheSize\");\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    this._impl.setStmtCacheSize(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // subscribe()\n  //\n  // Creates a subscription which can be used to get notifications of database\n  // changes or of AQ messages available to dequeue.\n  //---------------------------------------------------------------------------\n  async subscribe(name, options) {\n    errors.assertArgCount(arguments, 2, 2);\n    errors.assertParamValue(typeof name === 'string', 1);\n    errors.assertParamValue(nodbUtil.isObject(options), 2);\n    options = {name: name, ...options};\n    errors.assertParamPropUnsignedInt(options, 2, \"namespace\");\n    if (options.namespace === undefined)\n      options.namespace = constants.SUBSCR_NAMESPACE_DBCHANGE;\n    errors.assertParamPropString(options, 2, \"ipAddress\");\n    errors.assertParamPropUnsignedInt(options, 2, \"port\");\n    errors.assertParamPropUnsignedInt(options, 2, \"timeout\");\n    errors.assertParamPropUnsignedInt(options, 2, \"operations\");\n    errors.assertParamPropUnsignedInt(options, 2, \"qos\");\n    errors.assertParamPropUnsignedInt(options, 2, \"groupingClass\");\n    errors.assertParamPropUnsignedInt(options, 2, \"groupingValue\");\n    errors.assertParamPropUnsignedInt(options, 2, \"groupingType\");\n    errors.assertParamPropBool(options, 2, \"clientInitiated\");\n    errors.assertParamPropFunction(options, 2, \"callback\");\n    errors.assert(options.callback, errors.ERR_MISSING_SUBSCR_CALLBACK);\n    if (options.namespace === constants.SUBSCR_NAMESPACE_DBCHANGE) {\n      errors.assertParamPropString(options, 2, \"sql\");\n      errors.assert(options.sql && options.sql.length > 0,\n        errors.ERR_MISSING_SUBSCR_SQL);\n      if (options.binds !== undefined) {\n        options.binds = await this._processExecuteBinds(options.binds);\n      }\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n\n    const inSubscr = _subscriptions.get(name);\n    const outValue = await this._impl.subscribe(inSubscr, options);\n    let subscription;\n    if (options.namespace === constants.SUBSCR_NAMESPACE_DBCHANGE) {\n      subscription = outValue.subscription;\n      delete outValue.subscription;\n    } else {\n      subscription = outValue;\n    }\n    _subscriptions.set(name, subscription);\n    return outValue;\n  }\n\n  //---------------------------------------------------------------------------\n  // tag\n  //\n  // Property for tag to associate with the connection.\n  //---------------------------------------------------------------------------\n  get tag() {\n    if (this._impl)\n      return this._impl.getTag();\n    return undefined;\n  }\n\n  set tag(value) {\n    errors.assertPropValue(typeof value === 'string', \"tag\");\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    this._impl.setTag(value);\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcBegin()\n  //\n  // Starts a two-phase-commit transaction.\n  //--------------------------------------------------------------------------\n  async tpcBegin(xid, flag, timeout) {\n    errors.assertArgCount(arguments, 1, 3);\n    errors.assertParamValue(nodbUtil.isXid(xid), 1);\n\n    if (arguments.length < 3) {\n      timeout = 60;   // seconds\n    } else {\n      errors.assertParamValue(typeof timeout === 'number', 3);\n    }\n\n    if (arguments.length < 2) {\n      flag = constants.TPC_BEGIN_NEW;\n    } else {\n      errors.assertParamValue(typeof flag === 'number', 2);\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    await this._impl.tpcBegin(xid, flag, timeout);\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcCommit()\n  //\n  // Commits a two-phase-commit transaction.\n  //---------------------------------------------------------------------------\n  async tpcCommit(xid, onePhase) {\n    errors.assertArgCount(arguments, 0, 2);\n\n    if (arguments.length < 2) {\n      onePhase = false;\n    } else {\n      errors.assertParamValue(typeof onePhase === 'boolean', 2);\n    }\n    if (arguments.length >= 1) {\n      errors.assertParamValue(nodbUtil.isXid(xid), 1);\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    await this._impl.tpcCommit(xid, onePhase);\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcEnd()\n  //\n  // Ends a two-phase-commit transaction.\n  //---------------------------------------------------------------------------\n  async tpcEnd(xid, flag) {\n    errors.assertArgCount(arguments, 0, 2);\n\n    if (arguments.length < 2) {\n      flag = constants.TPC_END_NORMAL;\n    } else {\n      errors.assertParamValue(typeof flag === 'number', 2);\n    }\n\n    if (arguments.length >= 1) {\n      errors.assertParamValue(nodbUtil.isXid(xid), 1);\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n\n    await this._impl.tpcEnd(xid, flag);\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcForget()\n  //\n  // Causes the server to forget a heuristically completed two-phase-commit\n  // transaction.\n  // ---------------------------------------------------------------------------\n  async tpcForget(xid) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(nodbUtil.isXid(xid), 1);\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n\n    await this._impl.tpcForget(xid);\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcPrepare()\n  //\n  // Prepares a two-phase-commit transaction for commit.\n  //---------------------------------------------------------------------------\n  async tpcPrepare(xid) {\n    errors.assertArgCount(arguments, 0, 1);\n    if (arguments.length >= 1) {\n      errors.assertParamValue(nodbUtil.isXid(xid), 1);\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n\n    return await this._impl.tpcPrepare(xid);\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcRecover()\n  //\n  // Returns a list of pending two-phase-commit transactions.\n  //---------------------------------------------------------------------------\n  async tpcRecover(asString) {\n    errors.assertArgCount(arguments, 0, 1);\n\n    if (arguments.length == 1) {\n      errors.assertParamValue(typeof asString === 'boolean', 1);\n    } else {\n      asString = true;\n    }\n\n    const sqlStr = `\n      SELECT\n          formatid as \"formatId\",\n          UTL_RAW.CAST_TO_VARCHAR2(globalid) as \"globalTransactionId\",\n          UTL_RAW.CAST_TO_VARCHAR2(branchid) as \"branchQualifier\"\n      FROM DBA_PENDING_TRANSACTIONS`;\n    const sqlBuf = `\n      SELECT\n          formatid as \"formatId\",\n          globalid as \"globalTransactionId\",\n          branchid as \"branchQualifier\"\n      FROM DBA_PENDING_TRANSACTIONS`;\n    const options = {\n      outFormat: constants.OUT_FORMAT_OBJECT,\n      resultSet: false\n    };\n\n    const result = await this.execute(asString ? sqlStr : sqlBuf, {}, options);\n    return result.rows;\n  }\n\n  //---------------------------------------------------------------------------\n  // tpcRollback()\n  //\n  // Rolls back the current changes in a two-phase-commit transaction.\n  //---------------------------------------------------------------------------\n  async tpcRollback(xid) {\n    errors.assertArgCount(arguments, 0, 1);\n    if (arguments.length == 1) {\n      errors.assertParamValue(nodbUtil.isXid(xid), 1);\n    }\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n\n    await this._impl.tpcRollback(xid);\n  }\n\n  //---------------------------------------------------------------------------\n  // unsubscribe()\n  //\n  // Destroy a subscription which was earlier created using subscribe().\n  //---------------------------------------------------------------------------\n  async unsubscribe(name) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(typeof name === 'string', 1);\n    errors.assert(this._impl, errors.ERR_INVALID_CONNECTION);\n    errors.assert(_subscriptions.has(name), errors.ERR_INVALID_SUBSCR);\n    await this._impl.unsubscribe(_subscriptions.get(name));\n    _subscriptions.delete(name);\n  }\n\n}\n\n// adjust functions to support the old callback style and to serialize calls\n// that cannot take place concurrently\n// NOTE: breakExecution() should not be serialized\nConnection.prototype.break =\n    nodbUtil.callbackify(Connection.prototype.breakExecution);\nnodbUtil.wrapFns(Connection.prototype,\n  \"changePassword\",\n  \"close\",\n  \"commit\",\n  \"createLob\",\n  \"execute\",\n  \"executeMany\",\n  \"getDbObjectClass\",\n  \"getQueue\",\n  \"getStatementInfo\",\n  \"ping\",\n  \"rollback\",\n  \"shutdown\",\n  \"startup\",\n  \"subscribe\",\n  \"tpcBegin\",\n  \"tpcCommit\",\n  \"tpcEnd\",\n  \"tpcForget\",\n  \"tpcPrepare\",\n  \"tpcRecover\",\n  \"tpcRollback\",\n  \"unsubscribe\");\n\n// add alias for release()\nConnection.prototype.release = Connection.prototype.close;\n\n// export just the Connection class\nmodule.exports = Connection;\n", "// Copyright (c) 2021, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst process = require('process');\nconst settings = require('./settings.js');\n\n//-----------------------------------------------------------------------------\n// class PoolStatistics\n//  collection of statistics metrics for Pool object\n//-----------------------------------------------------------------------------\n\nclass PoolStatistics {\n\n  constructor(pool) {\n    let averageTimeInQueue = 0;\n\n    if (pool._totalRequestsEnqueued !== 0) {\n      averageTimeInQueue = Math.round(pool._totalTimeInQueue /\n        pool._totalRequestsEnqueued);\n    }\n\n    this.gatheredDate = Date.now ();\n    this.upTime = this.gatheredDate - pool._createdDate;\n    this.upTimeSinceReset = this.gatheredDate - pool._timeOfReset;\n    this.connectionRequests = pool._totalConnectionRequests;\n    this.requestsEnqueued = pool._totalRequestsEnqueued;\n    this.requestsDequeued = pool._totalRequestsDequeued;\n    this.failedRequests = pool._totalFailedRequests;\n    this.rejectedRequests = pool._totalRequestsRejected;\n    this.requestTimeouts = pool._totalRequestTimeouts;\n    this.maximumQueueLength = pool._maximumQueueLength;\n    this.currentQueueLength = pool._connRequestQueue.length;\n    this.timeInQueue = pool._totalTimeInQueue;\n    this.minimumTimeInQueue = pool._minTimeInQueue;\n    this.maximumTimeInQueue = pool._maxTimeInQueue;\n    this.averageTimeInQueue = averageTimeInQueue;\n    this.connectionsInUse = pool.connectionsInUse;\n    this.connectionsOpen = pool.connectionsOpen;\n    this.connectString = pool.connectString;\n    this.edition = pool.edition;\n    this.events = pool.events;\n    this.externalAuth = pool.externalAuth;\n    this.homogeneous = pool.homogeneous;\n    this.poolAlias = pool.poolAlias;\n    this.poolIncrement = pool.poolIncrement;\n    this.poolMax = pool.poolMax;\n    this.poolMaxPerShard = pool.poolMaxPerShard;\n    this.poolMin = pool.poolMin;\n    this.poolPingInterval = pool.poolPingInterval;\n    this.poolPingTimeout = pool.poolPingTimeout;\n    this.poolTimeout = pool.poolTimeout;\n    this.queueMax = pool.queueMax;\n    this.queueTimeout = pool.queueTimeout;\n    this.sodaMetaDataCache = pool.sodaMetaDataCache;\n    this.stmtCacheSize = pool.stmtCacheSize;\n    this.user = pool.user;\n    this.threadPoolSize = process.env.UV_THREADPOOL_SIZE;\n    this.thin = settings.thin;\n  }\n\n  //---------------------------------------------------------------------------\n  // logStatistics()\n  //\n  // To print the statistics metrics of the pool\n  //---------------------------------------------------------------------------\n  logStatistics() {\n    console.log('\\nDriver:');\n    console.log('...thin mode:', this.thin);\n    console.log('Pool statistics:');\n    console.log('...gathered at:', new Date(this.gatheredDate).toISOString());\n    console.log('...up time (milliseconds):', this.upTime);\n    console.log('...up time from last reset (milliseconds)',\n      this.upTimeSinceReset);\n    console.log('...connection requests:', this.connectionRequests);\n    console.log('...requests enqueued:', this.requestsEnqueued);\n    console.log('...requests dequeued:', this.requestsDequeued);\n    console.log('...requests failed:', this.failedRequests);\n    console.log('...requests exceeding queueMax:', this.rejectedRequests);\n    console.log('...requests exceeding queueTimeout:', this.requestTimeouts);\n    console.log('...current queue length:', this.currentQueueLength);\n    console.log('...maximum queue length:', this.maximumQueueLength);\n    console.log('...sum of time in queue (milliseconds):', this.timeInQueue);\n    console.log('...minimum time in queue (milliseconds):',\n      this.minimumTimeInQueue);\n    console.log('...maximum time in queue (milliseconds):',\n      this.maximumTimeInQueue);\n    console.log('...average time in queue (milliseconds):',\n      this.averageTimeInQueue);\n    console.log('...pool connections in use:', this.connectionsInUse);\n    console.log('...pool connections open:', this.connectionsOpen);\n    console.log('Pool attributes:');\n    console.log('...connectString:', this.connectString);\n    console.log('...edition:', this.edition);\n    console.log('...events:', this.events);\n    console.log('...externalAuth:', this.externalAuth);\n    console.log('...homogeneous:', this.homogeneous);\n    console.log('...poolAlias:', this.poolAlias);\n    console.log('...poolIncrement:', this.poolIncrement);\n    console.log('...poolMax:', this.poolMax);\n    console.log('...poolMaxPerShard:', this.poolMaxPerShard);\n    console.log('...poolMin:', this.poolMin);\n    console.log('...poolPingInterval (seconds):', this.poolPingInterval);\n    console.log('...poolPingTimeout (milliseconds):', this.poolPingTimeout);\n    console.log('...poolTimeout (seconds):', this.poolTimeout);\n    console.log('...queueMax:', this.queueMax);\n    console.log('...queueTimeout (milliseconds):', this.queueTimeout);\n    console.log('...sessionCallback:', this.sessionCallback);\n    console.log('...sodaMetaDataCache:', this.sodaMetaDataCache);\n    console.log('...stmtCacheSize:', this.stmtCacheSize);\n    console.log('...user:', this.user);\n    console.log('Related environment variables:');\n    console.log('...UV_THREADPOOL_SIZE:', this.threadPoolSize);\n  }\n}\n\nmodule.exports = PoolStatistics;\n", "// Copyright (c) 2016, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Connection = require('./connection.js');\nconst EventEmitter = require('events');\nconst constants = require('./constants.js');\nconst errors = require('./errors.js');\nconst settings = require('./settings.js');\nconst nodbUtil = require('./util.js');\nconst impl = require('./impl');\nconst PoolStatistics = require('./poolStatistics.js');\n\n\nclass Pool extends EventEmitter {\n\n  constructor() {\n    super();\n    this._impl = new impl.PoolImpl();\n    this._queueMax = 0;\n    this._queueTimeout = 0;\n    this._enableStatistics = false;\n    this._timeOfReset = this._createdDate = Date.now();\n    this._sessionCallback = undefined;\n    this._connRequestQueue = [];\n    this._connectionClass = settings.connectionClass;\n  }\n\n  //---------------------------------------------------------------------------\n  // _checkPoolOpen()\n  //\n  // Check if the pool is open (not draining/reconfiguring/closed) and throw an\n  // appropriate exception if not.\n  //---------------------------------------------------------------------------\n  _checkPoolOpen(ignoreReconfiguring) {\n    if (this.status === constants.POOL_STATUS_DRAINING) {\n      errors.throwErr(errors.ERR_POOL_CLOSING);\n    } else if (this.status === constants.POOL_STATUS_CLOSED) {\n      errors.throwErr(errors.ERR_POOL_CLOSED);\n    } else if (!ignoreReconfiguring) {\n      if (this.status === constants.POOL_STATUS_RECONFIGURING) {\n        errors.throwErr(errors.ERR_POOL_RECONFIGURING);\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _checkRequestQueue()\n  //\n  // When a connection is returned to the pool, this method is called (via an\n  // event handler) to determine when requests for connections should be\n  // resumed and cancels any timeout that may have been associated with the\n  // request. This method is also called from reconfigure() so that waiting\n  // connection requests can be processed. Note the use of a local variable for\n  // the number of connections out. This is because the connection requests will\n  // not resume until after the loop is finished, and therefore the number of\n  // connections the pool thinks is out will not be incremented.\n  //---------------------------------------------------------------------------\n  _checkRequestQueue() {\n    let connectionsOut = this._connectionsOut;\n    while (this._connRequestQueue.length > 0 && connectionsOut < this.poolMax) {\n      connectionsOut += 1;\n      const payload = this._connRequestQueue.shift();\n      if (this._enableStatistics) {\n        this._totalRequestsDequeued += 1;\n        this._updateWaitStatistics(payload);\n      }\n      if (payload.timeoutHandle) {\n        clearTimeout(payload.timeoutHandle);\n      }\n      // inform the waiter that processing can continue\n      payload.resolve();\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _enableStats (DEPRECATED)\n  //\n  // Property for whether statistics are enabled on the pool.\n  //---------------------------------------------------------------------------\n  get _enableStats() {\n    return this._enableStatistics;\n  }\n\n  //---------------------------------------------------------------------------\n  // _resetStatistics()\n  //  To initialize the counters/timers\n  //---------------------------------------------------------------------------\n  _resetStatistics() {\n    this._timeOfReset = Date.now();\n    this._totalConnectionRequests = 0;\n    this._totalRequestsEnqueued = 0;\n    this._totalRequestsDequeued = 0;\n    this._totalFailedRequests = 0;\n    this._totalRequestsRejected = 0;\n    this._totalRequestTimeouts = 0;\n    this._maximumQueueLength = this._connRequestQueue.length;\n    this._totalTimeInQueue = 0;\n    this._minTimeInQueue = 0;\n    this._maxTimeInQueue = 0;\n  }\n\n  //---------------------------------------------------------------------------\n  // _setup()\n  //\n  // Sets up the pool instance with additional attributes used for logging\n  // statistics and managing the connection queue.\n  //---------------------------------------------------------------------------\n  _setup(options, poolAlias) {\n    this._queueTimeout = options.queueTimeout;\n    this._queueMax = options.queueMax;\n    this._enableStatistics = options.enableStatistics;\n    this._edition = options.edition;\n    this._eventsFlag = options.events;\n    this._externalAuth = options.externalAuth;\n    this._homogeneous = options.homogeneous;\n    this._user = options.user;\n    this._connectString = options.connectString;\n    this._status = constants.POOL_STATUS_OPEN;\n    this._connectionsOut = 0;\n    this._poolAlias = poolAlias;\n\n    // register event handler for when request queue should be checked\n    this.on('_checkRequestQueue', this._checkRequestQueue);\n\n    this._resetStatistics();\n\n  }\n\n  //---------------------------------------------------------------------------\n  // _updateWaitStatistics()\n  //\n  // Update pool wait statistics after a connect request has spent some time in\n  // the queue.\n  //---------------------------------------------------------------------------\n  _updateWaitStatistics(payload) {\n    const waitTime = Date.now() - payload.enqueuedTime;\n    this._totalTimeInQueue += waitTime;\n    if (this._minTimeInQueue === 0) {\n      this._minTimeInQueue = waitTime;\n    } else {\n      this._minTimeInQueue = Math.min(this._minTimeInQueue, waitTime);\n    }\n    this._maxTimeInQueue = Math.max(this._maxTimeInQueue, waitTime);\n  }\n\n  //---------------------------------------------------------------------------\n  // _verifyGetConnectionOptions()\n  //\n  // Verify the getConnection() options are acceptable. Performs any\n  // transformations that are needed before returning the options to the\n  // caller.\n  //---------------------------------------------------------------------------\n  _verifyGetConnectionOptions(options) {\n\n    // define normalized options (value returned to caller)\n    const outOptions = {};\n\n    // only one of \"user\" and \"username\" may be specified (and must be strings)\n    if (options.user !== undefined) {\n      errors.assertParamPropValue(typeof options.user === 'string', 1, \"user\");\n      outOptions.user = options.user;\n    }\n    if (options.username !== undefined) {\n      errors.assert(outOptions.user === undefined, errors.ERR_DBL_USER);\n      errors.assertParamPropValue(typeof options.username === 'string', 1,\n        \"username\");\n      outOptions.user = options.username;\n    }\n\n    if (this.externalAuth &&\n      outOptions.user && (outOptions.user[0] !== '['\n        || outOptions.user.slice(-1) !== ']')) {\n      // username is not enclosed in [].\n      errors.throwErr(errors.ERR_WRONG_USER_FORMAT_EXTAUTH_PROXY);\n    }\n\n    // password must be a string\n    if (options.password !== undefined) {\n      errors.assertParamPropValue(typeof options.password === 'string', 1,\n        \"password\");\n      if (this.externalAuth) {\n        errors.throwErr(errors.ERR_WRONG_CRED_FOR_EXTAUTH);\n      }\n      outOptions.password = options.password;\n    }\n\n    // tag must be a string\n    if (options.tag !== undefined) {\n      errors.assertParamPropValue(typeof options.tag === 'string', 1, \"tag\");\n      outOptions.tag = options.tag;\n    }\n\n    // matchAnyTag must be a boolean\n    if (options.matchAnyTag !== undefined) {\n      errors.assertParamPropValue(typeof options.matchAnyTag === 'boolean', 1,\n        \"matchAnyTag\");\n      outOptions.matchAnyTag = options.matchAnyTag;\n    }\n\n    // shardingKey must be an array of values\n    if (options.shardingKey !== undefined) {\n      const value = options.shardingKey;\n      errors.assertParamPropValue(nodbUtil.isShardingKey(value), 1,\n        \"shardingKey\");\n      outOptions.shardingKey = options.shardingKey;\n    }\n\n    // superShardingKey must be an array of values\n    if (options.superShardingKey !== undefined) {\n      const value = options.superShardingKey;\n      errors.assertParamPropValue(nodbUtil.isShardingKey(value), 1,\n        \"superShardingKey\");\n      outOptions.superShardingKey = options.superShardingKey;\n    }\n\n    // privilege must be one of a set of named constants\n    if (options.privilege !== undefined) {\n      errors.assertParamPropValue(nodbUtil.isPrivilege(options.privilege), 1,\n        \"privilege\");\n      outOptions.privilege = options.privilege;\n    }\n\n    return outOptions;\n  }\n\n  //---------------------------------------------------------------------------\n  // close()\n  //\n  // Close the pool, optionally allowing for a period of time to pass for\n  // connections to \"drain\" from the pool.\n  //---------------------------------------------------------------------------\n  async close(a1) {\n    let drainTime = 0;\n    let forceClose = false;\n\n    // check arguments\n    errors.assertArgCount(arguments, 0, 1);\n    if (arguments.length == 1) {\n\n      // drain time must be a valid number; timeouts larger than a 32-bit signed\n      // integer are not supported\n      errors.assertParamValue(typeof a1 === 'number', 1);\n      if (a1 < 0 || isNaN(a1) || a1 > 2 ** 31) {\n        errors.throwErr(errors.ERR_INVALID_PARAMETER_VALUE, 1);\n      }\n\n      // no need to worry about drain time if no connections are out!\n      forceClose = true;\n      if (this._connectionsOut > 0) {\n        drainTime = a1 * 1000;\n      }\n\n    }\n\n    // if the pool is draining/reconfiguring/closed, throw an appropriate error\n    this._checkPoolOpen(false);\n\n    // wait for the pool to become empty or for the drain timeout to expire\n    // (whichever comes first)\n    if (drainTime > 0) {\n      this._status = constants.POOL_STATUS_DRAINING;\n      await new Promise(resolve => {\n        const timeout = setTimeout(() => {\n          this.removeAllListeners('_allCheckedIn');\n          resolve();\n        }, drainTime);\n        this.once('_allCheckedIn', () => {\n          clearTimeout(timeout);\n          resolve();\n        });\n      });\n    }\n\n    // if any connections are still out and the pool is not being force closed,\n    // throw an exception\n    if (!forceClose && this._connectionsOut > 0) {\n      errors.throwErr(errors.ERR_POOL_HAS_BUSY_CONNECTIONS);\n    }\n\n    // close the pool\n    await this._impl.close();\n    this._status = constants.POOL_STATUS_CLOSED;\n    this.emit('_afterPoolClose');\n\n  }\n\n  //---------------------------------------------------------------------------\n  // connectionsInUse\n  //\n  // Property for the number of connections in use by the pool.\n  //---------------------------------------------------------------------------\n  get connectionsInUse() {\n    return this._impl.getConnectionsInUse();\n  }\n\n  //---------------------------------------------------------------------------\n  // connectionsOpen\n  //\n  // Property for the number of connections opened by the pool.\n  //---------------------------------------------------------------------------\n  get connectionsOpen() {\n    return this._impl.getConnectionsOpen();\n  }\n\n  //---------------------------------------------------------------------------\n  // connectString\n  //\n  // Property for the connect string used to create the pool.\n  //---------------------------------------------------------------------------\n  get connectString() {\n    return this._connectString;\n  }\n\n  //---------------------------------------------------------------------------\n  // thin()\n  //\n  // return true, if driver mode is thin while creating pool\n  // return false, if driver mode is thick while creating pool\n  //---------------------------------------------------------------------------\n  get thin() {\n    return settings.thin;\n  }\n\n  //---------------------------------------------------------------------------\n  // edition\n  //\n  // Property for the edition used to create the pool.\n  //---------------------------------------------------------------------------\n  get edition() {\n    return this._edition;\n  }\n\n  //---------------------------------------------------------------------------\n  // enableStatistics\n  //\n  // Property for whether statistics are enabled on the pool.\n  //---------------------------------------------------------------------------\n  get enableStatistics() {\n    return this._enableStatistics;\n  }\n\n  //---------------------------------------------------------------------------\n  // events\n  //\n  // Property for the events flag value used to create the pool.\n  //---------------------------------------------------------------------------\n  get events() {\n    return this._eventsFlag;\n  }\n\n  //---------------------------------------------------------------------------\n  // externalAuth\n  //\n  // Property for the externalAuth flag value used to create the pool.\n  //---------------------------------------------------------------------------\n  get externalAuth() {\n    return this._externalAuth;\n  }\n\n  //---------------------------------------------------------------------------\n  // getConnection()\n  //\n  // Gets a connection from the pool and returns it to the caller. If there are\n  // fewer connections out than the poolMax setting, then the request will\n  // return immediately; otherwise, the request will be queued for up to\n  // queueTimeout milliseconds.\n  //---------------------------------------------------------------------------\n  async getConnection(a1) {\n    let poolMax;\n    let options = {};\n\n    // check arguments\n    errors.assertArgCount(arguments, 0, 1);\n    if (arguments.length == 1) {\n      errors.assertParamValue(nodbUtil.isObject(a1), 1);\n      options = this._verifyGetConnectionOptions(a1);\n    }\n\n    // get connection class value from pool\n    options.connectionClass = this._connectionClass;\n\n    // if pool is draining/closed, throw an appropriate error\n    this._checkPoolOpen(true);\n\n    // manage stats, if applicable\n    if (this._enableStatistics) {\n      this._totalConnectionRequests += 1;\n    }\n\n    // getting the poolMax setting on the pool may fail if the pool is no\n    // longer valid\n    try {\n      poolMax = this.poolMax;\n    } catch (err) {\n      if (this._enableStatistics) {\n        this._totalFailedRequests += 1;\n      }\n      throw err;\n    }\n\n    if (this._connectionsOut >= poolMax ||\n        this.status === constants.POOL_STATUS_RECONFIGURING) {\n\n      // when the queue is huge, throw error early without waiting for queue\n      // timeout\n      if (this._connRequestQueue.length >= this._queueMax &&\n          this._queueMax >= 0) {\n        if (this._enableStatistics) {\n          this._totalRequestsRejected += 1;\n        }\n        errors.throwErr(errors.ERR_QUEUE_MAX_EXCEEDED, this._queueMax);\n      }\n\n      // if too many connections are out, wait until room is made available or\n      // the queue timeout expires\n      await new Promise((resolve, reject) => {\n\n        // set up a payload which will be added to the queue for processing\n        const payload = { resolve: resolve, reject: reject };\n\n        // if using a queue timeout, establish the timeout so that when it\n        // expires the payload will be removed from the queue and an exception\n        // thrown\n        if (this._queueTimeout !== 0) {\n          payload.timeoutHandle = setTimeout(() => {\n            const ix = this._connRequestQueue.indexOf(payload);\n            if (ix >= 0) {\n              this._connRequestQueue.splice(ix, 1);\n            }\n            if (this._enableStatistics) {\n              this._totalRequestTimeouts += 1;\n              this._updateWaitStatistics(payload);\n            }\n            try {\n              errors.throwErr(errors.ERR_CONN_REQUEST_TIMEOUT,\n                this._queueTimeout);\n            } catch (err) {\n              reject(err);\n            }\n          }, this._queueTimeout);\n        }\n\n        // add payload to the queue\n        this._connRequestQueue.push(payload);\n        if (this._enableStatistics) {\n          payload.enqueuedTime = Date.now();\n          this._totalRequestsEnqueued += 1;\n          this._maximumQueueLength = Math.max(this._maximumQueueLength,\n            this._connRequestQueue.length);\n        }\n\n      });\n\n      // check if pool is draining/closed after delay has\n      // completed and throw an appropriate error\n      this._checkPoolOpen(true);\n\n    }\n\n    // room is available in the queue, so proceed to acquire a connection from\n    // the pool; adjust the connections out immediately in order to ensure that\n    // another attempt doesn't proceed while this one is underway\n    this._connectionsOut += 1;\n    try {\n\n      // acquire connection from the pool\n      const conn = new Connection();\n      conn._impl = await this._impl.getConnection(options);\n      conn._pool = this;\n\n      // invoke tag fixup callback method if one has been specified and the\n      // actual tag on the connection doesn't match the one requested, or the\n      // connection is freshly created; if the callback fails, close the\n      // connection and remove it from the pool\n      const requestedTag = options.tag || \"\";\n      if (typeof this.sessionCallback === 'function' &&\n          (conn._impl._newSession || conn.tag != requestedTag)) {\n        try {\n          await new Promise((resolve, reject) => {\n            this.sessionCallback(conn, requestedTag, function(err) {\n              if (err) {\n                reject(err);\n              } else {\n                resolve();\n              }\n            });\n          });\n        } catch (err) {\n          await conn.close({ drop: true });\n          throw err;\n        }\n      }\n\n      // when connection is closed, check to see if another request should be\n      // processed and update any stats, as needed\n      conn.on('_afterConnClose', () => {\n        this._connectionsOut -= 1;\n        this.emit('_checkRequestQueue');\n        if (this._connectionsOut == 0) {\n          this.emit('_allCheckedIn');\n        }\n      });\n\n      return (conn);\n\n    } catch (err) {\n      this._connectionsOut -= 1;\n      if (this._enableStatistics) {\n        this._totalFailedRequests += 1;\n      }\n      this.emit('_checkRequestQueue');\n      throw err;\n    }\n\n  }\n\n  //---------------------------------------------------------------------------\n  // getStatistics()\n  //\n  // Method to obtain a JSON object with all statistical metrics and pool\n  // properties\n  //---------------------------------------------------------------------------\n  getStatistics() {\n    this._checkPoolOpen(false);\n\n    if (this._enableStatistics !== true) {\n      return null;\n    }\n    return new PoolStatistics(this);\n  }\n\n  //---------------------------------------------------------------------------\n  // homogeneous\n  //\n  // Property for the homogeneous flag value used to create the pool.\n  //---------------------------------------------------------------------------\n  get homogeneous() {\n    return this._homogeneous;\n  }\n\n  //---------------------------------------------------------------------------\n  // logStatistics()\n  //\n  // Method to print statistical related information and pool related\n  // information when enableStatistics is set to true.\n  //\n  // NOTE: This function replaces the DEPRECATED _logStats() function.\n  //---------------------------------------------------------------------------\n  logStatistics() {\n    const stats = this.getStatistics();\n    if (stats === null) {\n      errors.throwErr(errors.ERR_POOL_STATISTICS_DISABLED);\n    }\n    stats.logStatistics();\n  }\n\n  //---------------------------------------------------------------------------\n  // poolAlias\n  //\n  // Property for the alias assigned to the pool.\n  // ---------------------------------------------------------------------------\n  get poolAlias() {\n    return this._poolAlias;\n  }\n\n  //---------------------------------------------------------------------------\n  // poolIncrement\n  //\n  // Property for the number of connections to create each time the pool needs\n  // to grow.\n  // ---------------------------------------------------------------------------\n  get poolIncrement() {\n    return this._impl.getPoolIncrement();\n  }\n\n  //---------------------------------------------------------------------------\n  // poolMax\n  //\n  // Property for the maximum number of connections allowed in the pool.\n  //---------------------------------------------------------------------------\n  get poolMax() {\n    return this._impl.getPoolMax();\n  }\n\n  //---------------------------------------------------------------------------\n  // poolMaxPerShard\n  //\n  // Property for the maximum number of connections allowed in the pool for\n  // each shard.\n  //---------------------------------------------------------------------------\n  get poolMaxPerShard() {\n    return this._impl.getPoolMaxPerShard();\n  }\n\n  //---------------------------------------------------------------------------\n  // poolMin\n  //\n  // Property for the minimum number of connections allowed in the pool.\n  //---------------------------------------------------------------------------\n  get poolMin() {\n    return this._impl.getPoolMin();\n  }\n\n  //---------------------------------------------------------------------------\n  // poolPingInterval\n  //\n  // Property for the ping interval to use for the pool.\n  //---------------------------------------------------------------------------\n  get poolPingInterval() {\n    return this._impl.getPoolPingInterval();\n  }\n\n  //---------------------------------------------------------------------------\n  // poolPingTimeout\n  //\n  // Property for the ping timeout associated with the pool.\n  //---------------------------------------------------------------------------\n  get poolPingTimeout() {\n    return this._impl.getPoolPingTimeout();\n  }\n\n  //---------------------------------------------------------------------------\n  // poolTimeout\n  //\n  // Property for the timeout associated with the pool.\n  //---------------------------------------------------------------------------\n  get poolTimeout() {\n    return this._impl.getPoolTimeout();\n  }\n\n  //---------------------------------------------------------------------------\n  // queueMax\n  //\n  // Property for the maximum number of pending pool connections that can be\n  // queued.\n  //---------------------------------------------------------------------------\n  get queueMax() {\n    return this._queueMax;\n  }\n\n  //---------------------------------------------------------------------------\n  // queueTimeout\n  //\n  // Property for the milliseconds a connection request can spend in the queue\n  // before an exception is thrown.\n  //---------------------------------------------------------------------------\n  get queueTimeout() {\n    return this._queueTimeout;\n  }\n\n  //---------------------------------------------------------------------------\n  // reconfigure()\n  //\n  // Reconfigure the pool, change the value for given pool-properties.\n  //---------------------------------------------------------------------------\n  async reconfigure(options) {\n\n    // check arguments\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(nodbUtil.isObject(options));\n    errors.assertParamPropUnsignedInt(options, 1, \"queueMax\");\n    errors.assertParamPropUnsignedInt(options, 1, \"queueTimeout\");\n    errors.assertParamPropBool(options, 1, \"enableStatistics\");\n    errors.assertParamPropBool(options, 1, \"resetStatistics\");\n    errors.assertParamPropUnsignedInt(options, 1, \"poolMin\");\n    errors.assertParamPropUnsignedIntNonZero(options, 1, \"poolMax\");\n    errors.assertParamPropUnsignedInt(options, 1, \"poolMaxPerShard\");\n    errors.assertParamPropUnsignedInt(options, 1, \"poolIncrement\");\n    errors.assertParamPropInt(options, 1, \"poolPingInterval\");\n    errors.assertParamPropUnsignedInt(options, 1, \"poolTimeout\");\n    errors.assertParamPropUnsignedInt(options, 1, \"stmtCacheSize\");\n    errors.assertParamPropBool(options, 1, \"sodaMetaDataCache\");\n\n    // poolMax must be greater than or equal to poolMin\n    if (options.poolMin > options.poolMax) {\n      errors.throwErr(errors.ERR_INVALID_NUMBER_OF_CONNECTIONS, options.poolMax,\n        options.poolMin);\n    }\n\n    // reconfiguration can happen only when status is OPEN\n    this._checkPoolOpen(false);\n\n    this._status = constants.POOL_STATUS_RECONFIGURING;\n    try {\n      // poolMin/poolMax/poolIncrement/poolPingInterval/poolTimeout/\n      // poolMaxPerShard/stmtCacheSize/sodaMetaDataCache parameters\n      await this._impl.reconfigure(options);\n\n      // pool JS parameters: queueMax, queueTimeout, enableStatistics,\n      // resetStatistics\n\n      // reset the statistics-metrics only if 'resetStatistics' is true or\n      // 'enableStatistics' is being set to true\n      if (options.resetStatistics == true ||\n          (options.enableStatistics == true &&\n          this._enableStatistics == false)) {\n        this._resetStatistics();\n      }\n\n      if (options.queueMax !== undefined) {\n        this._queueMax = options.queueMax;\n      }\n\n      if (options.queueTimeout !== undefined) {\n        this._queueTimeout = options.queueTimeout;\n      }\n\n      if (options.enableStatistics !== undefined) {\n        this._enableStatistics = options.enableStatistics;\n      }\n    } finally {\n      this._status = constants.POOL_STATUS_OPEN;\n    }\n    this.emit('_checkRequestQueue');\n  }\n\n  //---------------------------------------------------------------------------\n  // sessionCallback\n  //\n  // Property for the session callback associated with the pool.\n  //---------------------------------------------------------------------------\n  get sessionCallback() {\n    return this._sessionCallback;\n  }\n\n  //---------------------------------------------------------------------------\n  // setAccessToken()\n  //\n  // Set parameters for token based authentication.\n  //---------------------------------------------------------------------------\n  async setAccessToken(options) {\n    errors.assertArgCount(arguments, 1, 1);\n    errors.assertParamValue(nodbUtil.isObject(options), 1);\n    errors.assertParamPropString(options, 1, \"token\");\n    errors.assertParamPropString(options, 1, \"privateKey\");\n    await this._impl.setAccessToken(options);\n  }\n\n  //---------------------------------------------------------------------------\n  // sodaMetaDataCache\n  //\n  // Property for whether the SODA metadata cache is enabled or not.\n  //---------------------------------------------------------------------------\n  get sodaMetaDataCache() {\n    return this._impl.getSodaMetaDataCache();\n  }\n\n  //---------------------------------------------------------------------------\n  // status\n  //\n  // Property for the pool's status.\n  //---------------------------------------------------------------------------\n  get status() {\n    return this._status;\n  }\n\n  //---------------------------------------------------------------------------\n  // stmtCacheSize\n  //\n  // Property for the size of the statement cache to use when creating\n  // connections in the pool.\n  //---------------------------------------------------------------------------\n  get stmtCacheSize() {\n    return this._impl.getStmtCacheSize();\n  }\n\n  //---------------------------------------------------------------------------\n  // user\n  //\n  // Property for the user used to create the pool.\n  //---------------------------------------------------------------------------\n  get user() {\n    return this._user;\n  }\n\n}\n\nPool.prototype.close = nodbUtil.callbackify(Pool.prototype.close);\nPool.prototype.getConnection = nodbUtil.callbackify(Pool.prototype.getConnection);\nPool.prototype.reconfigure = nodbUtil.callbackify(Pool.prototype.reconfigure);\nPool.prototype.setAccessToken = nodbUtil.callbackify(Pool.prototype.setAccessToken);\n\n// DEPRECATED aliases\nPool.prototype.terminate = Pool.prototype.close;\nPool.prototype._logStats = Pool.prototype.logStatistics;\n\nmodule.exports = Pool;\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"path\" has been externalized for browser compatibility. Cannot access \"path.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require('../../constants.js');\nconst dataHandlerConstants = require('../../impl/datahandlers/constants.js');\n\nmodule.exports = {\n\n  // constants from upper level exposed here in order to avoid having multiple\n  // files containing constants\n  BIND_IN: constants.BIND_IN,\n  BIND_INOUT: constants.BIND_INOUT,\n  BIND_OUT: constants.BIND_OUT,\n  CLIENT_VERSION:\n    constants.VERSION_MAJOR << 24 |\n    constants.VERSION_MINOR << 20 |\n    constants.VERSION_PATCH << 12,\n  CSFRM_IMPLICIT: constants.CSFRM_IMPLICIT,\n  CSFRM_NCHAR: constants.CSFRM_NCHAR,\n  DRIVER_NAME: constants.DEFAULT_DRIVER_NAME + ' thn',\n  PURITY_DEFAULT: constants.PURITY_DEFAULT,\n  PURITY_NEW: constants.PURITY_NEW,\n  PURITY_SELF: constants.PURITY_SELF,\n  SYSASM: constants.SYSASM,\n  SYSBKP: constants.SYSBKP,\n  SYSDBA: constants.SYSDBA,\n  SYSDG: constants.SYSDG,\n  SYSKM: constants.SYSKM,\n  SYSOPER: constants.SYSOPER,\n  SYSRAC: constants.SYSRAC,\n\n  // authentication modes\n  AUTH_MODE_DEFAULT: 0,\n  AUTH_MODE_PRELIM: 0x00000008,\n  AUTH_MODE_SYSASM: 0x00008000,\n  AUTH_MODE_SYSBKP: 0x00020000,\n  AUTH_MODE_SYSDBA: 0x00000002,\n  AUTH_MODE_SYSDGD: 0x00040000,\n  AUTH_MODE_SYSKMT: 0x00080000,\n  AUTH_MODE_SYSOPER: 0x00000004,\n  AUTH_MODE_SYSRAC: 0x00100000,\n\n  // TTC authentication modes\n  TNS_AUTH_MODE_LOGON: 0x00000001,\n  TNS_AUTH_MODE_CHANGE_PASSWORD: 0x00000002,\n  TNS_AUTH_MODE_SYSDBA: 0x00000020,\n  TNS_AUTH_MODE_SYSOPER: 0x00000040,\n  TNS_AUTH_MODE_PRELIM: 0x00000080,\n  TNS_AUTH_MODE_WITH_PASSWORD: 0x00000100,\n  TNS_AUTH_MODE_SYSASM: 0x00400000,\n  TNS_AUTH_MODE_SYSBKP: 0x01000000,\n  TNS_AUTH_MODE_SYSDGD: 0x02000000,\n  TNS_AUTH_MODE_SYSKMT: 0x04000000,\n  TNS_AUTH_MODE_SYSRAC: 0x08000000,\n  TNS_AUTH_MODE_IAM_TOKEN: 0x20000000,\n\n  // packet types\n  TNS_PACKET_TYPE_CONNECT: 1,\n  TNS_PACKET_TYPE_ACCEPT: 2,\n  TNS_PACKET_TYPE_REFUSE: 4,\n  TNS_PACKET_TYPE_REDIRECT: 5,\n  TNS_PACKET_TYPE_DATA: 6,\n  TNS_PACKET_TYPE_RESEND: 11,\n  TNS_PACKET_TYPE_MARKER: 12,\n  TNS_PACKET_TYPE_CONTROL: 14,\n\n  // data types\n  TNS_DATA_TYPE_DEFAULT: 0,\n  TNS_DATA_TYPE_VARCHAR: 1,\n  TNS_DATA_TYPE_NUMBER: 2,\n  TNS_DATA_TYPE_BINARY_INTEGER: 3,\n  TNS_DATA_TYPE_FLOAT: 4,\n  TNS_DATA_TYPE_STR: 5,\n  TNS_DATA_TYPE_VNU: 6,\n  TNS_DATA_TYPE_PDN: 7,\n  TNS_DATA_TYPE_LONG: 8,\n  TNS_DATA_TYPE_VCS: 9,\n  TNS_DATA_TYPE_TIDDEF: 10,\n  TNS_DATA_TYPE_ROWID: 11,\n  TNS_DATA_TYPE_DATE: 12,\n  TNS_DATA_TYPE_VBI: 15,\n  TNS_DATA_TYPE_RAW: 23,\n  TNS_DATA_TYPE_LONG_RAW: 24,\n  TNS_DATA_TYPE_UB2: 25,\n  TNS_DATA_TYPE_UB4: 26,\n  TNS_DATA_TYPE_SB1: 27,\n  TNS_DATA_TYPE_SB2: 28,\n  TNS_DATA_TYPE_SB4: 29,\n  TNS_DATA_TYPE_SWORD: 30,\n  TNS_DATA_TYPE_UWORD: 31,\n  TNS_DATA_TYPE_PTRB: 32,\n  TNS_DATA_TYPE_PTRW: 33,\n  TNS_DATA_TYPE_OER8: 34 + 256,\n  TNS_DATA_TYPE_FUN: 35 + 256,\n  TNS_DATA_TYPE_AUA: 36 + 256,\n  TNS_DATA_TYPE_RXH7: 37 + 256,\n  TNS_DATA_TYPE_NA6: 38 + 256,\n  TNS_DATA_TYPE_OAC9: 39,\n  TNS_DATA_TYPE_AMS: 40,\n  TNS_DATA_TYPE_BRN: 41,\n  TNS_DATA_TYPE_BRP: 42 + 256,\n  TNS_DATA_TYPE_BRV: 43 + 256,\n  TNS_DATA_TYPE_KVA: 44 + 256,\n  TNS_DATA_TYPE_CLS: 45 + 256,\n  TNS_DATA_TYPE_CUI: 46 + 256,\n  TNS_DATA_TYPE_DFN: 47 + 256,\n  TNS_DATA_TYPE_DQR: 48 + 256,\n  TNS_DATA_TYPE_DSC: 49 + 256,\n  TNS_DATA_TYPE_EXE: 50 + 256,\n  TNS_DATA_TYPE_FCH: 51 + 256,\n  TNS_DATA_TYPE_GBV: 52 + 256,\n  TNS_DATA_TYPE_GEM: 53 + 256,\n  TNS_DATA_TYPE_GIV: 54 + 256,\n  TNS_DATA_TYPE_OKG: 55 + 256,\n  TNS_DATA_TYPE_HMI: 56 + 256,\n  TNS_DATA_TYPE_INO: 57 + 256,\n  TNS_DATA_TYPE_LNF: 59 + 256,\n  TNS_DATA_TYPE_ONT: 60 + 256,\n  TNS_DATA_TYPE_OPE: 61 + 256,\n  TNS_DATA_TYPE_OSQ: 62 + 256,\n  TNS_DATA_TYPE_SFE: 63 + 256,\n  TNS_DATA_TYPE_SPF: 64 + 256,\n  TNS_DATA_TYPE_VSN: 65 + 256,\n  TNS_DATA_TYPE_UD7: 66 + 256,\n  TNS_DATA_TYPE_DSA: 67 + 256,\n  TNS_DATA_TYPE_UIN: 68,\n  TNS_DATA_TYPE_PIN: 71 + 256,\n  TNS_DATA_TYPE_PFN: 72 + 256,\n  TNS_DATA_TYPE_PPT: 73 + 256,\n  TNS_DATA_TYPE_STO: 75 + 256,\n  TNS_DATA_TYPE_ARC: 77 + 256,\n  TNS_DATA_TYPE_MRS: 78 + 256,\n  TNS_DATA_TYPE_MRT: 79 + 256,\n  TNS_DATA_TYPE_MRG: 80 + 256,\n  TNS_DATA_TYPE_MRR: 81 + 256,\n  TNS_DATA_TYPE_MRC: 82 + 256,\n  TNS_DATA_TYPE_VER: 83 + 256,\n  TNS_DATA_TYPE_LON2: 84 + 256,\n  TNS_DATA_TYPE_INO2: 85 + 256,\n  TNS_DATA_TYPE_ALL: 86 + 256,\n  TNS_DATA_TYPE_UDB: 87 + 256,\n  TNS_DATA_TYPE_AQI: 88 + 256,\n  TNS_DATA_TYPE_ULB: 89 + 256,\n  TNS_DATA_TYPE_ULD: 90 + 256,\n  TNS_DATA_TYPE_SLS: 91,\n  TNS_DATA_TYPE_SID: 92 + 256,\n  TNS_DATA_TYPE_NA7: 93 + 256,\n  TNS_DATA_TYPE_LVC: 94,\n  TNS_DATA_TYPE_LVB: 95,\n  TNS_DATA_TYPE_CHAR: 96,\n  TNS_DATA_TYPE_AVC: 97,\n  TNS_DATA_TYPE_AL7: 98 + 256,\n  TNS_DATA_TYPE_K2RPC: 99 + 256,\n  TNS_DATA_TYPE_BINARY_FLOAT: 100,\n  TNS_DATA_TYPE_BINARY_DOUBLE: 101,\n  TNS_DATA_TYPE_CURSOR: 102,\n  TNS_DATA_TYPE_RDD: 104,\n  TNS_DATA_TYPE_XDP: 103 + 256,\n  TNS_DATA_TYPE_OSL: 106,\n  TNS_DATA_TYPE_OKO8: 107 + 256,\n  TNS_DATA_TYPE_EXT_NAMED: 108,\n  TNS_DATA_TYPE_INT_NAMED: 109,\n  TNS_DATA_TYPE_EXT_REF: 110,\n  TNS_DATA_TYPE_INT_REF: 111,\n  TNS_DATA_TYPE_CLOB: 112,\n  TNS_DATA_TYPE_BLOB: 113,\n  TNS_DATA_TYPE_BFILE: 114,\n  TNS_DATA_TYPE_CFILE: 115,\n  TNS_DATA_TYPE_RSET: 116,\n  TNS_DATA_TYPE_CWD: 117,\n  TNS_DATA_TYPE_JSON: 119,\n  TNS_DATA_TYPE_OAC122: 120,\n  TNS_DATA_TYPE_UD12: 124 + 256,\n  TNS_DATA_TYPE_AL8: 125 + 256,\n  TNS_DATA_TYPE_LFOP: 126 + 256,\n  TNS_DATA_TYPE_VECTOR: 127,\n  TNS_DATA_TYPE_FCRT: 127 + 256,\n  TNS_DATA_TYPE_DNY: 128 + 256,\n  TNS_DATA_TYPE_OPR: 129 + 256,\n  TNS_DATA_TYPE_PLS: 130 + 256,\n  TNS_DATA_TYPE_XID: 131 + 256,\n  TNS_DATA_TYPE_TXN: 132 + 256,\n  TNS_DATA_TYPE_DCB: 133 + 256,\n  TNS_DATA_TYPE_CCA: 134 + 256,\n  TNS_DATA_TYPE_WRN: 135 + 256,\n  TNS_DATA_TYPE_TLH: 137 + 256,\n  TNS_DATA_TYPE_TOH: 138 + 256,\n  TNS_DATA_TYPE_FOI: 139 + 256,\n  TNS_DATA_TYPE_SID2: 140 + 256,\n  TNS_DATA_TYPE_TCH: 141 + 256,\n  TNS_DATA_TYPE_PII: 142 + 256,\n  TNS_DATA_TYPE_PFI: 143 + 256,\n  TNS_DATA_TYPE_PPU: 144 + 256,\n  TNS_DATA_TYPE_PTE: 145 + 256,\n  TNS_DATA_TYPE_CLV: 146,\n  TNS_DATA_TYPE_RXH8: 148 + 256,\n  TNS_DATA_TYPE_N12: 149 + 256,\n  TNS_DATA_TYPE_AUTH: 150 + 256,\n  TNS_DATA_TYPE_KVAL: 151 + 256,\n  TNS_DATA_TYPE_DTR: 152,\n  TNS_DATA_TYPE_DUN: 153,\n  TNS_DATA_TYPE_DOP: 154,\n  TNS_DATA_TYPE_VST: 155,\n  TNS_DATA_TYPE_ODT: 156,\n  TNS_DATA_TYPE_FGI: 157 + 256,\n  TNS_DATA_TYPE_DSY: 158 + 256,\n  TNS_DATA_TYPE_DSYR8: 159 + 256,\n  TNS_DATA_TYPE_DSYH8: 160 + 256,\n  TNS_DATA_TYPE_DSYL: 161 + 256,\n  TNS_DATA_TYPE_DSYT8: 162 + 256,\n  TNS_DATA_TYPE_DSYV8: 163 + 256,\n  TNS_DATA_TYPE_DSYP: 164 + 256,\n  TNS_DATA_TYPE_DSYF: 165 + 256,\n  TNS_DATA_TYPE_DSYK: 166 + 256,\n  TNS_DATA_TYPE_DSYY: 167 + 256,\n  TNS_DATA_TYPE_DSYQ: 168 + 256,\n  TNS_DATA_TYPE_DSYC: 169 + 256,\n  TNS_DATA_TYPE_DSYA: 170 + 256,\n  TNS_DATA_TYPE_OT8: 171 + 256,\n  TNS_DATA_TYPE_DOL: 172,\n  TNS_DATA_TYPE_DSYTY: 173 + 256,\n  TNS_DATA_TYPE_AQE: 174 + 256,\n  TNS_DATA_TYPE_KV: 175 + 256,\n  TNS_DATA_TYPE_AQD: 176 + 256,\n  TNS_DATA_TYPE_AQ8: 177 + 256,\n  TNS_DATA_TYPE_TIME: 178,\n  TNS_DATA_TYPE_TIME_TZ: 179,\n  TNS_DATA_TYPE_TIMESTAMP: 180,\n  TNS_DATA_TYPE_TIMESTAMP_TZ: 181,\n  TNS_DATA_TYPE_INTERVAL_YM: 182,\n  TNS_DATA_TYPE_INTERVAL_DS: 183,\n  TNS_DATA_TYPE_EDATE: 184,\n  TNS_DATA_TYPE_ETIME: 185,\n  TNS_DATA_TYPE_ETTZ: 186,\n  TNS_DATA_TYPE_ESTAMP: 187,\n  TNS_DATA_TYPE_ESTZ: 188,\n  TNS_DATA_TYPE_EIYM: 189,\n  TNS_DATA_TYPE_EIDS: 190,\n  TNS_DATA_TYPE_RFS: 193 + 256,\n  TNS_DATA_TYPE_RXH10: 194 + 256,\n  TNS_DATA_TYPE_DCLOB: 195,\n  TNS_DATA_TYPE_DBLOB: 196,\n  TNS_DATA_TYPE_DBFILE: 197,\n  TNS_DATA_TYPE_DJSON: 198,\n  TNS_DATA_TYPE_KPN: 198 + 256,\n  TNS_DATA_TYPE_KPDNR: 199 + 256,\n  TNS_DATA_TYPE_DSYD: 200 + 256,\n  TNS_DATA_TYPE_DSYS: 201 + 256,\n  TNS_DATA_TYPE_DSYR: 202 + 256,\n  TNS_DATA_TYPE_DSYH: 203 + 256,\n  TNS_DATA_TYPE_DSYT: 204 + 256,\n  TNS_DATA_TYPE_DSYV: 205 + 256,\n  TNS_DATA_TYPE_AQM: 206 + 256,\n  TNS_DATA_TYPE_OER11: 207 + 256,\n  TNS_DATA_TYPE_UROWID: 208,\n  TNS_DATA_TYPE_AQL: 210 + 256,\n  TNS_DATA_TYPE_OTC: 211 + 256,\n  TNS_DATA_TYPE_KFNO: 212 + 256,\n  TNS_DATA_TYPE_KFNP: 213 + 256,\n  TNS_DATA_TYPE_KGT8: 214 + 256,\n  TNS_DATA_TYPE_RASB4: 215 + 256,\n  TNS_DATA_TYPE_RAUB2: 216 + 256,\n  TNS_DATA_TYPE_RAUB1: 217 + 256,\n  TNS_DATA_TYPE_RATXT: 218 + 256,\n  TNS_DATA_TYPE_RSSB4: 219 + 256,\n  TNS_DATA_TYPE_RSUB2: 220 + 256,\n  TNS_DATA_TYPE_RSUB1: 221 + 256,\n  TNS_DATA_TYPE_RSTXT: 222 + 256,\n  TNS_DATA_TYPE_RIDL: 223 + 256,\n  TNS_DATA_TYPE_GLRDD: 224 + 256,\n  TNS_DATA_TYPE_GLRDG: 225 + 256,\n  TNS_DATA_TYPE_GLRDC: 226 + 256,\n  TNS_DATA_TYPE_OKO: 227 + 256,\n  TNS_DATA_TYPE_DPP: 228 + 256,\n  TNS_DATA_TYPE_DPLS: 229 + 256,\n  TNS_DATA_TYPE_DPMOP: 230 + 256,\n  TNS_DATA_TYPE_TIMESTAMP_LTZ: 231,\n  TNS_DATA_TYPE_ESITZ: 232,\n  TNS_DATA_TYPE_UB8: 233,\n  TNS_DATA_TYPE_STAT: 234 + 256,\n  TNS_DATA_TYPE_RFX: 235 + 256,\n  TNS_DATA_TYPE_FAL: 236 + 256,\n  TNS_DATA_TYPE_CKV: 237 + 256,\n  TNS_DATA_TYPE_DRCX: 238 + 256,\n  TNS_DATA_TYPE_KGH: 239 + 256,\n  TNS_DATA_TYPE_AQO: 240 + 256,\n  TNS_DATA_TYPE_PNTY: 241,\n  TNS_DATA_TYPE_OKGT: 242 + 256,\n  TNS_DATA_TYPE_KPFC: 243 + 256,\n  TNS_DATA_TYPE_FE2: 244 + 256,\n  TNS_DATA_TYPE_SPFP: 245 + 256,\n  TNS_DATA_TYPE_DPULS: 246 + 256,\n  TNS_DATA_TYPE_BOOLEAN: 252,\n  TNS_DATA_TYPE_AQA: 253 + 256,\n  TNS_DATA_TYPE_KPBF: 254 + 256,\n  TNS_DATA_TYPE_TSM: 513,\n  TNS_DATA_TYPE_MSS: 514,\n  TNS_DATA_TYPE_KPC: 516,\n  TNS_DATA_TYPE_CRS: 517,\n  TNS_DATA_TYPE_KKS: 518,\n  TNS_DATA_TYPE_KSP: 519,\n  TNS_DATA_TYPE_KSPTOP: 520,\n  TNS_DATA_TYPE_KSPVAL: 521,\n  TNS_DATA_TYPE_PSS: 522,\n  TNS_DATA_TYPE_NLS: 523,\n  TNS_DATA_TYPE_ALS: 524,\n  TNS_DATA_TYPE_KSDEVTVAL: 525,\n  TNS_DATA_TYPE_KSDEVTTOP: 526,\n  TNS_DATA_TYPE_KPSPP: 527,\n  TNS_DATA_TYPE_KOL: 528,\n  TNS_DATA_TYPE_LST: 529,\n  TNS_DATA_TYPE_ACX: 530,\n  TNS_DATA_TYPE_SCS: 531,\n  TNS_DATA_TYPE_RXH: 532,\n  TNS_DATA_TYPE_KPDNS: 533,\n  TNS_DATA_TYPE_KPDCN: 534,\n  TNS_DATA_TYPE_KPNNS: 535,\n  TNS_DATA_TYPE_KPNCN: 536,\n  TNS_DATA_TYPE_KPS: 537,\n  TNS_DATA_TYPE_APINF: 538,\n  TNS_DATA_TYPE_TEN: 539,\n  TNS_DATA_TYPE_XSSCS: 540,\n  TNS_DATA_TYPE_XSSSO: 541,\n  TNS_DATA_TYPE_XSSAO: 542,\n  TNS_DATA_TYPE_KSRPC: 543,\n  TNS_DATA_TYPE_KVL: 560,\n  TNS_DATA_TYPE_SESSGET: 563,\n  TNS_DATA_TYPE_SESSREL: 564,\n  TNS_DATA_TYPE_XSSDEF: 565,\n  TNS_DATA_TYPE_PDQCINV: 572,\n  TNS_DATA_TYPE_PDQIDC: 573,\n  TNS_DATA_TYPE_KPDQCSTA: 574,\n  TNS_DATA_TYPE_KPRS: 575,\n  TNS_DATA_TYPE_KPDQIDC: 576,\n  TNS_DATA_TYPE_RTSTRM: 578,\n  TNS_DATA_TYPE_SESSRET: 579,\n  TNS_DATA_TYPE_SCN6: 580,\n  TNS_DATA_TYPE_KECPA: 581,\n  TNS_DATA_TYPE_KECPP: 582,\n  TNS_DATA_TYPE_SXA: 583,\n  TNS_DATA_TYPE_KVARR: 584,\n  TNS_DATA_TYPE_KPNGN: 585,\n  TNS_DATA_TYPE_XSNSOP: 590,\n  TNS_DATA_TYPE_XSATTR: 591,\n  TNS_DATA_TYPE_XSNS: 592,\n  TNS_DATA_TYPE_TXT: 593,\n  TNS_DATA_TYPE_XSSESSNS: 594,\n  TNS_DATA_TYPE_XSATTOP: 595,\n  TNS_DATA_TYPE_XSCREOP: 596,\n  TNS_DATA_TYPE_XSDETOP: 597,\n  TNS_DATA_TYPE_XSDESOP: 598,\n  TNS_DATA_TYPE_XSSETSP: 599,\n  TNS_DATA_TYPE_XSSIDP: 600,\n  TNS_DATA_TYPE_XSPRIN: 601,\n  TNS_DATA_TYPE_XSKVL: 602,\n  TNS_DATA_TYPE_XSSSDEF2: 603,\n  TNS_DATA_TYPE_XSNSOP2: 604,\n  TNS_DATA_TYPE_XSNS2: 605,\n  TNS_DATA_TYPE_IMPLRES: 611,\n  TNS_DATA_TYPE_OER19: 612,\n  TNS_DATA_TYPE_UB1ARRAY: 613,\n  TNS_DATA_TYPE_SESSSTATE: 614,\n  TNS_DATA_TYPE_AC_REPLAY: 615,\n  TNS_DATA_TYPE_AC_CONT: 616,\n  TNS_DATA_TYPE_KPDNREQ: 622,\n  TNS_DATA_TYPE_KPDNRNF: 623,\n  TNS_DATA_TYPE_KPNGNC: 624,\n  TNS_DATA_TYPE_KPNRI: 625,\n  TNS_DATA_TYPE_AQENQ: 626,\n  TNS_DATA_TYPE_AQDEQ: 627,\n  TNS_DATA_TYPE_AQJMS: 628,\n  TNS_DATA_TYPE_KPDNRPAY: 629,\n  TNS_DATA_TYPE_KPDNRACK: 630,\n  TNS_DATA_TYPE_KPDNRMP: 631,\n  TNS_DATA_TYPE_KPDNRDQ: 632,\n  TNS_DATA_TYPE_CHUNKINFO: 636,\n  TNS_DATA_TYPE_SCN: 637,\n  TNS_DATA_TYPE_SCN8: 638,\n  TNS_DATA_TYPE_UD21: 639,\n  TNS_DATA_TYPE_TNP: 640,\n  TNS_DATA_TYPE_OAC: 646,\n  TNS_DATA_TYPE_OER: 652,\n  TNS_DATA_TYPE_UDS: 663,\n\n  // data type representations\n  TNS_TYPE_REP_NATIVE: 0,\n  TNS_TYPE_REP_UNIVERSAL: 1,\n  TNS_TYPE_REP_ORACLE: 10,\n\n  // message types\n  TNS_MSG_TYPE_PROTOCOL: 1,\n  TNS_MSG_TYPE_DATA_TYPES: 2,\n  TNS_MSG_TYPE_FUNCTION: 3,\n  TNS_MSG_TYPE_ERROR: 4,\n  TNS_MSG_TYPE_ROW_HEADER: 6,\n  TNS_MSG_TYPE_ROW_DATA: 7,\n  TNS_MSG_TYPE_PARAMETER: 8,\n  TNS_MSG_TYPE_STATUS: 9,\n  TNS_MSG_TYPE_IO_VECTOR: 11,\n  TNS_MSG_TYPE_LOB_DATA: 14,\n  TNS_MSG_TYPE_WARNING: 15,\n  TNS_MSG_TYPE_DESCRIBE_INFO: 16,\n  TNS_MSG_TYPE_PIGGYBACK: 17,\n  TNS_MSG_TYPE_FLUSH_OUT_BINDS: 19,\n  TNS_MSG_TYPE_BIT_VECTOR: 21,\n  TNS_MSG_TYPE_SERVER_SIDE_PIGGYBACK: 23,\n  TNS_MSG_TYPE_ONEWAY_FN: 26,\n  TNS_MSG_TYPE_IMPLICIT_RESULTSET: 27,\n  TNS_MSG_TYPE_RENEGOTIATE: 28,\n  TNS_MSG_TYPE_END_OF_REQUEST: 29,\n  TNS_MSG_TYPE_FAST_AUTH: 34,\n\n  // parameter keyword numbers,\n  TNS_KEYWORD_NUM_CURRENT_SCHEMA: 168,\n  TNS_KEYWORD_NUM_EDITION: 172,\n\n  // bind flags\n  TNS_BIND_USE_INDICATORS: 0x0001,\n  TNS_BIND_USE_LENGTH: 0x0002,\n  TNS_BIND_ARRAY: 0x0040,\n\n  // bind directions\n  TNS_BIND_DIR_OUTPUT: 16,\n  TNS_BIND_DIR_INPUT: 32,\n  TNS_BIND_DIR_INPUT_OUTPUT: 48,\n\n  // execute options\n  TNS_EXEC_OPTION_PARSE: 0x01,\n  TNS_EXEC_OPTION_BIND: 0x08,\n  TNS_EXEC_OPTION_DEFINE: 0x10,\n  TNS_EXEC_OPTION_EXECUTE: 0x20,\n  TNS_EXEC_OPTION_FETCH: 0x40,\n  TNS_EXEC_OPTION_COMMIT: 0x100,\n  TNS_EXEC_OPTION_COMMIT_REEXECUTE: 0x1,\n  TNS_EXEC_OPTION_PLSQL_BIND: 0x400,\n  TNS_EXEC_OPTION_DML_ROWCOUNTS: 0x4000,\n  TNS_EXEC_OPTION_NOT_PLSQL: 0x8000,\n  TNS_EXEC_OPTION_IMPLICIT_RESULTSET: 0x8000,\n  TNS_EXEC_OPTION_DESCRIBE: 0x20000,\n  TNS_EXEC_OPTION_NO_COMPRESSED_FETCH: 0x40000,\n  TNS_EXEC_OPTION_BATCH_ERRORS: 0x80000,\n  TNS_EXEC_OPTION_NO_IMPL_REL: 0x200000,\n\n  // server side piggyback op codes\n  TNS_SERVER_PIGGYBACK_QUERY_CACHE_INVALIDATION: 1,\n  TNS_SERVER_PIGGYBACK_OS_PID_MTS: 2,\n  TNS_SERVER_PIGGYBACK_TRACE_EVENT: 3,\n  TNS_SERVER_PIGGYBACK_SESS_RET: 4,\n  TNS_SERVER_PIGGYBACK_SYNC: 5,\n  TNS_SERVER_PIGGYBACK_LTXID: 7,\n  TNS_SERVER_PIGGYBACK_AC_REPLAY_CONTEXT: 8,\n  TNS_SERVER_PIGGYBACK_EXT_SYNC: 9,\n\n  // session return constants\n  TNS_SESSGET_SESSION_CHANGED: 4,\n\n  // LOB operations\n  TNS_LOB_OP_GET_LENGTH: 0x0001,\n  TNS_LOB_OP_READ: 0x0002,\n  TNS_LOB_OP_TRIM: 0x0020,\n  TNS_LOB_OP_WRITE: 0x0040,\n  TNS_LOB_OP_GET_CHUNK_SIZE: 0x4000,\n  TNS_LOB_OP_CREATE_TEMP: 0x0110,\n  TNS_LOB_OP_FREE_TEMP: 0x0111,\n  TNS_LOB_OP_OPEN: 0x8000,\n  TNS_LOB_OP_CLOSE: 0x10000,\n  TNS_LOB_OP_IS_OPEN: 0x11000,\n  TNS_LOB_OP_ARRAY: 0x80000,\n\n  // LOB locator constants\n  TNS_LOB_LOC_OFFSET_FLAG_1: 4,\n  TNS_LOB_LOC_OFFSET_FLAG_3: 6,\n  TNS_LOB_LOC_OFFSET_FLAG_4: 7,\n  TNS_LOB_QLOCATOR_VERSION: 4,\n\n  // LOB locator flags (byte 1)\n  TNS_LOB_LOC_FLAGS_BLOB: 0x01,\n  TNS_LOB_LOC_FLAGS_VALUE_BASED: 0x20,\n  TNS_LOB_LOC_FLAGS_ABSTRACT: 0x40,\n\n  // LOB locator flags (byte 2)\n  TNS_LOB_LOC_FLAGS_INIT: 0x08,\n\n  // LOB locator flags (byte 4)\n  TNS_LOB_LOC_FLAGS_TEMP: 0x01,\n  TNS_LOB_LOC_FLAGS_VAR_LENGTH_CHARSET: 0x80,\n\n  // other LOB constants\n  TNS_LOB_OPEN_READ_WRITE: 2,\n  TNS_LOB_PREFETCH_FLAG: 0x2000000,\n\n  // base JSON constants\n  TNS_JSON_MAX_LENGTH: 32 * 1024 * 1024,\n\n  // end-to-end metrics\n  TNS_END_TO_END_ACTION: 0x0010,\n  TNS_END_TO_END_CLIENT_IDENTIFIER: 0x0001,\n  TNS_END_TO_END_CLIENT_INFO: 0x0100,\n  TNS_END_TO_END_DBOP: 0x0200,\n  TNS_END_TO_END_MODULE: 0x0008,\n\n  // versions\n  TNS_VERSION_MIN_ACCEPTED: 315,\n  TNS_VERSION_MIN_LARGE_SDU: 315,\n\n  // TTC functions\n  TNS_FUNC_AUTH_PHASE_ONE: 118,\n  TNS_FUNC_AUTH_PHASE_TWO: 115,\n  TNS_FUNC_CLOSE_CURSORS: 105,\n  TNS_FUNC_COMMIT: 14,\n  TNS_FUNC_EXECUTE: 94,\n  TNS_FUNC_FETCH: 5,\n  TNS_FUNC_LOB_OP: 96,\n  TNS_FUNC_LOGOFF: 9,\n  TNS_FUNC_PING: 147,\n  TNS_FUNC_ROLLBACK: 15,\n  TNS_FUNC_SET_END_TO_END_ATTR: 135,\n  TNS_FUNC_REEXECUTE: 4,\n  TNS_FUNC_REEXECUTE_AND_FETCH: 78,\n  TNS_FUNC_SET_SCHEMA: 152,\n  TNS_FUNC_SESSION_GET: 162,\n  TNS_FUNC_SESSION_RELEASE: 163,\n  TNS_FUNC_SESSION_STATE: 176, // piggyback fn\n  TNS_FUNC_CANCEL_ALL: 120, // piggyback fn\n\n  // character sets and encodings\n  TNS_CHARSET_UTF8: 873,\n  TNS_CHARSET_UTF16: 2000,\n  TNS_ENCODING_UTF8: \"UTF-8\",\n  TNS_ENCODING_UTF16: \"UTF-16LE\",\n  TNS_ENCODING_MULTI_BYTE: 0x01,\n  TNS_ENCODING_CONV_LENGTH: 0x02,\n\n  // compile time capability indices\n  TNS_CCAP_SQL_VERSION: 0,\n  TNS_CCAP_LOGON_TYPES: 4,\n  TNS_CCAP_CTB_FEATURE_BACKPORT: 5,\n  TNS_CCAP_FIELD_VERSION: 7,\n  TNS_CCAP_SERVER_DEFINE_CONV: 8,\n  TNS_CCAP_TTC1: 15,\n  TNS_CCAP_OCI1: 16,\n  TNS_CCAP_TDS_VERSION: 17,\n  TNS_CCAP_RPC_VERSION: 18,\n  TNS_CCAP_RPC_SIG: 19,\n  TNS_CCAP_DBF_VERSION: 21,\n  TNS_CCAP_LOB: 23,\n  TNS_CCAP_TTC2: 26,\n  TNS_CCAP_UB2_DTY: 27,\n  TNS_CCAP_OCI2: 31,\n  TNS_CCAP_CLIENT_FN: 34,\n  TNS_CCAP_TTC3: 37,\n  TNS_CCAP_TTC4: 40,\n  TNS_CCAP_LOB2: 42,\n  TNS_CCAP_TTC5: 44,\n  TNS_CCAP_MAX: 51,\n\n  // compile time capability values\n  TNS_CCAP_SQL_VERSION_MAX: 6,\n  TNS_CCAP_FIELD_VERSION_11_2: 6,\n  TNS_CCAP_FIELD_VERSION_12_1: 7,\n  TNS_CCAP_FIELD_VERSION_12_2: 8,\n  TNS_CCAP_FIELD_VERSION_12_2_EXT1: 9,\n  TNS_CCAP_FIELD_VERSION_18_1: 10,\n  TNS_CCAP_FIELD_VERSION_18_1_EXT_1: 11,\n  TNS_CCAP_FIELD_VERSION_19_1: 12,\n  TNS_CCAP_FIELD_VERSION_19_1_EXT_1: 13,\n  TNS_CCAP_FIELD_VERSION_20_1: 14,\n  TNS_CCAP_FIELD_VERSION_20_1_EXT_1: 15,\n  TNS_CCAP_FIELD_VERSION_21_1: 16,\n  TNS_CCAP_FIELD_VERSION_23_1: 17,\n  TNS_CCAP_FIELD_VERSION_23_1_EXT_1: 18,\n  TNS_CCAP_FIELD_VERSION_23_1_EXT_2: 19,\n  TNS_CCAP_FIELD_VERSION_23_1_EXT_3: 20,\n  TNS_CCAP_FIELD_VERSION_23_1_EXT_4: 21,\n  TNS_CCAP_FIELD_VERSION_23_1_EXT_5: 22,\n  TNS_CCAP_FIELD_VERSION_23_1_EXT_6: 23,\n  TNS_CCAP_FIELD_VERSION_23_4: 24,\n  TNS_CCAP_FIELD_VERSION_MAX: 24,\n  TNS_CCAP_O5LOGON: 8,\n  TNS_CCAP_O5LOGON_NP: 2,\n  TNS_CCAP_O7LOGON: 32,\n  TNS_CCAP_O8LOGON_LONG_IDENTIFIER: 64,\n  TNS_CCAP_O9LOGON_LONG_PASSWORD: 0x80,\n  TNS_CCAP_END_OF_CALL_STATUS: 0x01,\n  TNS_CCAP_IND_RCD: 0x08,\n  TNS_CCAP_FAST_BVEC: 0x20,\n  TNS_CCAP_FAST_SESSION_PROPAGATE: 0x10,\n  TNS_CCAP_APP_CTX_PIGGYBACK: 0x80,\n  TNS_CCAP_TDS_VERSION_MAX: 3,\n  TNS_CCAP_RPC_VERSION_MAX: 7,\n  TNS_CCAP_RPC_SIG_VALUE: 3,\n  TNS_CCAP_DBF_VERSION_MAX: 1,\n  TNS_CCAP_IMPLICIT_RESULTS: 0x10,\n  TNS_CCAP_BIG_CHUNK_CLR: 0x20,\n  TNS_CCAP_KEEP_OUT_ORDER: 0x80,\n  TNS_CCAP_LOB_UB8_SIZE: 0x01,\n  TNS_CCAP_LOB_ENCS: 0x02,\n  TNS_CCAP_LOB_PREFETCH_DATA: 0x04,\n  TNS_CCAP_LOB_TEMP_SIZE: 0x08,\n  TNS_CCAP_LOB_PREFETCH: 0x40,\n  TNS_CCAP_LOB_12C: 0x80,\n  TNS_CCAP_DRCP: 0x10,\n  TNS_CCAP_ZLNP: 0x04,\n  TNS_CCAP_INBAND_NOTIFICATION: 0x04,\n  TNS_CCAP_END_OF_REQUEST: 0x20,\n  TNS_CCAP_CLIENT_FN_MAX: 12,\n  TNS_CCAP_LOB2_QUASI: 0x01,\n  TNS_CCAP_LOB2_2GB_PREFETCH: 0x04,\n  TNS_CCAP_CTB_IMPLICIT_POOL: 0x08,\n  TNS_CCAP_VECTOR_SUPPORT: 0x08,\n\n  // runtime capability indices\n  TNS_RCAP_COMPAT: 0,\n  TNS_RCAP_TTC: 6,\n  TNS_RCAP_MAX: 7,\n\n  // runtime capability values\n  TNS_RCAP_COMPAT_81: 2,\n  TNS_RCAP_TTC_ZERO_COPY: 0x01,\n  TNS_RCAP_TTC_32K: 0x04,\n\n  /** Verifier types. */\n  /**  SHA1 (salted). */\n  TNS_VERIFIER_TYPE_11G_1: 0xb152,\n  TNS_VERIFIER_TYPE_11G_2: 0x1b25,\n  /** MultiRound SHA-512. */\n  TNS_VERIFIER_TYPE_12C: 0x4815,\n\n  // UDS flags\n  TNS_UDS_FLAGS_IS_JSON: 0x00000100,\n  TNS_UDS_FLAGS_IS_OSON: 0x00000800,\n\n  // end of call status flags\n  TNS_EOCS_FLAGS_TXN_IN_PROGRESS: 0x00000002,\n  TNS_EOCS_FLAGS_SESS_RELEASE: 0x00008000,\n\n  // other constants\n  TNS_ESCAPE_CHAR: 253,\n  TNS_LONG_LENGTH_INDICATOR: dataHandlerConstants.TNS_LONG_LENGTH_INDICATOR,\n  TNS_NULL_LENGTH_INDICATOR: dataHandlerConstants.TNS_NULL_LENGTH_INDICATOR,\n  TNS_MAX_ROWID_LENGTH: 18,\n  TNS_DURATION_SESSION: 10,\n  TNS_MAX_LONG_LENGTH: 0x7fffffff,\n  TNS_SDU: 8192,\n  TNS_TDU: 65535,\n  TNS_MAX_CONNECT_DATA: 230,\n  TNS_MAX_UROWID_LENGTH: 3950,\n  TNS_SERVER_CONVERTS_CHARS: 0x01, // server does charset conversion\n\n  // drcp release mode\n  DRCP_DEAUTHENTICATE: 0x00000002,\n\n  // database object image flags\n  TNS_OBJ_IS_VERSION_81: 0x80,\n  TNS_OBJ_IS_DEGENERATE: 0x10,\n  TNS_OBJ_IS_COLLECTION: 0x08,\n  TNS_OBJ_NO_PREFIX_SEG: 0x04,\n  TNS_OBJ_IMAGE_VERSION: 1,\n\n  // database object flags\n  TNS_OBJ_MAX_SHORT_LENGTH: 245,\n  TNS_OBJ_ATOMIC_NULL: 253,\n  TNS_OBJ_NON_NULL_OID: 0x02,\n  TNS_OBJ_HAS_EXTENT_OID: 0x08,\n  TNS_OBJ_TOP_LEVEL: 0x01,\n  TNS_OBJ_HAS_INDEXES: 0x10,\n\n  // database object collection types\n  TNS_OBJ_PLSQL_INDEX_TABLE: 1,\n  TNS_OBJ_NESTED_TABLE: 2,\n  TNS_OBJ_VARRAY: 3,\n\n  // database object TDS type codes\n  TNS_OBJ_TDS_TYPE_CHAR: 1,\n  TNS_OBJ_TDS_TYPE_DATE: 2,\n  TNS_OBJ_TDS_TYPE_FLOAT: 5,\n  TNS_OBJ_TDS_TYPE_NUMBER: 6,\n  TNS_OBJ_TDS_TYPE_VARCHAR: 7,\n  TNS_OBJ_TDS_TYPE_BOOLEAN: 8,\n  TNS_OBJ_TDS_TYPE_RAW: 19,\n  TNS_OBJ_TDS_TYPE_TIMESTAMP: 21,\n  TNS_OBJ_TDS_TYPE_TIMESTAMP_TZ: 23,\n  TNS_OBJ_TDS_TYPE_OBJ: 27,\n  TNS_OBJ_TDS_TYPE_COLL: 28,\n  TNS_OBJ_TDS_TYPE_CLOB: 29,\n  TNS_OBJ_TDS_TYPE_BLOB: 30,\n  TNS_OBJ_TDS_TYPE_TIMESTAMP_LTZ: 33,\n  TNS_OBJ_TDS_TYPE_BINARY_FLOAT: 37,\n  TNS_OBJ_TDS_TYPE_START_EMBED_ADT: 39,\n  TNS_OBJ_TDS_TYPE_END_EMBED_ADT: 40,\n  TNS_OBJ_TDS_TYPE_SUBTYPE_MARKER: 43,\n  TNS_OBJ_TDS_TYPE_EMBED_ADT_INFO: 44,\n  TNS_OBJ_TDS_TYPE_BINARY_DOUBLE: 45,\n\n  // xml type constants\n  TNS_XML_TYPE_LOB: 0x0001,\n  TNS_XML_TYPE_STRING: 0x0004,\n  TNS_XML_TYPE_FLAG_SKIP_NEXT_4: 0x100000,\n\n  // errors\n  TNS_ERR_INCONSISTENT_DATA_TYPES: 932,\n  TNS_ERR_VAR_NOT_IN_SELECT_LIST: 1007,\n  TNS_ERR_INBAND_MESSAGE: 12573,\n  TNS_ERR_INVALID_SERVICE_NAME: 12514,\n  TNS_ERR_INVALID_SID: 12505,\n  TNS_ERR_NO_DATA_FOUND: 1403,\n  TNS_ERR_SESSION_SHUTDOWN: 12572,\n\n  // warnings\n  TNS_WARN_COMPILATION_CREATE: 0x20,\n\n  // vector constants\n  TNS_VECTOR_MAX_LENGTH: 1048576,\n  VECTOR_FORMAT_FLEX: 0,\n  VECTOR_META_FLAG_FLEXIBLE_DIM: 1,\n\n  // other constants\n  PACKET_HEADER_SIZE: 8,\n  NUMBER_AS_TEXT_CHARS: 172,\n  CHUNKED_BYTES_CHUNK_SIZE: 65536,\n\n  // Network Header flags for Data packet\n  TNS_DATA_FLAGS_END_OF_REQUEST: 0x2000,\n\n  TNS_BASE64_ALPHABET_ARRAY: Buffer.from('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\n  TNS_EXTENT_OID: Buffer.from('00000000000000000000000000010001', 'hex')\n};\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require('./constants');\nconst crypto = require('crypto');\n\nclass OutOfPacketsError extends Error { }\n\nfunction _convertBase64(result, value, size, offset) {\n  for (let i = 0;i < size;i++) {\n    result[offset + size - i - 1] = constants.TNS_BASE64_ALPHABET_ARRAY[value & 0x3f];\n    value = value >> 6;\n  }\n  return offset + size;\n}\n\nfunction encodeRowID(rowID) {\n  let offset = 0;\n  if (rowID.rba !== 0 || rowID.partitionID !== 0 || rowID.blockNum !== 0 || rowID.slotNum != 0) {\n    const result = Buffer.allocUnsafe(constants.TNS_MAX_ROWID_LENGTH);\n    offset = _convertBase64(result, rowID.rba, 6, offset);\n    offset = _convertBase64(result, rowID.partitionID, 3, offset);\n    offset = _convertBase64(result, rowID.blockNum, 6, offset);\n    _convertBase64(result, rowID.slotNum, 3, offset);\n    return result.toString('utf8');\n  }\n}\n\n// obfuscate value\nfunction setObfuscatedValue(value) {\n  const valueBytes = Buffer.from(value);\n  const obfuscatedBytes = crypto.randomBytes(valueBytes.length);\n  for (let i = 0; i < valueBytes.length; i++) {\n    valueBytes[i] = obfuscatedBytes[i] ^ valueBytes[i];\n  }\n  return {obfuscatedValue: obfuscatedBytes, value: valueBytes};\n}\n\n// returns the deobfuscated value, after removing the obfuscation\n// and clear memory of temporary Buffers coming from Buffer pool\nfunction getDeobfuscatedValue(valueBytes, obfuscatedBytes) {\n  const buf = Buffer.from(valueBytes);\n  for (let i = 0; i < valueBytes.length; i++) {\n    buf[i] = valueBytes[i] ^ obfuscatedBytes[i];\n  }\n  const retVal = buf.toString();\n  buf.fill(0);\n  return retVal;\n}\n\nmodule.exports = {\n  encodeRowID,\n  getDeobfuscatedValue,\n  OutOfPacketsError,\n  setObfuscatedValue\n};\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require(\"../constants.js\");\nconst errors = require(\"../../../errors.js\");\n\n/**\n *\n * Base class for all the RPC messages to support encode/decode functions\n */\nclass Message {\n  constructor(connection) {\n    this.errorInfo = {};\n    this.connection = connection;\n    this.messageType = constants.TNS_MSG_TYPE_FUNCTION;\n    this.functionCode = 0;\n    this.callStatus = 0;\n    this.flushOutBinds = false;\n    this.endOfResponse = false;\n    this.endToEndSeqNum = 0;\n    this.errorOccurred = false;\n    this.warning = undefined;\n  }\n\n  preProcess() { }\n  async postProcess() { }\n\n  writeFunctionHeader(buf) {\n    buf.writeUInt8(this.messageType);\n    buf.writeUInt8(this.functionCode);\n    buf.writeSeqNum();\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_1) {\n      buf.writeUB8(0);                          // token number\n    }\n  }\n\n  processErrorInfo(buf) {\n    this.callStatus = buf.readUB4();            // end of call status\n    buf.skipUB2();                              // end to end seq number\n    buf.skipUB4();                              // current row number\n    buf.skipUB2();                              // error number\n    buf.skipUB2();                              // array elem error\n    buf.skipUB2();                              // array elem error\n    this.errorInfo.cursorId = buf.readUB2();    // cursor id\n    const errorPos = buf.readSB2();             // error position\n    buf.skipUB1();                              // sql type (19c and earlier)\n    buf.skipUB1();                              // fatal ?\n    buf.skipUB1();                              // flags\n    buf.skipUB1();                              // user cursor options\n    buf.skipUB1();                              // UPI parameter\n    const warnFlag = buf.readUInt8();           // warning flag\n    if (warnFlag & constants.TNS_WARN_COMPILATION_CREATE) {\n      this.warning = errors.getErr(errors.WRN_COMPILATION_CREATE);\n    }\n    this.errorInfo.rowID = buf.readRowID();     // rowid\n    buf.skipUB4();                              // OS error\n    buf.skipUB1();                              // statement error\n    buf.skipUB1();                              // call number\n    buf.skipUB2();                              // padding\n    buf.skipUB4();                              // success iters\n    const numBytes = buf.readUB4();               // oerrdd (logical rowid)\n    if (numBytes > 0) {\n      buf.skipBytesChunked();\n    }\n    // batch error codes\n    const numErrors = buf.readUB2();             // batch error codes array\n    if (numErrors > 0) {\n      this.errorInfo.batchErrors = [];\n      const firstByte = buf.readUInt8();\n      for (let i = 0; i < numErrors; i++) {\n        if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n          buf.skipUB4();                        // chunk length ignored\n        }\n        const errorCode = buf.readUB2();\n        this.errorInfo.batchErrors.push(new Error(errorCode));\n      }\n      if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n        buf.skipBytes(1);                       // ignore end marker\n      }\n    }\n\n    // batch error offset\n    const numOffsets = buf.readUB4();           // batch error row offset array\n    if (numOffsets > 0) {\n      if (numOffsets > 65535) {\n        errors.throwErr(errors.ERR_TOO_MANY_BATCH_ERRORS);\n      }\n      const firstByte = buf.readUInt8();\n      let offset;\n      for (let i = 0; i < numOffsets; i++) {\n        if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n          buf.skipUB4();                        // chunk length ignored\n        }\n        offset = buf.readUB4();\n        if (i < numErrors) {\n          this.errorInfo.batchErrors[i].offset = offset;\n        }\n      }\n      if (firstByte === constants.TNS_LONG_LENGTH_INDICATOR) {\n        buf.skipBytes(1);                       // ignore end marker\n      }\n    }\n\n    // batch error messages\n    const errMsgArr = buf.readUB2();                 // batch error messages array\n    if (errMsgArr > 0) {\n      buf.skipBytes(1);                         // ignore packed size\n      for (let i = 0; i < errMsgArr; i++) {\n        buf.skipUB2();                          // skip chunk length\n\n        this.errorInfo.batchErrors[i].message = buf.readStr(constants.CSFRM_IMPLICIT);\n        buf.skipBytes(2);                       // ignore end marker\n      }\n    }\n\n    this.errorInfo.num = buf.readUB4();         // error number (extended)\n    this.errorInfo.rowCount = buf.readUB8();    // row number (extended)\n\n    // fields added in Oracle Database 20c\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_20_1) {\n      buf.skipUB4();                           // sql type\n      buf.skipUB4();                           // server checksum\n    }\n\n    // error message\n    if (this.errorInfo.num !== 0) {\n      this.errorOccurred = true;\n      if (errorPos >= 0) {\n        this.errorInfo.pos = errorPos;\n      }\n      this.errorInfo.message = buf.readStr(constants.CSFRM_IMPLICIT);\n      /*\n       * Remove ending newline from ORA error message\n       */\n      this.errorInfo.message = this.errorInfo.message.trim();\n    }\n    this.endOfResponse = !this.connection.nscon.endOfRequestSupport;\n  }\n\n  processReturnParameter() { }\n\n  processWarningInfo(buf) {\n    const errNum = buf.readUB2();              // warning number\n    const numBytes = buf.readUB2();            // length of warning message\n    buf.skipUB2();                             // flags\n    if (errNum != 0 && numBytes > 0) {\n      // get message string and remove the ending newline.\n      const message = buf.readStr(constants.CSFRM_IMPLICIT).trim();\n      this.warning = new Error(message);\n      this.warning.errorNum = errNum;\n    }\n  }\n\n  decode(buf) {\n    this.process(buf);\n  }\n\n  process(buf) {\n    this.endOfResponse = false;\n    this.flushOutBinds = false;\n    do {\n      this.savePoint(buf);\n      const messageType = buf.readUInt8();\n      this.processMessage(buf, messageType);\n    } while (!this.endOfResponse);\n  }\n\n  savePoint(buf) {\n    buf.savePoint();\n  }\n\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_ERROR) {\n      this.processErrorInfo(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_WARNING) {\n      this.processWarningInfo(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_STATUS) {\n      this.callStatus = buf.readUB4();\n      this.endToEndSeqNum = buf.readUB2();\n      this.endOfResponse = !this.connection.nscon.endOfRequestSupport;\n    } else if (messageType === constants.TNS_MSG_TYPE_PARAMETER) {\n      this.processReturnParameter(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_SERVER_SIDE_PIGGYBACK) {\n      this.processServerSidePiggyBack(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_END_OF_REQUEST) {\n      this.endOfResponse = true;\n    } else {\n      errors.throwErr(errors.ERR_UNEXPECTED_MESSAGE_TYPE, messageType, buf.pos, buf.packetNum);\n    }\n  }\n\n  processServerSidePiggyBack(buf) {\n    const opcode = buf.readUInt8();\n    if (opcode === constants.TNS_SERVER_PIGGYBACK_LTXID) {\n      const num_bytes = buf.readUB4();\n      if (num_bytes > 0) {\n        buf.skipBytesChunked();\n      }\n    } else if ((opcode === constants.TNS_SERVER_PIGGYBACK_QUERY_CACHE_INVALIDATION)\n     || (opcode === constants.TNS_SERVER_PIGGYBACK_TRACE_EVENT)) {\n      // pass\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_OS_PID_MTS) {\n      const numDtys = buf.readUB2();\n      buf.skipUB1();\n      buf.skipBytes(numDtys);\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_SYNC) {\n      buf.skipUB2();                            // skip number of DTYs\n      buf.skipUB1();                            // skip length of DTYs\n      const num_elements = buf.readUB4();\n      buf.skipBytes(1);                         // skip length\n      for (let i = 0; i < num_elements; i++) {\n        let temp16 = buf.readUB2();\n        if (temp16 > 0) {                       // skip key\n          buf.skipBytesChunked();\n        }\n        temp16 = buf.readUB2();\n        if (temp16 > 0) {                       // skip value\n          buf.skipBytesChunked();\n        }\n        buf.skipUB2();                          // skip flags\n      }\n      buf.skipUB4();                            // skip overall flags\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_EXT_SYNC) {\n      buf.skipUB2();\n      buf.skipUB1();\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_AC_REPLAY_CONTEXT) {\n      buf.skipUB2();                            // skip number of DTYs\n      buf.skipUB1();                            // skip length of DTYs\n      buf.skipUB4();                            // skip flags\n      buf.skipUB4();                            // skip error code\n      buf.skipUB1();                            // skip queue\n      const num_bytes = buf.readUB4();          // skip replay context\n      if (num_bytes > 0) {\n        buf.skipBytesChunked();\n      }\n    } else if (opcode === constants.TNS_SERVER_PIGGYBACK_SESS_RET) {\n      buf.skipUB2();\n      buf.skipUB1();\n      const num_elements = buf.readUB2();\n      if (num_elements > 0) {\n        buf.skipUB1();\n        for (let i = 0; i < num_elements; ++i) {\n          let temp16 = buf.readUB2();\n          if (temp16 > 0) {                     // skip key\n            buf.skipBytesChunked();\n          }\n          temp16 = buf.readUB2();\n          if (temp16 > 0) {                     // skip value\n            buf.skipBytesChunked();\n          }\n          buf.skipUB2();                        // skip flags\n        }\n      }\n      const flags = buf.readUB4();              // session flags\n      if (flags & constants.TNS_SESSGET_SESSION_CHANGED) {\n        if (this.connection._drcpEstablishSession) {\n          this.connection.statementCache.clearCursors();\n        }\n      }\n      this.connection._drcpEstablishSession = false;\n      buf.skipUB4();                            // session id\n      buf.skipUB2();                            // serial number\n    } else {\n      errors.throwErr(errors.ERR_UNKOWN_SERVER_SIDE_PIGGYBACK, opcode);\n    }\n  }\n\n  writePiggybacks(buf) {\n    if (this.connection._currentSchemaModified) {\n      this._writeCurrentSchemaPiggyback(buf);\n    }\n    if (this.connection.statementCache._cursorsToClose.size > 0 && !this.connection._drcpEstablishSession) {\n      this.writeCloseCursorsPiggyBack(buf);\n    }\n    if (\n      this.connection._actionModified ||\n      this.connection._clientIdentifierModified ||\n      this.connection._dbopModified ||\n      this.connection._clientInfoModified ||\n      this.connection._moduleModified\n    ) {\n      this._writeEndToEndPiggybacks(buf);\n    }\n    if (this.connection._tempLobsTotalSize > 0) {\n      this.writeCloseTempLobsPiggyback(buf);\n    }\n  }\n\n  writePiggybackHeader(buf, functionCode) {\n    buf.writeUInt8(constants.TNS_MSG_TYPE_PIGGYBACK);\n    buf.writeUInt8(functionCode);\n    buf.writeSeqNum();\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_1) {\n      buf.writeUB8(0);                          // token number\n    }\n  }\n\n  writeCloseCursorsPiggyBack(buf) {\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_CLOSE_CURSORS);\n    buf.writeUInt8(1);\n    this.connection.statementCache.writeCursorsToClose(buf);\n  }\n\n  writeCloseTempLobsPiggyback(buf) {\n    const lobsToClose = this.connection._tempLobsToClose;\n    const opCode = constants.TNS_LOB_OP_FREE_TEMP | constants.TNS_LOB_OP_ARRAY;\n\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_LOB_OP);\n\n    buf.writeUInt8(1); // pointer\n    buf.writeUB4(this.connection._tempLobsTotalSize);\n    buf.writeUInt8(0); // dest LOB locator\n    buf.writeUB4(0);\n    buf.writeUB4(0); // source LOB locator\n    buf.writeUB4(0);\n    buf.writeUInt8(0); // source LOB offset\n    buf.writeUInt8(0); // dest LOB offset\n    buf.writeUInt8(0); // charset\n    buf.writeUB4(opCode);\n    buf.writeUInt8(0); // scn\n    buf.writeUB4(0); // LOB scn\n    buf.writeUB8(0); // LOB scnl\n    buf.writeUB8(0);\n    buf.writeUInt8(0);\n\n    // array LOB fields\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    buf.writeUInt8(0);\n    buf.writeUB4(0);\n    for (const val of lobsToClose) {\n      buf.writeBytes(val);\n    }\n\n    // Reset Values\n    this.connection._tempLobsToClose = [];\n    this.connection._tempLobsTotalSize = 0;\n  }\n\n  _writeCurrentSchemaPiggyback(buf) {\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_SET_SCHEMA);\n    buf.writeUInt8(1);\n    const bytes = Buffer.byteLength(this.connection.currentSchema);\n    buf.writeUB4(bytes);\n    buf.writeBytesWithLength(Buffer.from(this.connection.currentSchema));\n  }\n\n  _writeEndToEndPiggybacks(buf) {\n    let flags = 0;\n\n    // determine which flags to send\n    if (this.connection._actionModified) {\n      flags |= constants.TNS_END_TO_END_ACTION;\n    }\n    if (this.connection._clientIdentifierModified) {\n      flags |= constants.TNS_END_TO_END_CLIENT_IDENTIFIER;\n    }\n    if (this.connection._clientInfoModified) {\n      flags |= constants.TNS_END_TO_END_CLIENT_INFO;\n    }\n    if (this.connection._moduleModified) {\n      flags |= constants.TNS_END_TO_END_MODULE;\n    }\n    if (this.connection._dbOpModified) {\n      flags |= constants.TNS_END_TO_END_DBOP;\n    }\n\n    // write initial packet data\n    this.writePiggybackHeader(buf, constants.TNS_FUNC_SET_END_TO_END_ATTR);\n    buf.writeUInt8(0);                  // pointer (cidnam)\n    buf.writeUInt8(0);                  // pointer (cidser)\n    buf.writeUB4(flags);\n\n    const clientIdentifierBytes = this.writeEndEndTraceValue(buf, this.connection._clientIdentifier, this.connection._clientIdentifierModified);\n    const moduleBytes = this.writeEndEndTraceValue(buf, this.connection._module, this.connection._moduleModified);\n    const actionBytes = this.writeEndEndTraceValue(buf, this.connection._action, this.connection._actionModified);\n\n    // write unsupported bits\n    buf.writeUInt8(0);                  // pointer (cideci)\n    buf.writeUB4(0);                    // length (cideci)\n    buf.writeUInt8(0);                  // cidcct\n    buf.writeUB4(0);                    // cidecs\n\n    const clientInfoBytes = this.writeEndEndTraceValue(buf, this.connection._clientInfo, this.connection._clientInfoModified);\n    // write unsupported bits\n    buf.writeUInt8(0);                  // pointer (cideci)\n    buf.writeUB4(0);                    // length (cideci)\n    buf.writeUInt8(0);                  // cidcct\n    buf.writeUB4(0);                    // cidecs\n    const dbOpBytes = this.writeEndEndTraceValue(buf, this.connection._dbOp, this.connection._dbOpModified);\n\n    // write strings\n    if (this.connection._clientIdentifierModified && this.connection._clientIdentifier) {\n      buf.writeBytesWithLength(clientIdentifierBytes);\n    }\n    if (this.connection._moduleModified && this.connection._module) {\n      buf.writeBytesWithLength(moduleBytes);\n    }\n    if (this.connection._actionModified && this.connection._action) {\n      buf.writeBytesWithLength(actionBytes);\n    }\n    if (this.connection._clientInfoModified && this.connection._clientInfo) {\n      buf.writeBytesWithLength(clientInfoBytes);\n    }\n    if (this.connection._dbOpModified && this.connection._dbOp) {\n      buf.writeBytesWithLength(dbOpBytes);\n    }\n\n    // reset flags and values\n    this.connection._actionModified = false;\n    this.connection._action = \"\";\n    this.connection._clientIdentifierModified = false;\n    this.connection._clientIdentifier = \"\";\n    this.connection._clientInfoModified = false;\n    this.connection._clientInfo = \"\";\n    this.connection._dbOpModified = false;\n    this.connection._dbOp = \"\";\n    this.connection._moduleModified = false;\n    this.connection._module = \"\";\n  }\n\n  writeEndEndTraceValue(buf, value, modified) {\n    // write client identifier header info\n    let writtenBytes;\n    if (modified) {\n      buf.writeUInt8(1);              // pointer (client identifier)\n      if (value) {\n        writtenBytes = Buffer.from(value);\n        buf.writeUB4(writtenBytes.length);\n      } else {\n        buf.writeUB4(0);\n      }\n    } else {\n      buf.writeUInt8(0);              // pointer (client identifier)\n      buf.writeUB4(0);                // length of client identifier\n    }\n    return writtenBytes;\n  }\n\n  // Called when an error is encountered during decode of RPC\n  saveDeferredErr() {\n    if (!this.deferredErr) {\n      this.deferredErr = errors.getErr(...arguments);\n    }\n  }\n}\n\nmodule.exports = Message;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require('../constants.js');\nconst Message = require('./base.js');\n\n/**\n * Abstracts all LOB operations.\n *\n * @class LobOpMessage\n * @extends {Message}\n */\nclass LobOpMessage extends Message {\n\n  constructor(connImpl, options) {\n    super(connImpl);\n    /*\n     * source LOB locator. Reading data from it.\n     */\n    this.sourceLobImpl = options.sourceLobImpl || null;\n    this.operation = options.operation;\n    /*\n     * Destination LOB locator. For copy, append operations,...\n     */\n    this.destLobImpl = options.destLobImpl || null;\n    /*\n     * Offset from where sourceLob operation to start\n     */\n    this.sourceOffset = options.sourceOffset || 0;\n    /*\n     * Offset from where destLob operation to start\n     */\n    this.destOffset = options.destOffset || 0;\n    this.boolFlag = false;\n    if (options.data) { // data available For Writes\n      this.data = options.data;\n    }\n    this.functionCode = constants.TNS_FUNC_LOB_OP;\n    this.sendAmount = options.sendAmount;\n    this.amount = options.amount || 0; // LOB length\n  }\n\n  encode(buf) {\n    this.writeFunctionHeader(buf);\n    if (this.sourceLobImpl === null) {\n      buf.writeUInt8(0);\n      buf.writeUB4(0);\n    } else {\n      buf.writeUInt8(1);\n      buf.writeUB4(this.sourceLobImpl._locator.length);\n    }\n    if (this.destLobImpl === null) {\n      buf.writeUInt8(0);\n      buf.writeUB4(0);\n    } else {\n      buf.writeUInt8(1);\n      buf.writeUB4(this.destLobImpl._locator.length);\n    }\n    buf.writeUB4(0);\n    buf.writeUB4(0);\n    if (this.operation === constants.TNS_LOB_OP_CREATE_TEMP) {\n      buf.writeUInt8(1);\n    } else {\n      buf.writeUInt8(0);\n    }\n    buf.writeUInt8(0);\n    if (this.operation === constants.TNS_LOB_OP_CREATE_TEMP\n        || this.operation === constants.TNS_LOB_OP_IS_OPEN) {\n      buf.writeUInt8(1);\n    } else {\n      buf.writeUInt8(0);\n    }\n    buf.writeUB4(this.operation);\n    buf.writeUInt8(0);\n    buf.writeUInt8(0);\n    buf.writeUB8(this.sourceOffset);\n    buf.writeUB8(this.destOffset);\n    if (this.sendAmount) {\n      buf.writeUInt8(1);\n    } else {\n      buf.writeUInt8(0);\n    }\n    for (let i = 0; i < 3; i++) {\n      buf.writeUInt16BE(0);\n    }\n    if (this.sourceLobImpl) {\n      buf.writeBytes(this.sourceLobImpl._locator);\n    }\n    if (this.destLobImpl) {\n      buf.writeBytes(this.destLobImpl._locator);\n    }\n    if (this.operation === constants.TNS_LOB_OP_CREATE_TEMP) {\n      if (this.sourceLobImpl.dbType._csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n        buf.writeUB4(constants.TNS_CHARSET_UTF16);\n      } else {\n        buf.writeUB4(constants.TNS_CHARSET_UTF8);\n      }\n    }\n    if (this.data) {\n      let data;\n      buf.writeUInt8(constants.TNS_MSG_TYPE_LOB_DATA);\n      if (this.sourceLobImpl.dbType._oraTypeNum === constants.TNS_DATA_TYPE_BLOB) {\n        data = this.data;\n      } else if (this.sourceLobImpl.getCsfrm() === constants.CSFRM_NCHAR) {\n        data = this.data;\n        // TODO: avoid conversion back to string, if possible\n        // this is since bind data is converted to buffer automatically, but if\n        // it exceeds 32K for PL/SQL it must be written as a temporary LOB\n        if (Buffer.isBuffer(this.data)) {\n          data = data.toString();\n        }\n        data = Buffer.from(data, constants.TNS_ENCODING_UTF16).swap16();\n      } else {\n        data = Buffer.from(this.data);\n      }\n      buf.writeBytesWithLength(data);\n    }\n    if (this.sendAmount) {\n      buf.writeUB8(this.amount);\n    }\n  }\n\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_LOB_DATA) {\n      const oraTypeNum = this.sourceLobImpl.dbType._oraTypeNum;\n      let data = buf.readBytesWithLength();\n      if (data !== null) {\n        if (oraTypeNum === constants.TNS_DATA_TYPE_BLOB) {\n          data = Buffer.from(data);\n        } else if (this.sourceLobImpl.getCsfrm() === constants.CSFRM_NCHAR) {\n          data = Buffer.from(data).swap16().toString('utf16le');\n        } else {\n          data = data.toString();\n        }\n      }\n      this.data = data;\n    } else {\n      super.processMessage(buf, messageType);\n    }\n  }\n\n  processReturnParameter(buf) {\n    let lobArray;\n    let locator;\n    let temp8;\n    let numBytes;\n    if (this.sourceLobImpl !== null) {\n      numBytes = this.sourceLobImpl._locator.length;\n      lobArray = buf.readBytes(numBytes);\n      locator = lobArray.slice(0, numBytes);\n      locator.copy(this.sourceLobImpl._locator);\n    }\n    if (this.destLobImpl !== null) {\n      numBytes = this.destLobImpl._locator.length;\n      lobArray = buf.readBytes(numBytes);\n      locator = lobArray.slice(0, numBytes);\n      locator.copy(this.destLobImpl._locator);\n    }\n    if (this.operation === constants.TNS_LOB_OP_CREATE_TEMP) {\n      buf.skipUB2();        // skip character set\n      buf.skipBytes(3);     // skip trailing flags, amount\n    } else if (this.sendAmount) {\n      this.amount = buf.readSB8();\n    }\n    if (this.operation === constants.TNS_LOB_OP_IS_OPEN) {\n      temp8 = buf.readUB1();\n      this.boolFlag = temp8 > 0;\n    }\n  }\n\n}\n\nmodule.exports = LobOpMessage;\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst LobImpl = require('../impl/lob.js');\nconst constants = require('./protocol/constants.js');\nconst LobOpMessage = require('./protocol/messages/lobOp.js');\nconst errors = require('../errors.js');\n\nclass ThinLobImpl extends LobImpl {\n\n  //---------------------------------------------------------------------------\n  // _getConnImpl()\n  //\n  // Common method on all classes that make use of a connection -- used to\n  // ensure serialization of all use of the connection.\n  //---------------------------------------------------------------------------\n  _getConnImpl() {\n    return this.conn;\n  }\n\n  //---------------------------------------------------------------------------\n  // _sendMessage()\n  //\n  // Sends a LOB operation message to the server and processes the response.\n  //---------------------------------------------------------------------------\n  async _sendMessage(options) {\n    const message = new LobOpMessage(this.conn, options);\n    await this.conn._protocol._processMessage(message);\n    if (options.operation === constants.TNS_LOB_OP_READ) {\n      return (message.data) ? message.data : null;\n    } else {\n      return message.amount;\n    }\n  }\n\n  getChunkSize() {\n    return this._chunkSize;\n  }\n\n  async _getChunkSizeAsync() {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_GET_CHUNK_SIZE,\n      sourceLobImpl: this,\n      sendAmount: true\n    };\n    this._chunkSize = this._pieceSize = await this._sendMessage(options);\n  }\n\n  getLength() {\n    return this._length;\n  }\n\n  getPieceSize() {\n    return this._pieceSize;\n  }\n\n  setPieceSize(value) {\n    this._pieceSize = value;\n  }\n\n  getType() {\n    return this.dbType;\n  }\n\n  async getData(offset = 1, len = this._length) {\n    if (!len) {\n      len = this._length;\n    }\n    return await this.read(offset, len);\n  }\n\n  async read(offset, length) {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_READ,\n      sourceLobImpl: this,\n      sourceOffset: offset,\n      sendAmount: true,\n      amount: length || this._pieceSize\n    };\n    return await this._sendMessage(options);\n  }\n\n  async write(offset, data) {\n    this.checkConn();\n    const options = {\n      operation: constants.TNS_LOB_OP_WRITE,\n      sourceLobImpl: this,\n      sourceOffset: offset,\n      data: data\n    };\n    await this._sendMessage(options);\n    this._length += data.length;\n  }\n\n  getCsfrm() {\n    if (this.dbType._csfrm !== constants.CSFRM_NCHAR) {\n      if (this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_3] &\n          constants.TNS_LOB_LOC_FLAGS_VAR_LENGTH_CHARSET) {\n        return constants.CSFRM_NCHAR;\n      }\n    }\n    return this.dbType._csfrm;\n  }\n\n  /**\n   * Creates a temporary LOB.\n   *\n   * @param {object} conn Connection Impl object\n   * @param {number} dbType indicates BLOB/CLOB DB type\n   */\n  async create(conn, dbType) {\n    this.dirtyLength = false;\n    this.conn = conn;\n    this.dbType = dbType;\n    this._locator = Buffer.alloc(40);\n    this._isTempLob = true;\n    this._length = 0;\n    const options = {\n      operation: constants.TNS_LOB_OP_CREATE_TEMP,\n      sourceLobImpl: this,\n      amount: constants.TNS_DURATION_SESSION,\n      destOffset: dbType._oraTypeNum,\n      sourceOffset: dbType._csfrm,\n      sendAmount: true\n    };\n    await this._sendMessage(options);\n    await this._getChunkSizeAsync();\n  }\n\n  checkConn() {\n    if (!this.conn.nscon.connected)\n      errors.throwErr(errors.ERR_INVALID_CONNECTION);\n  }\n\n  close() {\n    this.checkConn();\n    if (this._isTempLob) {\n      // Add to freelist which will be sent in piggyback fashion\n      this.conn._tempLobsToClose.push(this._locator);\n      this.conn._tempLobsTotalSize += this._locator.length;\n    }\n  }\n\n  init(conn, locator, dbType, len, chunkSize) {\n    this.dirtyLength = false;\n    this.conn = conn;\n    this._locator = locator;\n    this._isTempLob = false;\n    if (this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_4] & constants.TNS_LOB_LOC_FLAGS_TEMP === constants.TNS_LOB_LOC_FLAGS_TEMP\n      || this._locator[constants.TNS_LOB_LOC_OFFSET_FLAG_1] & constants.TNS_LOB_LOC_FLAGS_ABSTRACT === constants.TNS_LOB_LOC_FLAGS_ABSTRACT) {\n      this._isTempLob = true;\n    }\n    this.dbType = dbType;\n    this._length = len;\n    this._chunkSize = chunkSize;\n    this._pieceSize = chunkSize;\n  }\n\n}\n\nmodule.exports = ThinLobImpl;\n", "// Copyright (c) 2023, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require('./protocol/constants.js');\nconst errors = require('../errors.js');\nconst types = require('../types.js');\nconst DbObjectImpl = require('../impl/dbObject.js');\nconst { GrowableBuffer } = require('../impl/datahandlers/buffer.js');\nconst ThinLobImpl = require('./lob.js');\n\nclass DbObjectPickleBuffer extends GrowableBuffer {\n\n  //---------------------------------------------------------------------------\n  // _readBytesWithLength()\n  //\n  // Helper function that processes the number of bytes (if needed) and then\n  // acquires the specified number of bytes from the buffer.\n  //---------------------------------------------------------------------------\n  _readBytesWithLength(numBytes) {\n    if (numBytes === constants.TNS_LONG_LENGTH_INDICATOR) {\n      numBytes = this.readUInt32BE();\n    }\n    return this.readBytes(numBytes);\n  }\n\n  //---------------------------------------------------------------------------\n  // getIsAtomicNull()\n  //\n  // Reads the next byte and checks to see if the value is atomically null. If\n  // not, the byte is returned to the buffer for further processing.\n  //---------------------------------------------------------------------------\n  getIsAtomicNull() {\n    const value = this.readUInt8();\n    if (value === constants.TNS_OBJ_ATOMIC_NULL ||\n        value === constants.TNS_NULL_LENGTH_INDICATOR) {\n      return true;\n    }\n    this.pos -= 1;\n    return false;\n  }\n\n  //---------------------------------------------------------------------------\n  // readHeader()\n  //\n  // Reads the header of the pickled data.\n  //---------------------------------------------------------------------------\n  readHeader(obj) {\n    obj.imageFlags = this.readUInt8();\n    obj.imageVersion = this.readUInt8();\n    this.readLength();\n    if ((obj.imageFlags & constants.TNS_OBJ_NO_PREFIX_SEG) === 0) {\n      const prefixSegLength = this.readLength();\n      this.skipBytes(prefixSegLength);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // readLength()\n  //\n  // Read the length from the buffer. This will be a single byte, unless the\n  // value meets or exeeds TNS_LONG_LENGTH_INDICATOR. In that case, the value\n  // is stored as a 4-byte integer.\n  //---------------------------------------------------------------------------\n  readLength() {\n    const shortLength = this.readUInt8();\n    if (shortLength !== constants.TNS_LONG_LENGTH_INDICATOR) {\n      return shortLength;\n    }\n    return this.readUInt32BE();\n  }\n\n  //---------------------------------------------------------------------------\n  // writeHeader()\n  //\n  // Writes the header of the pickled data. Since the size is unknown at this\n  // point, zero is written initially and the actual size is written later.\n  //---------------------------------------------------------------------------\n  writeHeader(obj) {\n    this.writeUInt8(obj.imageFlags);\n    this.writeUInt8(obj.imageVersion);\n    this.writeUInt8(constants.TNS_LONG_LENGTH_INDICATOR);\n    this.writeUInt32BE(0);\n    if (obj._objType.isCollection) {\n      this.writeUInt8(1);               // length of prefix segment\n      this.writeUInt8(1);               // prefix segment contents\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // writeLength()\n  //\n  // Writes the length to the buffer.\n  //---------------------------------------------------------------------------\n  writeLength(length) {\n    if (length <= constants.TNS_OBJ_MAX_SHORT_LENGTH) {\n      this.writeUInt8(length);\n    } else {\n      this.writeUInt8(constants.TNS_LONG_LENGTH_INDICATOR);\n      this.writeUInt32BE(length);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _writeRawBytesAndLength()\n  //\n  // Writes the length in the format required before\n  // writing the bytes.\n  //---------------------------------------------------------------------------\n  _writeRawBytesAndLength(value, numBytes) {\n    this.writeLength(numBytes);\n    this.writeBytes(value);\n  }\n}\n\nclass ThinDbObjectImpl extends DbObjectImpl {\n\n  constructor(objType, packedData) {\n    if (typeof objType === 'function') {\n      objType = objType.prototype._objType;\n    }\n    super(objType);\n    this.packedData = packedData;\n    this.unpackedAttrs = new Map();\n    if (packedData) {\n      this.unpackedAssocArray = new Map();\n      this.unpackedAssocKeys = undefined;\n    } else if (objType) {\n      const prefix = Buffer.from([0, 0x22, constants.TNS_OBJ_NON_NULL_OID,\n        constants.TNS_OBJ_HAS_EXTENT_OID]);\n      this.toid = Buffer.concat([prefix, objType.oid, constants.TNS_EXTENT_OID]);\n      this.flags = constants.TNS_OBJ_TOP_LEVEL;\n      this.imageFlags = constants.TNS_OBJ_IS_VERSION_81;\n      this.imageVersion = constants.TNS_OBJ_IMAGE_VERSION;\n      if (objType.isCollection) {\n        this.imageFlags |= constants.TNS_OBJ_IS_COLLECTION;\n        if (objType.collectionType === constants.TNS_OBJ_PLSQL_INDEX_TABLE) {\n          this.unpackedAssocArray = new Map();\n        } else {\n          this.unpackedArray = [];\n        }\n      } else {\n        this.imageFlags |= constants.TNS_OBJ_NO_PREFIX_SEG;\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _ensureAssocKeys()\n  //\n  // Ensure that the keys for the associative array have been calculated.\n  // PL/SQL associative arrays keep their keys in sorted order so this must be\n  // calculated when indices are required.\n  //---------------------------------------------------------------------------\n  _ensureAssocKeys() {\n    if (!this.unpackedAssocKeys) {\n      this.unpackedAssocKeys = [...this.unpackedAssocArray.keys()].sort();\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _ensureUnpacked()\n  //\n  // Ensure that the data has been unpacked.\n  //---------------------------------------------------------------------------\n  _ensureUnpacked() {\n    if (this.packedData) {\n      this._unpackData();\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _getPackedData()\n  //\n  // Returns the packed data for the object. This will either be the value\n  // retrieved from the database or generated packed data (for new objects and\n  // those that have had their data unpacked already).\n  //---------------------------------------------------------------------------\n  _getPackedData() {\n    if (this.packedData)\n      return this.packedData;\n    const buf = new DbObjectPickleBuffer();\n    buf.writeHeader(this);\n    this._packData(buf);\n    const size = buf.pos;\n    buf.pos = 3;\n    buf.writeUInt32BE(size);\n    return buf.buf.subarray(0, size);\n  }\n\n  //---------------------------------------------------------------------------\n  // _packData()\n  //\n  // Packs the data from the object into the buffer.\n  //---------------------------------------------------------------------------\n  _packData(buf) {\n    const objType = this._objType;\n    if (objType.isCollection) {\n      buf.writeUInt8(objType.collectionFlags);\n      if (objType.collectionType === constants.TNS_OBJ_PLSQL_INDEX_TABLE) {\n        this._ensureAssocKeys();\n        buf.writeLength(this.unpackedAssocKeys.length);\n        for (const index of this.unpackedAssocKeys) {\n          buf.writeInt32BE(index);\n          this._packValue(buf, objType.elementType, objType.elementTypeClass,\n            this.unpackedAssocArray.get(index));\n        }\n      } else {\n        buf.writeLength(this.unpackedArray.length);\n        for (const value of this.unpackedArray) {\n          this._packValue(buf, objType.elementType, objType.elementTypeClass,\n            value);\n        }\n      }\n    } else {\n      for (const attr of objType.attributes) {\n        this._packValue(buf, attr.type, attr.typeClass,\n          this.unpackedAttrs.get(attr.name));\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _packValue()\n  //\n  // Packs a value into the buffer. At this point it is assumed that the value\n  // matches the correct type.\n  //---------------------------------------------------------------------------\n  _packValue(buf, type, typeClass, value) {\n    if (value === null || value === undefined) {\n      if (typeClass && !typeClass.prototype.isCollection) {\n        buf.writeUInt8(constants.TNS_OBJ_ATOMIC_NULL);\n      } else {\n        buf.writeUInt8(constants.TNS_NULL_LENGTH_INDICATOR);\n      }\n    } else {\n      switch (type) {\n        case types.DB_TYPE_CHAR:\n        case types.DB_TYPE_VARCHAR:\n          buf.writeBytesWithLength(Buffer.from(value));\n          break;\n        case types.DB_TYPE_NCHAR:\n        case types.DB_TYPE_NVARCHAR:\n          buf.writeBytesWithLength(Buffer.from(value, 'utf16le').swap16());\n          break;\n        case types.DB_TYPE_NUMBER:\n          buf.writeOracleNumber(value.toString());\n          break;\n        case types.DB_TYPE_BINARY_INTEGER:\n        case types.DB_TYPE_BOOLEAN:\n          buf.writeUInt8(4);\n          buf.writeUInt32BE(value);\n          break;\n        case types.DB_TYPE_RAW:\n          buf.writeBytesWithLength(value);\n          break;\n        case types.DB_TYPE_BINARY_DOUBLE:\n          buf.writeUInt8(8);\n          buf.writeBinaryDouble(value);\n          break;\n        case types.DB_TYPE_BINARY_FLOAT:\n          buf.writeUInt8(4);\n          buf.writeBinaryFloat(value);\n          break;\n        case types.DB_TYPE_DATE:\n        case types.DB_TYPE_TIMESTAMP:\n        case types.DB_TYPE_TIMESTAMP_LTZ:\n        case types.DB_TYPE_TIMESTAMP_TZ:\n          buf.writeOracleDate(value, type);\n          break;\n        case types.DB_TYPE_OBJECT:\n          if (this._objType.isCollection || value._objType.isCollection) {\n            buf.writeBytesWithLength(value._getPackedData());\n          } else {\n            value._packData(buf);\n          }\n          break;\n        default:\n          errors.throwErr(errors.ERR_NOT_IMPLEMENTED, type);\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _unpackData()\n  //\n  // Unpacks the packed data into a map of JavaScript values.\n  //---------------------------------------------------------------------------\n  _unpackData() {\n    const buf = new DbObjectPickleBuffer(this.packedData);\n    buf.readHeader(this);\n    this._unpackDataFromBuf(buf);\n    this.packedData = undefined;\n  }\n\n  //---------------------------------------------------------------------------\n  // _unpackDataFromBuf()\n  //\n  // Unpacks the data in the buffer into a map of JavaScript values.\n  //---------------------------------------------------------------------------\n  _unpackDataFromBuf(buf) {\n    let unpackedArray, unpackedAssocArray, assocIndex, unpackedAttrs;\n    const objType = this._objType;\n    if (objType.isCollection) {\n      if (objType.collectionType === constants.TNS_OBJ_PLSQL_INDEX_TABLE) {\n        unpackedAssocArray = new Map();\n      } else {\n        unpackedArray = [];\n      }\n      this.collectionFlags = buf.readUInt8();\n      const numElements = buf.readLength();\n      for (let i = 0; i < numElements; i++) {\n        if (objType.collectionType === constants.TNS_OBJ_PLSQL_INDEX_TABLE) {\n          assocIndex = buf.readUInt32BE();\n        }\n        const value = this._unpackValue(buf, objType.elementType,\n          objType.elementTypeClass);\n        if (objType.collectionType === constants.TNS_OBJ_PLSQL_INDEX_TABLE) {\n          unpackedAssocArray.set(assocIndex, value);\n        } else {\n          unpackedArray.push(value);\n        }\n      }\n    } else {\n      unpackedAttrs = new Map();\n      for (const attr of objType.attributes) {\n        const value = this._unpackValue(buf, attr.type, attr.typeClass);\n        unpackedAttrs.set(attr.name, value);\n      }\n    }\n    this.unpackedAttrs = unpackedAttrs;\n    this.unpackedArray = unpackedArray;\n    this.unpackedAssocArray = unpackedAssocArray;\n  }\n\n  //---------------------------------------------------------------------------\n  // _unpackValue()\n  //\n  // Unpacks a single value and returns it.\n  //---------------------------------------------------------------------------\n  _unpackValue(buf, type, typeClass) {\n    let isNull, obj, value;\n    switch (type) {\n      case types.DB_TYPE_NUMBER:\n        value = buf.readOracleNumber();\n        if (value !== null)\n          value = parseFloat(value);\n        return value;\n      case types.DB_TYPE_BINARY_INTEGER:\n        return buf.readBinaryInteger();\n      case types.DB_TYPE_VARCHAR:\n      case types.DB_TYPE_CHAR:\n        return buf.readStr(constants.CSFRM_IMPLICIT);\n      case types.DB_TYPE_NVARCHAR:\n      case types.DB_TYPE_NCHAR:\n        return buf.readStr(constants.CSFRM_NCHAR);\n      case types.DB_TYPE_RAW:\n        value = buf.readBytesWithLength();\n        if (value !== null)\n          value = Buffer.from(value);\n        return value;\n      case types.DB_TYPE_BINARY_DOUBLE:\n        return buf.readBinaryDouble();\n      case types.DB_TYPE_BINARY_FLOAT:\n        return buf.readBinaryFloat();\n      case types.DB_TYPE_DATE:\n      case types.DB_TYPE_TIMESTAMP:\n        return buf.readOracleDate(true);\n      case types.DB_TYPE_TIMESTAMP_LTZ:\n      case types.DB_TYPE_TIMESTAMP_TZ:\n        return buf.readOracleDate(false);\n      case types.DB_TYPE_BOOLEAN:\n        return buf.readBool();\n      case types.DB_TYPE_OBJECT:\n        isNull = buf.getIsAtomicNull();\n        if (isNull)\n          return null;\n        obj = new ThinDbObjectImpl(typeClass);\n        if (obj._objType.isCollection || this._objType.isCollection) {\n          obj.packedData = Buffer.from(buf.readBytesWithLength());\n        } else {\n          obj._unpackDataFromBuf(buf);\n        }\n        return obj;\n      default:\n        errors.throwErr(errors.ERR_NOT_IMPLEMENTED, type);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // append()\n  //\n  // Appends an element to the collection.\n  //---------------------------------------------------------------------------\n  append(value) {\n    this._ensureUnpacked();\n    if (this.unpackedArray) {\n      const objType = this._objType;\n      if (objType.maxNumElements > 0 &&\n          this.unpackedArray.length >= objType.maxNumElements) {\n        errors.throwErr(errors.ERR_INVALID_COLL_INDEX_SET,\n          this.unpackedArray.length, 0, objType.maxNumElements);\n      }\n      this.unpackedArray.push(value);\n    } else {\n      this._ensureAssocKeys();\n      let newIndex;\n      if (this.unpackedAssocKeys.length === 0) {\n        newIndex = 0;\n      } else {\n        const keyIndex = this.unpackedAssocKeys.length - 1;\n        newIndex = this.unpackedAssocKeys[keyIndex] + 1;\n      }\n      this.unpackedAssocArray.set(newIndex, value);\n      this.unpackedAssocKeys.push(newIndex);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // deleteElement()\n  //\n  // Deletes an element from a collection.\n  //---------------------------------------------------------------------------\n  deleteElement(index) {\n    this._ensureUnpacked();\n    if (this.unpackedArray) {\n      if (this._objType.collectionType == constants.TNS_OBJ_VARRAY) {\n        errors.throwErr(errors.ERR_DELETE_ELEMENTS_OF_VARRAY);\n      }\n      this.unpackedArray.splice(index, 1);\n    } else {\n      this._unpackedAssocKeys = undefined;\n      this.unpackedAssocArray.delete(index);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // getAttrValue()\n  //\n  // Returns the value of the given attribute on the object.\n  //---------------------------------------------------------------------------\n  getAttrValue(attr) {\n    this._ensureUnpacked();\n    const value = this.unpackedAttrs.get(attr.name);\n    if (value === undefined)\n      return null;\n    return value;\n  }\n\n  //---------------------------------------------------------------------------\n  // getElement()\n  //\n  // Returns an element from the collection.\n  //---------------------------------------------------------------------------\n  getElement(index) {\n    let value;\n    this._ensureUnpacked();\n    if (this.unpackedArray) {\n      value = this.unpackedArray[index];\n    } else {\n      value = this.unpackedAssocArray.get(index);\n    }\n    if (value === undefined) {\n      errors.throwErr(errors.ERR_INVALID_COLL_INDEX_GET, index);\n    }\n    return value;\n  }\n\n  //---------------------------------------------------------------------------\n  // getFirstIndex()\n  //\n  // Returns the first index in a collection.\n  //---------------------------------------------------------------------------\n  getFirstIndex() {\n    this._ensureUnpacked();\n    if (this.unpackedArray) {\n      return 0;\n    } else if (this.unpackedAssocArray) {\n      this._ensureAssocKeys();\n      return this.unpackedAssocKeys[0];\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // getKeys()\n  //\n  // Returns the keys of the collection in a JavaScript array.\n  //---------------------------------------------------------------------------\n  getKeys() {\n    this._ensureUnpacked();\n    if (this.unpackedArray) {\n      return Array.from(this.unpackedArray.keys());\n    } else if (this.unpackedAssocArray) {\n      this._ensureAssocKeys();\n      return Array.from(this.unpackedAssocKeys);\n    }\n    return [];\n  }\n\n  //---------------------------------------------------------------------------\n  // getLastIndex()\n  //\n  // Returns the last index in a collection.\n  //---------------------------------------------------------------------------\n  getLastIndex() {\n    this._ensureUnpacked();\n    if (this.unpackedArray) {\n      if (this.unpackedArray.length > 0)\n        return this.unpackedArray.length - 1;\n    } else if (this.unpackedAssocArray) {\n      this._ensureAssocKeys();\n      return this.unpackedAssocKeys[this.unpackedAssocKeys.length - 1];\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // getNextIndex()\n  //\n  // Returns the next index in a collection.\n  //---------------------------------------------------------------------------\n  getNextIndex(index) {\n    this._ensureUnpacked();\n    if (this.unpackedArray) {\n      if (index + 1 < this.unpackedArray.length) {\n        return index + 1;\n      }\n    } else if (this.unpackedAssocArray) {\n      this._ensureAssocKeys();\n      for (const key of this.unpackedAssocKeys) {\n        if (key > index)\n          return key;\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // getPrevIndex()\n  //\n  // Returns the previous index in a collection.\n  //---------------------------------------------------------------------------\n  getPrevIndex(index) {\n    this._ensureUnpacked();\n    if (this.unpackedArray) {\n      if (index > 0) {\n        return index - 1;\n      }\n    } else if (this.unpackedAssocArray) {\n      this._ensureAssocKeys();\n      for (const key of this.unpackedAssocKeys.reverse()) {\n        if (key < index)\n          return key;\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // getValues()\n  //\n  // Returns the values of the collection in a JavaScript array.\n  //---------------------------------------------------------------------------\n  getValues() {\n    const result = [];\n    this._ensureUnpacked();\n    if (this.unpackedArray) {\n      return Array.from(this.unpackedArray);\n    } else if (this.unpackedAssocArray) {\n      this._ensureAssocKeys();\n      for (const key of this.unpackedAssocKeys) {\n        result.push(this.unpackedAssocArray.get(key));\n      }\n    }\n    return result;\n  }\n\n  //---------------------------------------------------------------------------\n  // hasElement()\n  //\n  // Returns whether an element exists at the given index.\n  //---------------------------------------------------------------------------\n  hasElement(index) {\n    this._ensureUnpacked();\n    if (this.unpackedArray) {\n      return (index >= 0 && index < this.unpackedArray.length);\n    }\n    return this.unpackedAssocArray.has(index);\n  }\n\n  //---------------------------------------------------------------------------\n  // setAttrValue()\n  //\n  // Sets the value of the attribute on the object to the given value.\n  //---------------------------------------------------------------------------\n  setAttrValue(attr, value) {\n    this._ensureUnpacked();\n    this.unpackedAttrs.set(attr.name, value);\n  }\n\n  //---------------------------------------------------------------------------\n  // setElement()\n  //\n  // Sets an entry in a collection that is indexed by integers.\n  //---------------------------------------------------------------------------\n  setElement(index, value) {\n    this._ensureUnpacked();\n    if (this.unpackedArray) {\n      const maxIndex = Math.max(this.unpackedArray.length - 1, 0);\n      if (index > maxIndex) {\n        errors.throwErr(errors.ERR_INVALID_COLL_INDEX_SET, index, 0, maxIndex);\n      }\n      this.unpackedArray[index] = value;\n    } else {\n      if (!this.unpackedAssocArray.has(index))\n        this.unpackedAssocKeys = undefined;\n      this.unpackedAssocArray.set(index, value);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // trim()\n  //\n  // Trim the specified number of elements from the end of the collection.\n  //---------------------------------------------------------------------------\n  trim(numToTrim) {\n    this._ensureUnpacked();\n    if (numToTrim > 0) {\n      this.unpackedArray = this.unpackedArray.slice(0,\n        this.unpackedArray.length - numToTrim);\n    }\n  }\n\n}\n\n//---------------------------------------------------------------------------\n// readXML()\n//\n// Decodes the raw Bytes to XML string or LOB object.\n//\n//---------------------------------------------------------------------------\nfunction readXML(conn, buf) {\n  let colValue;\n\n  const xmlObj = new DbObjectPickleBuffer(buf);\n  const tempobj = {};\n  xmlObj.readHeader(tempobj);\n  xmlObj.skipBytes(1);\n  const xmlflag = xmlObj.readUInt32BE();\n  if (xmlflag & constants.TNS_XML_TYPE_FLAG_SKIP_NEXT_4) {\n    xmlObj.skipBytes(4);\n  }\n  const numBytesLeft = xmlObj.numBytesLeft();\n  const ptr = xmlObj.readBytes(numBytesLeft);\n  if (xmlflag & constants.TNS_XML_TYPE_STRING) {\n    colValue = ptr.toString();\n  } else if (xmlflag & constants.TNS_XML_TYPE_LOB) {\n    const lobImpl = new ThinLobImpl();\n    const locator = Buffer.from(ptr);\n    lobImpl.init(conn, locator, types.DB_TYPE_CLOB, 0, 0);\n    colValue = lobImpl;\n  } else {\n    // We only support String and Clob type.\n    errors.throwErr(errors.ERR_UNEXPECTED_XML_TYPE, xmlflag);\n  }\n  return colValue;\n}\n\nmodule.exports = { ThinDbObjectImpl, readXML };\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst utils = require(\"../utils\");\nconst constants = require(\"../constants.js\");\nconst Message = require(\"./base.js\");\nconst { ThinDbObjectImpl, readXML } = require(\"../../dbObject.js\");\nconst ThinLobImpl = require(\"../../lob.js\");\nconst errors = require('../../../errors');\nconst types = require('../../../types.js');\n\n/**\n * Handles data like row header, rowdata , ... recevied from an RPC Execute\n *\n * @class MessageWithData\n * @extends {Message}\n */\nclass MessageWithData extends Message {\n  constructor(connection, statement = null, options = null) {\n    super(connection);\n    this.statement = statement;\n    this.options = options;\n    this.offset = 0;\n    this.numExecs = 1;\n    this.arrayDmlRowCounts = false;\n    this.requiresDefine = false;\n    this.rowIndex = statement.bufferRowCount || 0;\n    this.dmlRowCounts = [];\n    this.batchErrors = false;\n    this.outVariables = [];\n    this.inFetch = false;\n    this.parseOnly = false;\n    this.resultSetsToSetup = [];\n    this.deferredErr = null;\n  }\n\n  /**\n    * processMessage() - Process the data type message\n    */\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_DESCRIBE_INFO) {\n      buf.skipBytesChunked();\n      const prevQueryVars = this.statement.queryVars;\n      this.statement.queryVars = [];\n      this.statement.numQueryVars = 0;\n      this.statement.bufferRowCount = 0;\n      this.statement.bufferRowIndex = 0;\n      this.processDescribeInfo(buf, this.resultSet, prevQueryVars);\n      this.outVariables = this.statement.queryVars;\n    } else if (messageType === constants.TNS_MSG_TYPE_ROW_HEADER) {\n      this.processRowHeader(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_ROW_DATA) {\n      this.processRowData(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_IMPLICIT_RESULTSET) {\n      this.processImplicitResultSet(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_BIT_VECTOR) {\n      this.processBitVector(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_IO_VECTOR) {\n      this.processIOVector(buf);\n    } else if (messageType === constants.TNS_MSG_TYPE_FLUSH_OUT_BINDS) {\n      this.flushOutBinds = true;\n      this.endOfResponse = true;\n    } else if (messageType === constants.TNS_MSG_TYPE_ERROR) {\n      this.processErrorInfo(buf);\n    } else {\n      super.processMessage(buf, messageType);\n    }\n  }\n\n  processErrorInfo(buf) {\n    super.processErrorInfo(buf);\n    if (this.errorInfo.cursorId !== 0) {\n      this.statement.cursorId = this.errorInfo.cursorId;\n    }\n    if (!this.statement.isPlSql) {\n      this.statement.rowCount = this.errorInfo.rowCount;\n    }\n    // we do not set the lastRowid if the rows affected is 0\n    if (this.errorInfo.rowCount > 0) {\n      this.statement.lastRowid = utils.encodeRowID(this.errorInfo.rowID);\n    }\n    this.options.batchErrors = this.errorInfo.batchErrors;\n    if (this.batchErrors && this.options.batchErrors === null) {\n      this.options.batchErrors = [];\n    }\n    if (this.errorInfo.num === constants.TNS_ERR_NO_DATA_FOUND && this.statement.isQuery) {\n      this.errorInfo.num = 0;\n      this.errorOccurred = false;\n      this.statement.moreRowsToFetch = false;\n    } else if (this.retry) {\n      this.retry = false;\n    } else if (this.statement.isQuery &&\n      (this.errorInfo.num === constants.TNS_ERR_VAR_NOT_IN_SELECT_LIST\n        || this.errorInfo.num === constants.TNS_ERR_INCONSISTENT_DATA_TYPES)) {\n      this.retry = true;\n      this.connection.statementCache.clearCursor(this.statement);\n    } else if (this.errorInfo.num !== 0 && this.errorInfo.cursorId !== 0) {\n      if (!errors.ERR_INTEGRITY_ERROR_CODES.includes(this.errorInfo.num)) {\n        this.connection.statementCache.clearCursor(this.statement);\n        this.statement.returnToCache = false;\n      }\n    }\n    if (this.errorInfo.batchErrors) {\n      this.errorOccurred = false;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // If we have fetched this column earlier, we set that\n  // fetch type for the describe info variable received\n  // assuming the returned column order is same as previous.\n  //---------------------------------------------------------------------------\n  _adjustFetchType(pVar, cVar) {\n    if ((cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_CLOB\n       && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_LONG)\n        || (cVar.fetchInfo.dbType._oraTypeNum === constants.TNS_DATA_TYPE_BLOB\n          && pVar.fetchInfo.fetchType._oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW)) {\n      cVar.type = pVar.fetchInfo.fetchType;\n      cVar.maxSize = pVar.maxSize;\n    }\n  }\n\n  processDescribeInfo(buf, resultSet, prevQueryVars) {\n    const statement = resultSet.statement;\n    buf.skipUB4();                              // max row size\n    statement.numQueryVars = buf.readUB4();\n    if (statement.numQueryVars > 0) {\n      buf.skipUB1();\n    }\n    resultSet.metadata = [];\n    const metadata = [];\n    const queryVars = [];\n    for (let i = 0; i < statement.numQueryVars; i++) {\n      const variable = this.processColumnInfo(buf, i + 1);\n      if (prevQueryVars && i < prevQueryVars.length) {\n        this._adjustFetchType(prevQueryVars[i], variable);\n      }\n      queryVars.push(variable);\n      metadata.push(variable.fetchInfo);\n    }\n    let numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked();                   // current date\n    }\n    buf.skipUB4();                              // dcbflag\n    buf.skipUB4();                              // dcbmdbz\n    buf.skipUB4();                              // dcbmnpr\n    buf.skipUB4();                              // dcbmxpr\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked();\n    }\n\n    /*\n     * The message state(resultSet) and statement state(queryVars) is modified\n     * at end of the DescribeInfo function so that an OutOfPacketsError\n     * won't cause partial information state to be stored.\n     */\n    resultSet.metadata = metadata;\n    statement.queryVars = queryVars;\n    this.resultSetsToSetup.push(resultSet);\n  }\n\n  processColumnInfo(buf, columnNum) {\n    const dataType = buf.readUInt8();\n    buf.skipUB1(); // flags\n    const precision = buf.readInt8();\n    const scale = buf.readInt8();\n    const maxSize = buf.readUB4();\n    buf.skipUB4();                              // max number of array elements\n    buf.skipUB8();                              // cont flags\n    let oid;\n    let numBytes = buf.readUB4();               // OID\n    if (numBytes > 0) {\n      oid = Buffer.from(buf.readBytesWithLength());\n    }\n    buf.skipUB2();                              // version\n    buf.skipUB2();                              // character set id\n    const csfrm = buf.readUInt8();              // character set form\n    let size = buf.readUB4();\n    if (dataType === constants.TNS_DATA_TYPE_RAW) {\n      size = maxSize;\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_12_2) {\n      buf.skipUB4();                            // oaccolid\n    }\n    const nullable = Boolean(buf.readUInt8());\n    buf.skipUB1();                              // v7 length of name\n    let name;\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      name = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    let schema;\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      schema = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    numBytes = buf.readUB4();\n    let typeName;\n    if (numBytes > 0) {\n      typeName = buf.readStr(constants.CSFRM_IMPLICIT);\n    }\n    buf.skipUB2();                              // column position\n    const udsFlags = buf.readUB4();             // uds flag\n\n    // build metadata\n    const fetchInfo = {\n      name: name,\n      dbType: types.getTypeByOraTypeNum(dataType, csfrm),\n      nullable: nullable\n    };\n    fetchInfo.isJson = Boolean(udsFlags & constants.TNS_UDS_FLAGS_IS_JSON);\n    fetchInfo.isOson = Boolean(udsFlags & constants.TNS_UDS_FLAGS_IS_OSON);\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1) {\n      numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        fetchInfo.domainSchema = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        fetchInfo.domainName = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1_EXT_3) {\n      if (buf.readUB4() > 0) {\n        fetchInfo.annotations = {};\n        buf.skipUB1();\n        const numAnnotations = buf.readUB4();\n        buf.skipUB1();\n        let key, value;\n        for (let i = 0; i < numAnnotations; i++) {\n          buf.skipUB4();\n          value = \"\";\n          key = buf.readStr(constants.CSFRM_IMPLICIT);\n          numBytes = buf.readUB4();\n          if (numBytes > 0) {\n            value = buf.readStr(constants.CSFRM_IMPLICIT);\n          }\n          fetchInfo.annotations[key] = value;\n          buf.skipUB4();                        // flags\n        }\n        buf.skipUB4();                          // flags\n      }\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_4) {\n      const dimensions = buf.readUB4();\n      const vectorFormat = buf.readUInt8();\n      const vectorFlags = buf.readUInt8();\n      if (fetchInfo.dbType === types.DB_TYPE_VECTOR) {\n        if (!(vectorFlags & constants.VECTOR_META_FLAG_FLEXIBLE_DIM)) {\n          fetchInfo.vectorDimensions = dimensions;\n        }\n        if (vectorFormat !== constants.VECTOR_FORMAT_FLEX) {\n          fetchInfo.vectorFormat = vectorFormat;\n        }\n      }\n    }\n\n    switch (fetchInfo.dbType) {\n      case types.DB_TYPE_VARCHAR:\n      case types.DB_TYPE_NVARCHAR:\n      case types.DB_TYPE_CHAR:\n      case types.DB_TYPE_NCHAR:\n      case types.DB_TYPE_RAW:\n        fetchInfo.byteSize = size;\n        break;\n      case types.DB_TYPE_NUMBER:\n        fetchInfo.precision = precision;\n        break;\n      case types.DB_TYPE_TIMESTAMP:\n      case types.DB_TYPE_TIMESTAMP_TZ:\n      case types.DB_TYPE_TIMESTAMP_LTZ:\n        fetchInfo.precision = scale;\n        break;\n      case types.DB_TYPE_OBJECT:\n        fetchInfo.dbTypeClass = this.connection._getDbObjectType(schema,\n          typeName, undefined, oid);\n        if (fetchInfo.dbTypeClass.partial) {\n          this.connection._partialDbObjectTypes.push(fetchInfo.dbTypeClass);\n        }\n        if (fetchInfo.dbTypeClass.isXmlType) {\n          fetchInfo.dbType = types.DB_TYPE_XMLTYPE;\n        }\n        break;\n      default:\n        break;\n    }\n    if (fetchInfo.dbType === types.DB_TYPE_NUMBER) {\n      fetchInfo.scale = scale;\n    }\n    return {\n      fetchInfo: fetchInfo,\n      type: fetchInfo.dbType,\n      maxSize: maxSize,\n      columnNum: columnNum,\n      values: new Array(this.options.fetchArraySize)\n    };\n  }\n\n  processRowHeader(buf) {\n    buf.skipUB1();                              // flags\n    buf.skipUB2();                              // num requests\n    buf.skipUB4();                              // iteration number\n    buf.skipUB4();                              // num iters\n    buf.skipUB2();                              // buffer length\n    let numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      this.bitVector = Buffer.from(buf.readBytesWithLength());\n    }\n    numBytes = buf.readUB4();\n    if (numBytes > 0) {\n      buf.skipBytesChunked();                   // rxhrid\n    }\n  }\n\n  isDuplicateData(columnName) {\n    if (!this.bitVector) {\n      return false;\n    }\n    const byteNum = Math.floor(columnName / 8);\n    const bitNum = columnName % 8;\n    return (this.bitVector[byteNum] & (1 << bitNum)) === 0;\n  }\n\n  processRowData(buf) {\n    let value;\n    for (const [col, variable] of this.outVariables.entries()) {\n      if (variable.isArray) {\n        variable.numElementsInArray = buf.readUB4();\n        const values = new Array(variable.numElementsInArray).fill(null);\n        for (let pos = 0; pos < variable.numElementsInArray; pos++) {\n          value = this.processColumnData(buf, variable, pos);\n          values[pos] = value;\n        }\n        variable.values[this.rowIndex] = values;\n      } else if (this.statement.isReturning) {\n        const numRows = buf.readUB4();\n        const values = Array(numRows).fill(null);\n        for (let j = 0; j < numRows; j++) {\n          values[j] = this.processColumnData(buf, variable, j);\n        }\n        variable.values[this.rowIndex] = values;\n      } else if (this.isDuplicateData(col)) {\n        if (this.rowIndex === 0 && variable.outConverter) {\n          value = variable.lastRawValue;\n        } else {\n          value = variable.values[this.statement.lastRowIndex];\n        }\n        variable.values[this.rowIndex] = value;\n      } else {\n        value = this.processColumnData(buf, variable, this.rowIndex);\n        variable.values[this.rowIndex] = value;\n      }\n    }\n    this.rowIndex++;\n    if (this.inFetch) {\n      this.statement.lastRowIndex = this.rowIndex - 1;\n      this.statement.bufferRowCount++;\n      this.bitVector = null;\n    }\n  }\n\n  processIOVector(buf) {\n    let numBytes;\n    buf.skipUB1();                              // flag\n    const temp16 = buf.readUB2();              // num requests\n    const temp32 = buf.readUB4();              // iter num\n    const numBinds = temp32 * 256 + temp16;\n    buf.skipUB4();                              // num iters this time\n    buf.skipUB2();                              // uac buffer length\n    numBytes = buf.readUB2();                   // bit vector for fast fetch\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    numBytes = buf.readUB2();                   // rowid\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    this.outVariables = [];\n    for (let i = 0; i < numBinds; i++) {              // bind directions\n      const bindInfo = this.statement.bindInfoList[i];\n      bindInfo.bindDir = buf.readUInt8();\n      if (bindInfo.bindDir === constants.TNS_BIND_DIR_INPUT) {\n        continue;\n      }\n      this.outVariables.push(bindInfo.bindVar);\n    }\n  }\n\n  processColumnData(buf, variable) {\n    const dbType = variable.type;\n    const oraTypeNum = dbType._oraTypeNum;\n    const csfrm = dbType._csfrm;\n    const maxSize = variable.maxSize;\n\n    let colValue = null;\n    if (maxSize === 0 && oraTypeNum !== constants.TNS_DATA_TYPE_LONG\n      && oraTypeNum !== constants.TNS_DATA_TYPE_LONG_RAW\n      && oraTypeNum !== constants.TNS_DATA_TYPE_UROWID) {\n      colValue = null;\n    } else if (\n      oraTypeNum === constants.TNS_DATA_TYPE_VARCHAR ||\n      oraTypeNum === constants.TNS_DATA_TYPE_CHAR ||\n      oraTypeNum === constants.TNS_DATA_TYPE_LONG\n    ) {\n      if (csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n      }\n      colValue = buf.readStr(csfrm);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_RAW ||\n      oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW) {\n      colValue = buf.readBytesWithLength();\n      if (colValue !== null) {\n        colValue = Buffer.from(colValue);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_NUMBER) {\n      colValue = buf.readOracleNumber();\n      if (!this.inFetch && colValue !== null)\n        colValue = parseFloat(colValue);\n    } else if (\n      oraTypeNum === constants.TNS_DATA_TYPE_DATE ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_LTZ ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_TZ\n    ) {\n      const useLocalTime = (oraTypeNum === constants.TNS_DATA_TYPE_DATE ||\n        oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP);\n      colValue = buf.readOracleDate(useLocalTime);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_ROWID) {\n      if (!this.inFetch) {\n        colValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      } else {\n        const numBytes = buf.readUInt8();\n        if (isNullLength(numBytes)) {\n          colValue = null;\n        } else {\n          const rowid = buf.readRowID();\n          colValue = utils.encodeRowID(rowid);\n        }\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_UROWID) {\n      if (!this.inFetch) {\n        colValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      } else {\n        colValue = buf.readURowID();\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_DOUBLE) {\n      colValue = buf.readBinaryDouble();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_FLOAT) {\n      colValue = buf.readBinaryFloat();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_INTEGER) {\n      colValue = buf.readOracleNumber();\n      if (colValue !== null)\n        colValue = parseFloat(colValue);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CURSOR) {\n      const numBytes = buf.readUInt8();\n      if (isNullLength(numBytes)) {\n        colValue = null;\n      } else {\n        colValue = this.createCursorFromDescribe(buf);\n        colValue.statement.cursorId = buf.readUB2();\n        // If the cursor ID is 0 for the returned ref cursor then\n        // it is an invalid cursor\n        if (colValue.statement.cursorId === 0 && variable.dir !== constants.BIND_IN) {\n          if (this.options.nullifyInvalidCursor) {\n            colValue = null;\n          } else {\n            errors.throwErr(errors.ERR_INVALID_REF_CURSOR);\n          }\n        }\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n      colValue = buf.readBool();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CLOB || oraTypeNum === constants.TNS_DATA_TYPE_BLOB) {\n      const bvalue = buf.readUB4();\n      if (bvalue > 0) { // Non Null data in column\n        colValue = new ThinLobImpl();\n        const length = buf.readUB8();\n        const chunkSize = buf.readUB4();\n        const locator = Buffer.from(buf.readBytesWithLength());\n        colValue.init(this.connection, locator, dbType, length, chunkSize);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_JSON) {\n      colValue = buf.readOson();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VECTOR) {\n      colValue = buf.readVector();\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n      const obj = buf.readDbObject();\n      if (obj.packedData) {\n        const objType = (variable.fetchInfo) ? variable.fetchInfo.dbTypeClass :\n          variable.typeClass;\n\n        if (variable.type === types.DB_TYPE_XMLTYPE) {\n          colValue = readXML(this.connection, obj.packedData);\n        } else {\n          colValue = new ThinDbObjectImpl(objType, obj.packedData);\n          colValue.toid = obj.toid;\n          colValue.oid = obj.oid;\n        }\n      }\n    } else {\n      errors.throwErr(errors.ERR_UNSUPPORTED_DATA_TYPE, dbType.num,\n        variable.columnNum);\n    }\n\n    if (!this.inFetch) {\n      const actualNumBytes = buf.readSB4();\n      if (actualNumBytes < 0 && oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n        colValue = null;\n\n      // For objects, maxsize validation is skipped\n      } else if (actualNumBytes !== 0 && colValue !== null &&\n        oraTypeNum !== constants.TNS_DATA_TYPE_INT_NAMED) {\n        this.saveDeferredErr(errors.ERR_INSUFFICIENT_BUFFER_FOR_BINDS);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_LONG || oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW || variable.maxSize > buf.caps.maxStringSize) {\n      buf.skipSB4();                            // null indicator\n      buf.skipUB4();                            // return code\n    }\n    return colValue;\n  }\n\n  processReturnParameter(buf) {\n    let keywordNum = 0;\n    let keyTextValue;\n    let numParams = buf.readUB2();              // al8o4l (ignored)\n\n    for (let i = 0; i < numParams; i++) {\n      buf.skipUB4();\n    }\n    let numBytes = buf.readUB2();               // al8txl (ignored)\n    if (numBytes > 0) {\n      buf.skipBytes(numBytes);\n    }\n    numParams = buf.readUB2();                  // num key/value pairs\n    for (let i = 0; i < numParams; i++) {\n      numBytes = buf.readUB2();                 // key\n      if (numBytes > 0) {\n        keyTextValue = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      numBytes = buf.readUB2();                 // value\n      if (numBytes > 0) {\n        buf.skipBytesChunked();\n      }\n      keywordNum = buf.readUB2();               // keyword num\n      if (keywordNum === constants.TNS_KEYWORD_NUM_CURRENT_SCHEMA) {\n        this.connection.currentSchema = keyTextValue;\n      } else if (keywordNum === constants.TNS_KEYWORD_NUM_EDITION) {\n        this.connection._edition = keyTextValue;\n      }\n    }\n    numBytes = buf.readUB2();                   // registration\n    if (numBytes > 0) {\n      buf.skip(numBytes);\n    }\n    if (this.arrayDmlRowCounts) {\n      const numRows = buf.readUB4();\n      const rowCounts = this.options.dmlRowCounts = [];\n      for (let i = 0; i < numRows; i++) {\n        const rowCount = buf.readUB8();\n        rowCounts.push(rowCount);\n      }\n    }\n  }\n\n  async postProcess() {\n    if (this.deferredErr) {\n      throw this.deferredErr;\n    }\n\n    if (this.outVariables) {\n      for (const variable of this.outVariables) {\n        if (variable.isArray) {\n          if (variable.outConverter) {\n            for (let pos = 0; pos < variable.numElementsInArray; pos++) {\n              variable.values[0][pos] = await variable.outConverter(variable.values[0][pos]);\n            }\n          }\n        } else {\n          if (variable.outConverter) {\n            variable.values[0] = await variable.outConverter(variable.values[0]);\n          }\n        }\n      }\n    }\n    await this.connection._populatePartialDbObjectTypes();\n    for (const resultSet of this.resultSetsToSetup) {\n      resultSet._setup(this.options, resultSet.metadata);\n      // LOBs always require define and they change the type that is actually\n      // returned by the server\n      for (const variable of resultSet.statement.queryVars) {\n        if (variable.type === types.DB_TYPE_CLOB ||\n            variable.type === types.DB_TYPE_NCLOB ||\n            variable.type === types.DB_TYPE_BLOB ||\n            variable.type === types.DB_TYPE_JSON ||\n            variable.type === types.DB_TYPE_VECTOR) {\n          if (variable.type !== variable.fetchInfo.fetchType) {\n            variable.type = variable.fetchInfo.fetchType;\n            variable.maxSize = constants.TNS_MAX_LONG_LENGTH;\n          }\n          if (!resultSet.statement.noPrefetch) {\n            resultSet.statement.requiresDefine = true;\n            resultSet.statement.noPrefetch = true;\n          }\n        }\n      }\n    }\n  }\n\n  preProcess() {\n    if (this.statement.isReturning && !this.parseOnly) {\n      this.outVariables = [];\n      for (const bindInfo of this.statement.bindInfoList) {\n        if (bindInfo.isReturnBind) {\n          this.outVariables.push(bindInfo.bindVar);\n        }\n      }\n    }\n\n    if (this.statement.isQuery) {\n      this.inFetch = true;\n      if (this.statement.queryVars) {\n        this.outVariables = [];\n        for (let i = 0; i < this.statement.queryVars.length; i++) {\n          this.outVariables.push(this.statement.queryVars[i]);\n        }\n      }\n    }\n  }\n\n  processBitVector(buf) {\n    this.numColumnsSent = buf.readUB2();\n    let numBytes = Math.floor(this.statement.numQueryVars / 8);\n    if (this.statement.numQueryVars % 8 > 0) {\n      numBytes += 1;\n    }\n    this.bitVector = Buffer.from(buf.readBytes(numBytes));\n  }\n\n  processBindParams(buf, params) {\n    const bindVars = [];\n    const nonReturningParams = [];\n    for (const bindInfo of params) {\n      if (!bindInfo.isReturnBind) {\n        nonReturningParams.push(bindInfo);\n      }\n      bindVars.push(bindInfo.bindVar);\n    }\n    this.writeColumnMetadata(buf, bindVars);\n    return nonReturningParams;\n  }\n\n  writeColumnMetadata(buf, bindVars) {\n    for (const variable of bindVars) {\n      let oraTypeNum = variable.type._oraTypeNum;\n      let maxSize = variable.maxSize || variable.type._bufferSizeFactor;\n      let lobPrefetchLength = 0;\n\n      // NCHAR, NVARCHAR reports ORA-01460: unimplemented or unreasonable\n      // conversion requested if maxSize is not multiplied by the\n      // bufferSizeFactor\n      if (variable.type._csfrm === constants.CSFRM_NCHAR) {\n        maxSize *= variable.type._bufferSizeFactor;\n      }\n      if ([constants.TNS_DATA_TYPE_ROWID, constants.TNS_DATA_TYPE_UROWID].includes(oraTypeNum)) {\n        oraTypeNum = constants.TNS_DATA_TYPE_VARCHAR;\n        maxSize = constants.TNS_MAX_UROWID_LENGTH;\n      }\n      let flag = constants.TNS_BIND_USE_INDICATORS;\n      if (variable.isArray) {\n        flag |= constants.TNS_BIND_ARRAY;\n      }\n      let contFlag = 0;\n      if (variable.type === types.DB_TYPE_BLOB ||\n          variable.type === types.DB_TYPE_CLOB ||\n          variable.type === types.DB_TYPE_NCLOB) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n      } else if (variable.type === types.DB_TYPE_JSON) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n        maxSize = lobPrefetchLength = constants.TNS_JSON_MAX_LENGTH;\n      } else if (variable.type === types.DB_TYPE_VECTOR) {\n        contFlag = constants.TNS_LOB_PREFETCH_FLAG;\n        maxSize = lobPrefetchLength = constants.TNS_VECTOR_MAX_LENGTH;\n      }\n      buf.writeUInt8(oraTypeNum);\n      buf.writeUInt8(flag);\n      // precision and scale are always written as zero as the server\n      // expects that and complains if any other value is sent!\n      buf.writeUInt8(0);\n      buf.writeUInt8(0);\n      if (maxSize > buf.caps.maxStringSize) {\n        buf.writeUB4(constants.TNS_MAX_LONG_LENGTH);\n      } else {\n        buf.writeUB4(maxSize);\n      }\n\n      if (variable.isArray) {\n        buf.writeUB4(variable.maxArraySize);\n      } else {\n        buf.writeUB4(0);                        // max num elements\n      }\n      buf.writeUB4(contFlag);\n      if (variable.objType) {\n        const objType = variable.objType;\n        buf.writeUB4(objType.oid.length);\n        buf.writeBytesWithLength(objType.oid);\n        buf.writeUB2(objType.version);\n      } else {\n        buf.writeUB4(0);                        // OID\n        buf.writeUB2(0);                        // version\n      }\n      if (variable.type._csfrm !== 0) {\n        buf.writeUB2(constants.TNS_CHARSET_UTF8);\n      } else {\n        buf.writeUB2(0);\n      }\n      buf.writeUInt8(variable.type._csfrm);\n      buf.writeUB4(lobPrefetchLength);          // max chars (LOB prefetch)\n      if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_12_2) {\n        buf.writeUB4(0);                        // oaccolid\n      }\n    }\n  }\n\n  writeBindParamsRow(buf, params, pos) {\n    const offset = this.offset;\n    let foundLong = false;\n    for (const bindInfo of params) {\n      if (bindInfo.isReturnBind)\n        continue;\n      const variable = bindInfo.bindVar;\n      if (variable.isArray) {\n        const numElements = variable.values.length;\n        buf.writeUB4(numElements);\n        for (let i = 0; i < numElements; i++) {\n          this.writeBindParamsColumn(buf, variable, variable.values[i]);\n        }\n      } else {\n        if ((!this.statement.isPlSql) && variable.maxSize > buf.caps.maxStringSize) {\n          foundLong = true;\n        } else {\n          this.writeBindParamsColumn(buf, variable,\n            variable.values[pos + offset]);\n        }\n      }\n    }\n    if (foundLong) {\n      for (const bindInfo of params) {\n        if (bindInfo.isReturnBind)\n          continue;\n        const variable = bindInfo.bindVar;\n        if (variable.maxSize > buf.caps.maxStringSize) {\n          this.writeBindParamsColumn(buf, variable, variable.values[pos + offset]);\n        }\n      }\n    }\n  }\n\n  writeBindParamsColumn(buf, variable, value) {\n    const oraTypeNum = variable.type._oraTypeNum;\n    let tempVal;\n    if ((value === undefined || value === null) && oraTypeNum !== constants.TNS_DATA_TYPE_CURSOR && oraTypeNum !== constants.TNS_DATA_TYPE_JSON) {\n      if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n        buf.writeUInt8(constants.TNS_ESCAPE_CHAR);\n        buf.writeUInt8(1);\n      } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n        buf.writeUB4(0);                // TOID\n        buf.writeUB4(0);                // OID\n        buf.writeUB4(0);                // snapshot\n        buf.writeUB4(0);                // version\n        buf.writeUB4(0);                // packed data length\n        buf.writeUB4(constants.TNS_OBJ_TOP_LEVEL);    // flags\n      } else {\n        buf.writeUInt8(0);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_NUMBER ||\n      oraTypeNum === constants.TNS_DATA_TYPE_BINARY_INTEGER) {\n      if (typeof value === 'boolean') {\n        tempVal = (value) ? \"1\" : \"0\";\n      } else {\n        tempVal = value.toString();\n      }\n      buf.writeOracleNumber(tempVal);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VARCHAR ||\n      oraTypeNum === constants.TNS_DATA_TYPE_CHAR ||\n      oraTypeNum === constants.TNS_DATA_TYPE_LONG ||\n      oraTypeNum === constants.TNS_DATA_TYPE_RAW ||\n      oraTypeNum === constants.TNS_DATA_TYPE_LONG_RAW) {\n      if (variable.type._csfrm === constants.CSFRM_NCHAR) {\n        buf.caps.checkNCharsetId();\n        value = Buffer.from(value, constants.TNS_ENCODING_UTF16).swap16();\n      } else {\n        value = Buffer.from(value);\n      }\n      buf.writeBytesWithLength(value);\n    } else if (\n      oraTypeNum === constants.TNS_DATA_TYPE_DATE ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_TZ ||\n      oraTypeNum === constants.TNS_DATA_TYPE_TIMESTAMP_LTZ\n    ) {\n      buf.writeOracleDate(value, variable.type);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_DOUBLE) {\n      buf.writeUInt8(8);\n      buf.writeBinaryDouble(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BINARY_FLOAT) {\n      buf.writeUInt8(4);\n      buf.writeBinaryFloat(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CURSOR) {\n      let cursor = value;\n      if (!value) {\n        cursor = this.connection._createResultSet();\n      }\n      if (cursor.statement.cursorId === 0) {\n        buf.writeUInt8(1);\n        buf.writeUInt8(0);\n      } else {\n        buf.writeUB4(1);\n        buf.writeUB4(cursor.statement.cursorId);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_BOOLEAN) {\n      if (value) {\n        buf.writeUInt8(2);\n        buf.writeUInt16BE(0x0101);\n      } else {\n        buf.writeUInt16BE(0x0100);\n      }\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_CLOB || oraTypeNum === constants.TNS_DATA_TYPE_BLOB) {\n      buf.writeUB4(value._locator.length);\n      buf.writeBytesWithLength(value._locator);\n    } else if ([constants.TNS_DATA_TYPE_ROWID, constants.TNS_DATA_TYPE_UROWID].includes(oraTypeNum)) {\n      buf.writeBytesWithLength(Buffer.from(value));\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_JSON) {\n      buf.writeOson(value, this.connection._osonMaxFieldNameSize);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_VECTOR) {\n      buf.writeVector(value);\n    } else if (oraTypeNum === constants.TNS_DATA_TYPE_INT_NAMED) {\n      buf.writeDbObject(value);\n    } else {\n      const message = `Binding data of type ${variable.type}`;\n      errors.throwErr(errors.ERR_NOT_IMPLEMENTED, message);\n    }\n  }\n\n  createCursorFromDescribe(buf) {\n    const resultSet = this.connection._createResultSet(this.options);\n    resultSet.options.moreRowsToFetch = true;\n    resultSet.statement.isQuery = true;\n    resultSet.statement.requiresFullExecute = true;\n    this.processDescribeInfo(buf, resultSet);\n    return resultSet;\n  }\n\n  processImplicitResultSet(buf) {\n    this.options.implicitResultSet = [];\n    const numResults = buf.readUB4();\n    for (let i = 0; i < numResults; i++) {\n      const numBytes = buf.readUInt8();\n      buf.skipBytes(numBytes);\n      const childResultSet = this.createCursorFromDescribe(buf);\n      childResultSet.statement.cursorId = buf.readUB2();\n      this.options.implicitResultSet.push(childResultSet);\n    }\n  }\n}\n\nconst isNullLength = (len) => {\n  return len === 0 || len === constants.TNS_NULL_LENGTH_INDICATOR;\n};\n\nmodule.exports = MessageWithData;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst MessageWithData = require(\"./withData.js\");\nconst constants = require(\"../constants.js\");\nconst errors = require(\"../../../errors.js\");\n\n/**\n *\n * Executes OALL8 RPC function\n *\n * @class ExecuteMessage\n * @extends {MessageWithData}\n */\nclass ExecuteMessage extends MessageWithData {\n  /**\n   *\n   * @param {object} statement\n   * @param {object} options\n   */\n  constructor(connection, statement, options, resultSet) {\n    super(connection, statement, options);\n    if (!resultSet && statement.isQuery) {\n      resultSet = connection._createResultSet(options, statement);\n    }\n    this.resultSet = resultSet;\n    this.functionCode = constants.TNS_FUNC_EXECUTE;\n    this.bindParams = undefined;\n    this.currentRow = 0;\n  }\n\n  //-------------------------------------------------------------------------\n  // writeReExecuteMessage()\n  //\n  // Write the message for a full execute.\n  //-------------------------------------------------------------------------\n  writeExecuteMessage(buf) {\n    let options = 0x0;\n    let dmlOptions = 0;\n    let numParams = 0;\n    let numIters = 1;\n    // Configuring the options field thats send to the server\n    const stmt = this.statement;\n    const params = stmt.bindInfoList;\n\n    if (this.noImplicitRelease) {\n      dmlOptions |= constants.TNS_EXEC_OPTION_NO_IMPL_REL;\n    }\n\n    if (!stmt.requiresDefine && !this.parseOnly && params) {\n      numParams = params.length;\n    }\n    if (stmt.requiresDefine) {\n      options |= constants.TNS_EXEC_OPTION_DEFINE;\n    } else if (!this.parseOnly && stmt.sql) {\n      dmlOptions |= constants.TNS_EXEC_OPTION_IMPLICIT_RESULTSET;\n      options |= constants.TNS_EXEC_OPTION_EXECUTE;\n    }\n    if (stmt.cursorId === 0 || stmt.isDdl) {\n      options |= constants.TNS_EXEC_OPTION_PARSE;\n    }\n    if (stmt.isQuery) {\n      if (this.parseOnly) {\n        options |= constants.TNS_EXEC_OPTION_DESCRIBE;\n      } else {\n        if (stmt.cursorId === 0 || stmt.requiresDefine) {\n          numIters = this.options.prefetchRows;\n        } else {\n          numIters = this.options.fetchArraySize;\n        }\n        if (numIters > 0 && !stmt.noPrefetch) {\n          options |= constants.TNS_EXEC_OPTION_FETCH;\n        }\n      }\n    }\n    if (!stmt.isPlSql && !this.parseOnly) {\n      options |= constants.TNS_EXEC_OPTION_NOT_PLSQL;\n    } else if (stmt.isPlSql && numParams > 0) {\n      options |= constants.TNS_EXEC_OPTION_PLSQL_BIND;\n    }\n    if (numParams > 0) {\n      options |= constants.TNS_EXEC_OPTION_BIND;\n    }\n    if (this.batchErrors) {\n      options |= constants.TNS_EXEC_OPTION_BATCH_ERRORS;\n    }\n    if (this.arrayDmlRowCounts) {\n      dmlOptions = constants.TNS_EXEC_OPTION_DML_ROWCOUNTS;\n    }\n    if (this.options.autoCommit) {\n      options |= constants.TNS_EXEC_OPTION_COMMIT;\n    }\n    this.writePiggybacks(buf);\n    this.writeFunctionHeader(buf);\n    buf.writeUB4(options);                           // execute options\n    buf.writeUB4(stmt.cursorId);                     // cursor id\n    if (stmt.cursorId === 0 || stmt.isDdl) {\n      buf.writeUInt8(1);                             // pointer (cursor id)\n      buf.writeUB4(stmt.sqlLength);\n    } else {\n      buf.writeUInt8(0);                             // pointer (cursor id)\n      buf.writeUB4(0);\n    }\n    buf.writeUInt8(1);                               // pointer (vector)\n    buf.writeUB4(13);                                // al8i4 array length\n    buf.writeUInt8(0);                               // pointer (al8o4)\n    buf.writeUInt8(0);                               // pointer (al8o4l)\n    buf.writeUInt8(0);                               // prefetc buffer size\n    buf.writeUB4(numIters);                          // prefetch num rows\n    buf.writeUB4(constants.TNS_MAX_LONG_LENGTH);     // maximum long size\n    if (numParams === 0) {\n      buf.writeUInt8(0);                             // pointer (binds)\n      buf.writeUB4(0);                               // number of binds\n    } else {\n      buf.writeUInt8(1);                             // pointer (binds)\n      buf.writeUB4(numParams);                       // number of binds\n    }\n    buf.writeUInt8(0);                               // pointer (al8pp)\n    buf.writeUInt8(0);                               // pointer (al8txn)\n    buf.writeUInt8(0);                               // pointer (al8txl)\n    buf.writeUInt8(0);                               // pointer (al8kv)\n    buf.writeUInt8(0);                               // pointer (al8kvl)\n    if (stmt.requiresDefine) {\n      buf.writeUInt8(1);                             // pointer (al8doac)\n      buf.writeUB4(this.statement.queryVars.length);     // number of defines\n    } else {\n      buf.writeUInt8(0);\n      buf.writeUB4(0);\n    }\n    buf.writeUB4(0);                                 // registration id\n    buf.writeUInt8(0);                               // pointer (al8objlist)\n    buf.writeUInt8(1);                               // pointer (al8objlen)\n    buf.writeUInt8(0);                               // pointer (al8blv)\n    buf.writeUB4(0);                                 // al8blv\n    buf.writeUInt8(0);                               // pointer (al8dnam)\n    buf.writeUB4(0);                                 // al8dnaml\n    buf.writeUB4(0);                                 // al8regid_msb\n    if (this.arrayDmlRowCounts) {\n      buf.writeUInt8(1);                             // pointer (al8pidmlrc)\n      buf.writeUB4(this.numExecs);                   // al8pidmlrcbl\n      buf.writeUInt8(1);                             // pointer (al8pidmlrcl)\n    } else {\n      buf.writeUInt8(0);                             // pointer (al8pidmlrc)\n      buf.writeUB4(0);                               // al8pidmlrcbl\n      buf.writeUInt8(0);                             // pointer (al8pidmlrcl)\n    }\n    if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_12_2) {\n      buf.writeUInt8(0);                             // pointer (al8sqlsig)\n      buf.writeUB4(0);                               // SQL signature length\n      buf.writeUInt8(0);                             // pointer (SQL ID)\n      buf.writeUB4(0);                               // allocated size of SQL ID\n      buf.writeUInt8(0);                             // pointer (length of SQL ID)\n      if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_12_2_EXT1) {\n        buf.writeUInt8(0);                           // pointer (chunk ids)\n        buf.writeUB4(0);                             // number of chunk ids\n      }\n    }\n    if (stmt.cursorId === 0 || stmt.isDdl) {\n      if (stmt.sql) {\n        buf.writeBytesWithLength(stmt.sqlBytes);\n        buf.writeUB4(1);                             // al8i4[0] parse\n      } else {\n        errors.throwErr(errors.ERR_INVALID_REF_CURSOR);\n      }\n    } else {\n      buf.writeUB4(0);                               // al8i4[0] parse\n    }\n    if (stmt.isQuery) {\n      if (stmt.cursorId === 0) {\n        buf.writeUB4(0);                             // al8i4[1] execution count\n      } else {\n        buf.writeUB4(numIters);\n      }\n    } else {\n      buf.writeUB4(this.numExecs);                   // al8i4[1] execution count\n    }\n    buf.writeUB4(0);                                 // al8i4[2]\n    buf.writeUB4(0);                                 // al8i4[3]\n    buf.writeUB4(0);                                 // al8i4[4]\n    buf.writeUB4(0);                                 // al8i4[5] SCN (part 1)\n    buf.writeUB4(0);                                 // al8i4[6] SCN (part 2)\n    buf.writeUB4((stmt.isQuery) ? 1 : 0);            // al8i4[7] is query\n    buf.writeUB4(0);                                 // al8i4[8]\n    buf.writeUB4(dmlOptions);                        // al8i4[9] DML row counts/implicit\n    buf.writeUB4(0);                                 // al8i4[10]\n    buf.writeUB4(0);                                 // al8i4[11]\n    buf.writeUB4(0);                                 // al8i4[12]\n\n    /*\n     * write column metadata and bind params\n     */\n    if (stmt.requiresDefine) {\n      this.writeColumnMetadata(buf, this.statement.queryVars);\n    } else if (numParams > 0) {\n      return this.processBindParams(buf, params);\n    }\n  }\n\n  //-------------------------------------------------------------------------\n  // writeReExecuteMessage()\n  //\n  // Write the message header for a re-execute and return the bind parameters.\n  //-------------------------------------------------------------------------\n  writeReExecuteMessage(buf) {\n    const stmt = this.statement;\n    let params = stmt.bindInfoList;\n    let execFlag1 = 0, execFlag2 = 0, numIters;\n    if (params !== undefined) {\n      if (!stmt.isQuery) {\n        this.outVariables = [];\n        params.forEach(info => {\n          if (info.bindDir !== constants.TNS_BIND_DIR_INPUT) {\n            this.outVariables.push(info.bindVar);\n          }\n        });\n      }\n\n      const tmpparams = [];\n      params.forEach(info => {\n        if (info.bindDir !== constants.TNS_BIND_DIR_OUTPUT && !info.isReturnBind) {\n          tmpparams.push(info);\n        }\n      });\n      params = tmpparams;\n    }\n\n    if (this.functionCode === constants.TNS_FUNC_REEXECUTE_AND_FETCH) {\n      execFlag1 |= constants.TNS_EXEC_OPTION_EXECUTE;\n      numIters = this.options.prefetchRows;\n    } else {\n      if (this.options.autoCommit) {\n        execFlag2 |= constants.TNS_EXEC_OPTION_COMMIT_REEXECUTE;\n      }\n      numIters = this.numExecs;\n    }\n    this.writePiggybacks(buf);\n    this.writeFunctionHeader(buf);\n    buf.writeUB4(stmt.cursorId);\n    buf.writeUB4(numIters);\n    buf.writeUB4(execFlag1);\n    buf.writeUB4(execFlag2);\n    return params;\n  }\n\n  //-------------------------------------------------------------------------\n  // encode()\n  //\n  // Write the execute message to the buffer. Two types of execute messages\n  // are possible: one for a full execute and the second, simpler message,\n  // for when an existing cursor is being re-executed.\n  //-------------------------------------------------------------------------\n  encode(buf) {\n\n    // no rows have yet been sent so the header information needs to be sent\n    if (this.currentRow === 0) {\n      const stmt = this.statement;\n      if (stmt.cursorId !== 0 && !stmt.requiresFullExecute && !this.parseOnly && !stmt.requiresDefine && !stmt.noPrefetch && !stmt.isDdl && !this.batchErrors) {\n        if (stmt.isQuery && this.options.prefetchRows > 0) {\n          this.functionCode = constants.TNS_FUNC_REEXECUTE_AND_FETCH;\n        } else {\n          this.functionCode = constants.TNS_FUNC_REEXECUTE;\n        }\n        this.bindParams = this.writeReExecuteMessage(buf);\n      } else {\n        this.functionCode = constants.TNS_FUNC_EXECUTE;\n        this.bindParams = this.writeExecuteMessage(buf);\n      }\n    }\n\n    // if any bind parameters need to be sent, do that\n    // after each row is sent, check to see whether a pause should be performed\n    if (this.bindParams && this.bindParams.length > 0) {\n      const adapter = buf.nsi.ntAdapter;\n      while (this.currentRow < this.numExecs) {\n        buf.writeUInt8(constants.TNS_MSG_TYPE_ROW_DATA);\n        this.writeBindParamsRow(buf, this.bindParams, this.currentRow);\n        this.currentRow++;\n        if (this.currentRow < this.numExecs && adapter.shouldPauseWrite())\n          return true;\n      }\n    }\n\n    // reset state in case message is resent\n    this.currentRow = 0;\n    this.bindParams = undefined;\n\n  }\n\n}\n\nmodule.exports = ExecuteMessage;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require(\"../constants.js\");\nconst MessageWithData = require(\"./withData.js\");\nconst errors = require(\"../../../errors.js\");\n\n/**\n * Executes OFETCH RPC\n *\n * @class FetchMessage\n * @extends {MessageWithData}\n */\nclass FetchMessage extends MessageWithData {\n\n  constructor(connection, statement, options, resultSet) {\n    super(connection, statement, options);\n    this.resultSet = resultSet;\n    this.functionCode = constants.TNS_FUNC_FETCH;\n  }\n\n  //-------------------------------------------------------------------------\n  // encode()\n  //\n  // Write the cursor ID and the number of rows to be fetched in the\n  // Fetch Message RPC\n  //-------------------------------------------------------------------------\n  encode(buf) {\n    this.writeFunctionHeader(buf);\n    if (this.statement.cursorId === 0) {\n      errors.throwErr(errors.ERR_CURSOR_HAS_BEEN_CLOSED);\n    }\n    buf.writeUB4(this.statement.cursorId);\n    buf.writeUB4(this.options.fetchArraySize);\n  }\n\n}\n\nmodule.exports = FetchMessage;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst ResultSetImpl = require('../impl/resultset.js');\nconst ExecuteMessage = require('./protocol/messages/execute.js');\nconst FetchMessage = require('./protocol/messages/fetch.js');\n\nclass ThinResultSetImpl extends ResultSetImpl {\n\n  //---------------------------------------------------------------------------\n  // _fetchMoreRows()\n  //\n  // Fetches more rows from the database. This is done by means of the full\n  // OAL8 RPC if needed; otherwise, the simpler OFETCH RPC is used.\n  //---------------------------------------------------------------------------\n  async _fetchMoreRows(options) {\n    const cls = (this.statement.requiresFullExecute) ? ExecuteMessage : FetchMessage;\n    const message = new cls(this.connection, this.statement, options, this);\n    await this.connection._protocol._processMessage(message);\n    this.statement.requiresFullExecute = false;\n  }\n\n  //---------------------------------------------------------------------------\n  // Set the metadata info for a new resultSet object\n  //---------------------------------------------------------------------------\n  _resultSetNew(connection, statement, options) {\n    this.connection = connection;\n    this.statement = statement;\n    this._nestedCursorIndices = [];\n    this.options = options;\n    this.prefetchRowsProcessed = false;\n    this.statement.bufferRowIndex = 0;\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns the statement to cache so that it can be used later\n  //---------------------------------------------------------------------------\n  close() {\n    this.connection._returnStatement(this.statement);\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns rows fetched to the common layer in array format\n  //---------------------------------------------------------------------------\n  _processRows(numRowsFetched) {\n    const rows = [];\n    const bufferRowIndex = this.statement.bufferRowIndex;\n    for (let row = bufferRowIndex; row < bufferRowIndex + numRowsFetched; row++) {\n      const rowObj = [];\n      for (let col = 0; col < this.statement.numQueryVars; col++) {\n        rowObj.push(this.statement.queryVars[col].values[row]);\n      }\n      rows.push(rowObj);\n    }\n    this.statement.bufferRowIndex += numRowsFetched;\n    if (this.statement.bufferRowIndex === this.statement.bufferRowCount) {\n      this.statement.bufferRowCount = 0;\n      this.statement.bufferRowIndex = 0;\n    }\n    return rows;\n  }\n\n  //---------------------------------------------------------------------------\n  // getRows()\n  //\n  // Fetches the specified number of rows from the database and returns them to\n  // the common layer for processing.\n  //---------------------------------------------------------------------------\n  async getRows(numRows, options) {\n    options.fetchArraySize = numRows || this.options.fetchArraySize;\n    options.prefetchRows = this.options.prefetchRows;\n    if (this.statement.bufferRowCount - this.statement.bufferRowIndex >= options.fetchArraySize) {\n      return this._processRows(options.fetchArraySize);\n    } else {\n      // We fetch for the required number of row\n      options.fetchArraySize = options.fetchArraySize - (this.statement.bufferRowCount - this.statement.bufferRowIndex);\n      const prevBufferRowCount = this.statement.bufferRowCount;\n      if (this.statement.moreRowsToFetch && options.fetchArraySize > 0) {\n        await this._fetchMoreRows(options);\n      }\n      options.fetchArraySize = numRows || this.options.fetchArraySize;\n      if (prevBufferRowCount === this.statement.bufferRowCount) {\n        const numRowsFetched = this.statement.bufferRowCount - this.statement.bufferRowIndex;\n        this.statement.bufferRowCount = 0;\n        if (numRowsFetched > 0) {\n          return this._processRows(numRowsFetched);\n        }\n        return [];\n      }\n    }\n    const numRowsFetched = this.statement.bufferRowCount - this.statement.bufferRowIndex;\n    return this._processRows(numRowsFetched);\n  }\n\n}\n\nmodule.exports = ThinResultSetImpl;\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require(\"./constants.js\");\nconst errors = require('../../errors');\n\n/**\n * Negotiates Compiletime and Runtime capabilities\n *\n */\nclass Capabilities {\n\n  constructor(nscon) {\n    this.protocolVersion = nscon.sAtts.version;\n    this.ttcFieldVersion = constants.TNS_CCAP_FIELD_VERSION_MAX;\n    this.supports12cLogon = true;\n    this.supportsOob = false;\n    this.nCharsetId = constants.TNS_CHARSET_UTF16;\n    this.compileCaps = Buffer.alloc(constants.TNS_CCAP_MAX);\n    this.runtimeCaps = Buffer.alloc(constants.TNS_RCAP_MAX);\n    this.initCompileCaps(nscon);\n    this.initRuntimeCaps();\n    this.maxStringSize = 0;\n  }\n\n  adjustForServerCompileCaps(serverCaps, nscon) {\n    if (serverCaps[constants.TNS_CCAP_FIELD_VERSION] < this.ttcFieldVersion) {\n      this.ttcFieldVersion = serverCaps[constants.TNS_CCAP_FIELD_VERSION];\n      this.compileCaps[constants.TNS_CCAP_FIELD_VERSION] =\n        this.ttcFieldVersion;\n    }\n    if ((this.ttcFieldVersion < constants.TNS_CCAP_FIELD_VERSION_23_4\n      && nscon.endOfRequestSupport)) {\n      // endOfRequestSupport used only from 23.4 onwards and not for 23.3\n      this.compileCaps[constants.TNS_CCAP_TTC4]\n        ^= constants.TNS_CCAP_END_OF_REQUEST;\n      nscon.endOfRequestSupport = false;\n    }\n  }\n\n  adjustForServerRuntimeCaps(serverCaps) {\n    if (serverCaps[constants.TNS_RCAP_TTC] & constants.TNS_RCAP_TTC_32K) {\n      this.maxStringSize = 32767;\n    } else {\n      this.maxStringSize = 4000;\n    }\n  }\n\n  initCompileCaps(nscon) {\n    this.compileCaps[constants.TNS_CCAP_SQL_VERSION] =\n      constants.TNS_CCAP_SQL_VERSION_MAX;\n    this.compileCaps[constants.TNS_CCAP_LOGON_TYPES] =\n      constants.TNS_CCAP_O5LOGON | constants.TNS_CCAP_O5LOGON_NP |\n      constants.TNS_CCAP_O7LOGON | constants.TNS_CCAP_O8LOGON_LONG_IDENTIFIER |\n      constants.TNS_CCAP_O9LOGON_LONG_PASSWORD;\n    this.compileCaps[constants.TNS_CCAP_FIELD_VERSION] = this.ttcFieldVersion;\n    this.compileCaps[constants.TNS_CCAP_SERVER_DEFINE_CONV] = 1;\n    this.compileCaps[constants.TNS_CCAP_TTC1] =\n      constants.TNS_CCAP_FAST_BVEC | constants.TNS_CCAP_END_OF_CALL_STATUS |\n      constants.TNS_CCAP_IND_RCD;\n    this.compileCaps[constants.TNS_CCAP_OCI1] =\n      constants.TNS_CCAP_FAST_SESSION_PROPAGATE |\n      constants.TNS_CCAP_APP_CTX_PIGGYBACK;\n    this.compileCaps[constants.TNS_CCAP_TDS_VERSION] =\n      constants.TNS_CCAP_TDS_VERSION_MAX;\n    this.compileCaps[constants.TNS_CCAP_RPC_VERSION] =\n      constants.TNS_CCAP_RPC_VERSION_MAX;\n    this.compileCaps[constants.TNS_CCAP_RPC_SIG] =\n      constants.TNS_CCAP_RPC_SIG_VALUE;\n    this.compileCaps[constants.TNS_CCAP_DBF_VERSION] =\n      constants.TNS_CCAP_DBF_VERSION_MAX;\n    this.compileCaps[constants.TNS_CCAP_LOB] =\n      constants.TNS_CCAP_LOB_UB8_SIZE | constants.TNS_CCAP_LOB_ENCS\n      | constants.TNS_CCAP_LOB_PREFETCH | constants.TNS_CCAP_LOB_TEMP_SIZE\n      | constants.TNS_CCAP_LOB_12C | constants.TNS_CCAP_LOB_PREFETCH_DATA;\n    this.compileCaps[constants.TNS_CCAP_UB2_DTY] = 1;\n    this.compileCaps[constants.TNS_CCAP_LOB2] =\n      constants.TNS_CCAP_LOB2_QUASI | constants.TNS_CCAP_LOB2_2GB_PREFETCH;\n    this.compileCaps[constants.TNS_CCAP_TTC3] =\n      constants.TNS_CCAP_IMPLICIT_RESULTS | constants.TNS_CCAP_BIG_CHUNK_CLR |\n      constants.TNS_CCAP_KEEP_OUT_ORDER;\n    this.compileCaps[constants.TNS_CCAP_TTC2] = constants.TNS_CCAP_ZLNP;\n    this.compileCaps[constants.TNS_CCAP_OCI2] = constants.TNS_CCAP_DRCP;\n    this.compileCaps[constants.TNS_CCAP_CLIENT_FN] =\n      constants.TNS_CCAP_CLIENT_FN_MAX;\n    this.compileCaps[constants.TNS_CCAP_TTC4] =\n      constants.TNS_CCAP_INBAND_NOTIFICATION;\n    if (nscon.endOfRequestSupport) {\n      this.compileCaps[constants.TNS_CCAP_TTC4] |= constants.TNS_CCAP_END_OF_REQUEST;\n    }\n    this.compileCaps[constants.TNS_CCAP_CTB_FEATURE_BACKPORT] =\n      constants.TNS_CCAP_CTB_IMPLICIT_POOL;\n    this.compileCaps[constants.TNS_CCAP_TTC5] =\n      constants.TNS_CCAP_VECTOR_SUPPORT;\n  }\n\n  initRuntimeCaps() {\n    this.runtimeCaps[constants.TNS_RCAP_COMPAT] = constants.TNS_RCAP_COMPAT_81;\n    this.runtimeCaps[constants.TNS_RCAP_TTC] =\n      constants.TNS_RCAP_TTC_ZERO_COPY | constants.TNS_RCAP_TTC_32K;\n  }\n\n  checkNCharsetId() {\n    if (this.nCharsetId !== constants.TNS_CHARSET_UTF16) {\n      errors.throwErr(errors.ERR_NCHAR_CS_NOT_SUPPORTED, this.nCharsetId);\n    }\n  }\n\n}\n\nmodule.exports = Capabilities;\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { BaseBuffer } = require('../../impl/datahandlers/buffer.js');\nconst { Buffer } = require('buffer');\nconst constants = require('./constants.js');\nconst oson = require('../../impl/datahandlers/oson.js');\nconst utils = require('./utils.js');\nconst vector = require('../../impl/datahandlers/vector.js');\nconst errors = require(\"../../errors.js\");\n\nconst TNS_BASE64_ALPHABET_ARRAY = Buffer.from(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", 'utf8');\nconst FAST_AUTH_END_OF_RPC_VALUE = 0x800;\nconst FAST_AUTH_END_OF_RPC_OFFSET = 0x8;\nconst MSG_TYPE_OFFSET = 11;\n\n/**\n * Class used for byte chunks used in the ChunkedBytesBuffer.\n */\nclass BytesChunk {\n\n  /**\n   * Constructor.\n   * @param {Number} number of bytes to add to the chunk (rounded to the\n   * nearest chunk size to avoid unnecessary allocations and copies)\n   */\n  constructor(numBytes) {\n    this.allocLen = numBytes;\n    const remainder = numBytes % constants.CHUNKED_BYTES_CHUNK_SIZE;\n    if (remainder > 0) {\n      this.allocLen += (constants.CHUNKED_BYTES_CHUNK_SIZE - remainder);\n    }\n    this.buf = Buffer.allocUnsafe(this.allocLen);\n    this.actualLen = 0;\n  }\n\n}\n\n\n/**\n * Class used for handling chunked reads.\n */\nclass ChunkedBytesBuffer {\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    this.chunks = [];\n  }\n\n  /**\n   * End the chunked read and return a consolidated buffer.\n   */\n  endChunkedRead() {\n    if (this.chunks.length > 1) {\n      let totalNumBytes = 0;\n      for (const chunk of this.chunks) {\n        totalNumBytes += chunk.actualLen;\n      }\n      let pos = 0;\n      const consolidatedChunk = new BytesChunk(totalNumBytes);\n      for (const chunk of this.chunks) {\n        chunk.buf.copy(consolidatedChunk.buf, pos, 0, chunk.actualLen);\n        pos += chunk.actualLen;\n      }\n      consolidatedChunk.actualLen = totalNumBytes;\n      this.chunks = [consolidatedChunk];\n    }\n    const chunk = this.chunks[0];\n    return chunk.buf.subarray(0, chunk.actualLen);\n  }\n\n  /**\n   * Constructor.\n   */\n  getBuf(numBytes) {\n    let chunk;\n    if (this.chunks.length > 0) {\n      chunk = this.chunks[this.chunks.length - 1];\n      if (chunk.allocLen - chunk.actualLen < numBytes) {\n        chunk = undefined;\n      }\n    }\n    if (!chunk) {\n      chunk = new BytesChunk(numBytes);\n      this.chunks.push(chunk);\n    }\n    const buf = chunk.buf.subarray(chunk.actualLen,\n      chunk.actualLen + numBytes);\n    chunk.actualLen += numBytes;\n    return buf;\n  }\n\n  /**\n   * Start a chunked read. This ensures that only one chunk is available and\n   * its actual length is set to zero.\n   */\n  startChunkedRead() {\n    if (this.chunks.length > 0) {\n      this.chunks = this.chunks.splice(0, 1);\n      this.chunks[0].actualLen = 0;\n    }\n  }\n\n}\n\n\n/**\n * Encapsulates the Network Read Buffer\n *\n * @class ReadPacket\n */\n\nclass ReadPacket extends BaseBuffer {\n\n  /**\n   * Constructor.\n   * @param {Object} adapter used for sending/receiving data\n   * @param {Object} capabilities\n   */\n\n  constructor(nsi, caps) {\n    super();\n    this.nsi = nsi;\n    this.caps = caps;\n    this.chunkedBytesBuf = new ChunkedBytesBuffer();\n  }\n\n  /**\n   * Helper function that processes the length. If the length is defined as\n   * TNS_LONG_LENGTH_INDICATOR, a chunked read is performed.\n   */\n  _readBytesWithLength(numBytes) {\n    if (numBytes !== constants.TNS_LONG_LENGTH_INDICATOR) {\n      return this.readBytes(numBytes);\n    }\n    this.chunkedBytesBuf.startChunkedRead();\n    while (true) { // eslint-disable-line\n      const numBytesInChunk = this.readUB4();\n      if (numBytesInChunk === 0) {\n        break;\n      }\n      this.readBytes(numBytesInChunk, true);\n    }\n    return this.chunkedBytesBuf.endChunkedRead();\n  }\n\n  skipBytes(numBytes) {\n\n    // if no bytes are left in the buffer, a new packet needs to be fetched\n    // before anything else can take place\n    if (this.pos === this.size) {\n      this.receivePacket();\n    }\n\n    // if there is enough room in the buffer to satisfy the number of bytes\n    // requested, return the buffer directly\n    const numBytesLeft = this.numBytesLeft();\n    if (numBytes <= numBytesLeft) {\n      this.pos += numBytes;\n      return;\n    }\n    numBytes -= numBytesLeft;\n\n    // acquire packets until the requested number of bytes is satisfied\n    while (numBytes > 0) {\n      this.receivePacket();\n      const numSplitBytes = Math.min(numBytes, this.size - this.pos);\n      this.pos += numSplitBytes;\n      numBytes -= numSplitBytes;\n    }\n  }\n\n  /**\n   * Returns a buffer containing the specified number of bytes. If an\n   * insufficient number of bytes are available, a new packet is read.\n   * @param {Number} specifies the number of bytes to read from the buffer\n   */\n  readBytes(numBytes, inChunkedRead = false) {\n\n    // if no bytes are left in the buffer, a new packet needs to be fetched\n    // before anything else can take place\n    if (this.pos === this.size) {\n      this.receivePacket();\n    }\n\n    // if there is enough room in the buffer to satisfy the number of bytes\n    // requested, return the buffer directly\n    const numBytesLeft = this.numBytesLeft();\n    if (numBytes <= numBytesLeft) {\n      let buf;\n      if (inChunkedRead) {\n        buf = this.chunkedBytesBuf.getBuf(numBytes);\n        this.buf.copy(buf, 0, this.pos, this.pos + numBytes);\n      } else {\n        buf = this.buf.subarray(this.pos, this.pos + numBytes);\n      }\n      this.pos += numBytes;\n      return buf;\n    }\n\n    // the requested bytes are split across multiple packets; if a chunked read\n    // is in progress, a chunk is acquired that will accommodate the requested\n    // bytes; otherwise, a separate buffer will be allocated to accommodate the\n    // requested bytes\n    let buf;\n    if (inChunkedRead) {\n      buf = this.chunkedBytesBuf.getBuf(numBytes);\n    } else {\n      buf = Buffer.allocUnsafe(numBytes);\n    }\n\n    // copy the bytes to the buffer from the remainder of this packet\n    let offset = 0;\n    this.buf.copy(buf, offset, this.pos, this.pos + numBytesLeft);\n    offset += numBytesLeft;\n    numBytes -= numBytesLeft;\n\n    // acquire packets until the requested number of bytes is satisfied\n    while (numBytes > 0) {\n      this.receivePacket();\n      const numSplitBytes = Math.min(numBytes, this.size - this.pos);\n      this.buf.copy(buf, offset, this.pos, this.pos + numSplitBytes);\n      this.pos += numSplitBytes;\n      offset += numSplitBytes;\n      numBytes -= numSplitBytes;\n    }\n\n    return buf;\n\n  }\n\n  /**\n   * Receives a packet from the adapter.\n   */\n  receivePacket() {\n    if (this.savedPacketPos === this.savedPackets.length) {\n      const packet = this.nsi.syncRecvPacket();\n      if (!packet || this.nsi.isBreak)\n        throw new utils.OutOfPacketsError();\n      this.savedPackets.push(packet);\n    }\n    this.startPacket(this.savedPackets[this.savedPacketPos++]);\n  }\n\n  restorePoint() {\n    this.savedPacketPos = 0;\n    this.startPacket(this.savedPackets[this.savedPacketPos++]);\n    this.pos = this.savedPos;\n  }\n\n  savePoint() {\n    if (this.savedPackets) {\n      this.savedPackets = this.savedPackets.splice(this.savedPacketPos - 1);\n    } else {\n      this.savedPackets = [this.packet];\n    }\n    this.savedPacketPos = 1;\n    this.savedPos = this.pos;\n  }\n\n  startPacket(packet) {\n    this.packet = packet;\n    this.buf = packet.buf;\n    this.pos = 10;                      // skip packet heaader and data flags\n    this.size = packet.buf.length;\n    this.packetNum = packet.num;\n  }\n\n  /**\n   * Read packets from network.\n   * If checkRequestBoundary is passed as true, it\n   * would read all packets until end of request\n   * boundary is seen in nwk header.\n   */\n  async waitForPackets(checkRequestBoundary = false) {\n    let packet = await this.nsi.recvPacket();\n    if (!this.savedPackets) {\n      this.savedPackets = [packet];\n      this.savedPacketPos = 0;\n    } else {\n      this.savedPackets.push(packet);\n    }\n    if (checkRequestBoundary && this.nsi.endOfRequestSupport) {\n      while (packet.type === constants.TNS_PACKET_TYPE_DATA) {\n        // End Marker\n        if ((packet.buf.readUInt16BE(8) &\n            constants.TNS_DATA_FLAGS_END_OF_REQUEST)) {\n          break;\n        }\n\n        // Single Byte 1D packet\n        if (packet.buf.length === MSG_TYPE_OFFSET &&\n            packet.buf[MSG_TYPE_OFFSET - 1] ===\n            constants.TNS_MSG_TYPE_END_OF_REQUEST) {\n          break;\n        }\n        packet = await this.nsi.recvPacket();\n        this.savedPackets.push(packet);\n      }\n    }\n    this.startPacket(this.savedPackets[this.savedPacketPos++]);\n  }\n\n  /**\n   * Reads OSON (QLocator followed by data) and decodes it into a JavaScript\n   * object.\n   */\n  readOson() {\n    const numBytes = this.readUB4();\n    if (numBytes === 0) {\n      return null;\n    }\n    this.skipUB8();                     // size (unused)\n    this.skipUB4();                     // chunk size (unused)\n    const decoder = new oson.OsonDecoder(this.readBytesWithLength());\n    this.skipBytesChunked();            // locator (unused)\n    return decoder.decode();\n  }\n\n  readURowID() {\n    let outputOffset = 0, inputOffset = 1;\n    let buf = this.readBytesWithLength();\n    if (buf === null)\n      return null;\n    buf = this.readBytesWithLength();\n    let inputLen = buf.length;\n\n    // Handle physical rowid\n    if (buf && buf[0] === 1) {\n      const rba = buf.readUInt32BE(1);\n      const partitionID = buf.readUInt16BE(5);\n      const blockNum = buf.readUInt32BE(7);\n      const slotNum = buf.readUInt16BE(11);\n      return utils.encodeRowID({rba, partitionID, blockNum, slotNum});\n    }\n\n    // handle logical rowid\n    let outputLen = Math.floor(inputLen / 3) * 4;\n    const remainder = inputLen % 3;\n    if (remainder === 1) {\n      outputLen += 1;\n    } else if (remainder === 2) {\n      outputLen += 3;\n    }\n\n    const outputValue =  Buffer.allocUnsafe(outputLen);\n    inputLen -= 1;\n    outputValue[0] = 42;\n    outputOffset += 1;\n    while (inputLen > 0) {\n      // produce first byte of quadruple\n      let pos = buf[inputOffset] >> 2;\n      outputValue[outputOffset] = TNS_BASE64_ALPHABET_ARRAY[pos];\n      outputOffset += 1;\n\n      // produce second byte of quadruple, but if only one byte is left,\n      // produce that one byte and exit\n      pos = (buf[inputOffset] & 0x3) << 4;\n      if (inputLen == 1) {\n        outputValue[outputOffset] = TNS_BASE64_ALPHABET_ARRAY[pos];\n        break;\n      }\n      inputOffset += 1;\n      pos |= ((buf[inputOffset] & 0xf0) >> 4);\n      outputValue[outputOffset] = TNS_BASE64_ALPHABET_ARRAY[pos];\n      outputOffset += 1;\n\n      // produce third byte of quadruple, but if only two bytes are left,\n      // produce that one byte and exit\n      pos = (buf[inputOffset] & 0xf) << 2;\n      if (inputLen == 2) {\n        outputValue[outputOffset] = TNS_BASE64_ALPHABET_ARRAY[pos];\n        break;\n      }\n      inputOffset += 1;\n      pos |= ((buf[inputOffset] & 0xc0) >> 6);\n      outputValue[outputOffset] = TNS_BASE64_ALPHABET_ARRAY[pos];\n      outputOffset += 1;\n\n      // produce final byte of quadruple\n      pos = buf[inputOffset] & 0x3f;\n      outputValue[outputOffset] = TNS_BASE64_ALPHABET_ARRAY[pos];\n      outputOffset += 1;\n      inputOffset += 1;\n      inputLen -= 3;\n    }\n    return outputValue.toString('utf-8');\n  }\n\n  readRowID() {\n    const rba = this.readUB4();\n    const partitionID = this.readUB2();\n    this.skipUB1();\n    const blockNum = this.readUB4();\n    const slotNum = this.readUB2();\n    return {rba, partitionID, blockNum, slotNum};\n  }\n\n  /**\n   * Reads VECTOR data (QLocator followed by data) and decodes it into a\n   * JavaScript object.\n   */\n  readVector() {\n    const numBytes = this.readUB4();\n    if (numBytes === 0) {\n      return null;\n    }\n    this.skipUB8();                     // size (unused)\n    this.skipUB4();                     // chunk size (unused)\n    const decoder = new vector.VectorDecoder(this.readBytesWithLength());\n    this.skipBytesChunked();            // locator (unused)\n    return decoder.decode();\n  }\n\n  skipBytesChunked() {\n    const numBytes = this.readUInt8();\n    if (numBytes === 0 || numBytes === constants.TNS_NULL_LENGTH_INDICATOR) {\n      return;\n    }\n    if (numBytes !== constants.TNS_LONG_LENGTH_INDICATOR) {\n      this.skipBytes(numBytes);\n    } else {\n      while (true) { // eslint-disable-line\n        const tempNumBytes = this.readUB4();\n        if (tempNumBytes === 0)\n          break;\n        this.skipBytes(tempNumBytes);\n      }\n    }\n  }\n\n  readNullTerminatedBytes(maxSize = 50) {\n    let offset = 0;\n    const tmp = Buffer.allocUnsafe(maxSize);\n    while (offset < maxSize) {\n      tmp[offset] = this.readUInt8();\n      if (tmp[offset] === 0) {\n        break;\n      }\n      offset = offset + 1;\n    }\n    if (offset === maxSize) {\n      const reason = `Byte Arrray Exceeded MaxSize ${maxSize}`;\n      errors.throwErr(errors.ERR_INTERNAL, reason);\n    }\n    return tmp.subarray(0, offset + 1);\n  }\n\n}\n\n\n/**\n * Encapsulates the Network Write Buffer\n *\n * @class WritePacket\n */\nclass WritePacket extends BaseBuffer {\n\n  constructor(nsi, caps, protocol) {\n    super(nsi.sAtts.sdu);\n    this.size = this.maxSize;\n    this.isLargeSDU = nsi.sAtts.version >= constants.TNS_VERSION_MIN_LARGE_SDU;\n    this.protocol = protocol;\n    this.packetType = constants.TNS_PACKET_TYPE_DATA;\n    this.caps = caps;\n    this.nsi = nsi;\n  }\n\n  /**\n   * Grows the buffer by sending the existing buffer on the transport. A copy\n   * is made so that the existing buffer can be used for the next batch of data\n   * that needs to be sent\n   */\n  _grow() {\n    this._sendPacket();\n  }\n\n  /**\n   * Sends the data in the buffer on the transport. First, the packet header is\n   * set up by writing the size and packet type.\n   */\n  _sendPacket(finalPacket = false) {\n    const size = this.pos;\n    this.pos = 0;\n    if (this.isLargeSDU) {\n      this.writeUInt32BE(size);\n    } else {\n      this.writeUInt16BE(size);\n      this.writeUInt16BE(0);\n    }\n    this.writeUInt8(this.packetType);\n    this.writeUInt8(0);\n    this.writeUInt16BE(0);\n    let buf = this.buf.subarray(0, size);\n    if (!finalPacket) {\n      buf = Buffer.from(buf);\n      this.startPacket();\n    } else {\n      // Write End of RPC bit in last packet used only for fastAuth Message.\n      this.buf.writeUInt16BE(FAST_AUTH_END_OF_RPC_VALUE,\n        FAST_AUTH_END_OF_RPC_OFFSET);\n    }\n    if (!this.nsi.ntAdapter) {\n      errors.throwErr(errors.ERR_INVALID_CONNECTION);\n    }\n    this.nsi.ntAdapter.send(buf);\n  }\n\n  /**\n   * Starts a packet.\n   */\n  startPacket(dataFlags = 0) {\n    this.pos = constants.PACKET_HEADER_SIZE;\n    if (this.packetType === constants.TNS_PACKET_TYPE_DATA) {\n      this.writeUInt16BE(dataFlags);\n    }\n  }\n\n  /**\n   * Starts a database request.\n   */\n  startRequest(packetType, dataFlags = 0) {\n    this.packetType = packetType;\n    this.startPacket(dataFlags);\n  }\n\n  /**\n   * Ends a database request.\n   */\n  endRequest() {\n    if (this.pos > constants.PACKET_HEADER_SIZE) {\n      this._sendPacket(true);\n    }\n  }\n\n  writeKeyValue(key, value, flags = 0) {\n    const keyBytesLen = Buffer.byteLength(key);\n    const valBytesLen = Buffer.byteLength(value);\n    this.writeUB4(keyBytesLen);\n    this.writeBytesWithLength(Buffer.from(key));\n    this.writeUB4(valBytesLen);\n    if (valBytesLen > 0) {\n      this.writeBytesWithLength(Buffer.from(value));\n    }\n    this.writeUB4(flags);\n  }\n\n  /**\n   * Encodes a JavaScript object into OSON and then writes it (QLocator\n   * followed by data) to the buffer.\n   */\n  writeOson(value, osonMaxFieldSize) {\n    const encoder = new oson.OsonEncoder();\n    const buf = encoder.encode(value, osonMaxFieldSize);\n    this.writeQLocator(buf.length);\n    this.writeBytesWithLength(buf);\n  }\n\n  writeSeqNum() {\n    this.writeUInt8(this.protocol.sequenceId);\n    this.protocol.sequenceId = (this.protocol.sequenceId + 1) % 256;\n  }\n\n  /**\n   * Encodes a JavaScript object into VECTOR data and then writes it (QLocator\n   * followed by data) to the buffer.\n   */\n  writeVector(value) {\n    const encoder = new vector.VectorEncoder();\n    const buf = encoder.encode(value);\n    this.writeQLocator(buf.length);\n    this.writeBytesWithLength(buf);\n  }\n\n  //---------------------------------------------------------------------------\n  // writeQLocator()\n  //\n  // Writes a QLocator. QLocators are always 40 bytes in length.\n  //---------------------------------------------------------------------------\n  writeQLocator(numBytes) {\n    this.writeUB4(40);                  // QLocator length\n    this.writeUInt8(40);                // repeated length\n    this.writeUInt16BE(38);             // internal length\n    this.writeUInt16BE(constants.TNS_LOB_QLOCATOR_VERSION);\n    this.writeUInt8(constants.TNS_LOB_LOC_FLAGS_VALUE_BASED |\n      constants.TNS_LOB_LOC_FLAGS_BLOB | constants.TNS_LOB_LOC_FLAGS_ABSTRACT);\n    this.writeUInt8(constants.TNS_LOB_LOC_FLAGS_INIT);\n    this.writeUInt16BE(0);              // additional flags\n    this.writeUInt16BE(1);              // byt1\n    this.writeUInt64BE(numBytes);\n    this.writeUInt16BE(0);              // unused\n    this.writeUInt16BE(0);              // csid\n    this.writeUInt16BE(0);              // unused\n    this.writeUInt64BE(0);              // unused\n    this.writeUInt64BE(0);              // unused\n  }\n\n}\n\nmodule.exports = {\n  ReadPacket,\n  WritePacket\n};\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require(\"./constants.js\");\nconst Capabilities = require(\"./capabilities.js\");\nconst {WritePacket, ReadPacket} = require(\"./packet.js\");\nconst errors = require(\"../../errors\");\nconst utils = require(\"./utils.js\");\n\n/**\n * Handles protocol details.\n *\n * @class Protocol\n */\nclass Protocol {\n\n  constructor(conn) {\n    this._breakInProgress = false;\n    this.txnInProgress = false;\n    this.connInProgress = true;\n    this.nsi = conn.nscon;\n    this.sequenceId = 1;\n    /**\n     * Compile and Runtime capabilities negotiated with Server\n     * @type {object}\n     */\n    this.caps = new Capabilities(conn.nscon);\n    this.writeBuf = new WritePacket(conn.nscon, this.caps, this);\n    this.readBuf = new ReadPacket(conn.nscon, this.caps);\n    this.callTimeout = 0;\n  }\n\n  /**\n   * Decodes the message returned by the database. A message may consist of\n   * multiple packets. Not all packets may be available so if insufficient\n   * packets are available, the message decode function is expected to return\n   * the value true if more data is expected to follow.\n   *\n   * If that occurs, waiting occurs until more packets arrive.\n   *\n   * @param {object} message: the RPC dynamic structure specific to the RPC\n   */\n  async _decodeMessage(message) {\n    message.preProcess();\n    await this.readBuf.waitForPackets(true);\n    while (true) {     // eslint-disable-line\n      if (this.nsi.isBreak) {\n        await this.resetMessage();\n        delete this.readBuf.savedPackets;\n        await this.readBuf.waitForPackets();\n      }\n      try {\n        message.decode(this.readBuf);\n        break;\n      } catch (err) {\n        if (err instanceof utils.OutOfPacketsError) {\n          if (!this.nsi.isBreak) {\n            await this.readBuf.waitForPackets();\n            this.readBuf.restorePoint();\n          }\n          continue;\n        }\n        throw (err);\n      }\n    }\n    await message.postProcess();\n  }\n\n  /**\n   * Encodes the message to be sent to the database. A message may be encoded\n   * in multiple packets. In order to facilitate encoding of very large\n   * messages consisting of a large number of packets, the message encode\n   * function is expected to return the value true if more data is to follow.\n   *\n   * If that occurs, waiting occurs until the stream has drained and is ready\n   * to accept more data.\n   *\n   * @param {object} message: the RPC dynamic structure specific to the RPC\n   */\n  async _encodeMessage(message) {\n    const adapter = this.nsi.ntAdapter;\n    this.writeBuf.startRequest(constants.TNS_PACKET_TYPE_DATA);\n    while (message.encode(this.writeBuf)) {\n      await adapter.pauseWrite();\n    }\n    this.writeBuf.endRequest();\n  }\n\n  async _recoverFromError(caughtErr, message) {\n    /*\n     * We have NJS error(protocol related) detected during packet write/read\n     * operation.  Issue a break and reset to clear channel . We receive the\n     * response as ORA-1013 from the server.\n     */\n    try {\n      this.breakMessage();\n      this._breakInProgress = false;\n      await this.resetMessage();\n      await this.readBuf.waitForPackets();\n      message.decode(this.readBuf);\n    } catch (err) { // Recovery failed\n      this.nsi.disconnect();\n      const newErr = errors.getErr(errors.ERR_CONNECTION_CLOSED);\n      caughtErr.message = newErr.message +\n        \"\\nError recovery failed: \" + err.message +\n        \"\\nOriginal error: \" + caughtErr.message;\n      throw caughtErr;\n    }\n  }\n\n  /**\n   *\n   * @param {object} message The RPC dynamic structure specific to the RPC\n   * @return {Promise}\n   */\n  async _processMessage(message) {\n    let callTimer;\n    let callTimeoutExpired = false;\n    try {\n      if (this.callTimeout > 0) {\n        callTimer = setTimeout(() => {\n          callTimeoutExpired = true;\n          this.breakMessage();\n        }, this.callTimeout);\n      }\n      await this._encodeMessage(message);\n      if (message.messageType !== constants.TNS_MSG_TYPE_ONEWAY_FN) {\n        await this._decodeMessage(message);\n      }\n    } catch (err) {\n      if (!this.connInProgress &&\n          err.code !== errors.ERR_CONNECTION_CLOSED_CODE) {\n        await this._recoverFromError(err, message);\n      }\n      throw err;\n    } finally {\n      clearTimeout(callTimer);\n    }\n    if (message.flushOutBinds) {\n      await this.flushOutBindMessage(message);\n    }\n    this.txnInProgress = Boolean(message.callStatus & constants.TNS_EOCS_FLAGS_TXN_IN_PROGRESS);\n    // processes the call status flags returned by the server.\n    if (message.callStatus & constants.TNS_EOCS_FLAGS_SESS_RELEASE) {\n      message.connection.statementCache.clearCursors();\n    }\n\n    if (message.errorOccurred) {\n      if (callTimeoutExpired) {\n        errors.throwErr(errors.ERR_CALL_TIMEOUT_EXCEEDED, this.callTimeout);\n      }\n      if (message.retry) {\n        message.errorOccurred = false;\n        return await this._processMessage(message);\n      }\n      let err = new Error(message.errorInfo.message);\n      err.offset = message.errorInfo.pos;\n      err.errorNum = message.errorInfo.num;\n      err = errors.transformErr(err);\n      if (err.code === errors.ERR_CONNECTION_CLOSED_CODE) {\n        this.nsi.disconnect();\n      }\n      throw err;\n    }\n  }\n\n  async flushOutBindMessage(message) {\n    this.writeBuf.startRequest(constants.TNS_PACKET_TYPE_DATA);\n    this.writeBuf.writeUInt8(constants.TNS_MSG_TYPE_FLUSH_OUT_BINDS);\n    this.writeBuf.endRequest();\n    await this._decodeMessage(message);\n  }\n\n  /**\n   * Send break packet\n   */\n  breakMessage() {\n    this._breakInProgress = true;\n    this.nsi.sendBreak();\n  }\n\n  /**\n   * Reset the connection\n   */\n  async resetMessage() {\n    await this.nsi.reset();\n  }\n\n}\n\nmodule.exports = Protocol;\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n\nmodule.exports =  {\n  // TNS packet types\n  NSPTCN: 1,          // Connect\n  NSPTAC: 2,          // Accept\n  NSPTAK: 3,          // Acknowledge\n  NSPTRF: 4,          // Refuse\n  NSPTRD: 5,          // Redirect\n  NSPTDA: 6,          // Data\n  NSPTNL: 7,          // Null\n  NSPTAB: 9,          // Abort\n  NSPTRS: 11,         // Re-send\n  NSPTMK: 12,         // Marker\n  NSPTAT: 13,         // Attention\n  NSPTCNL: 14,        // Control information\n  NSPTDD: 15,         // data descriptor\n  NSPTHI: 19,         // Highest legal packet type\n\n  // Packet Header\n  NSPHDLEN: 0,       // Packet length\n  NSPHDPSM: 2,       // Packet checksum(deprecated in version 3.15 with large sdu support)\n  NSPHDTYP: 4,       // Packet type\n  NSPHDFLGS: 5,      // Packet flags\n  NSPHDHSM: 6,       // Header checksum\n  NSPSIZHD: 8,       // Packet header size\n\n  /* Packet flags for NSPHDFLGS */\n  NSPFSID: 0x01,     // SID is given\n  NSPFRDS: 0x02,     // ReDirect Separation of cnda vs cndo\n  NSPFRDR: 0x04,     // ReDiRected client Connect (NSPTCN)\n  NSPFLSD: 0x20,     // packet with large sdu field\n  NO_HEADER_FLAGS: 0,\n  NSPFSRN: 0x08,\n\n  // Connect Packet\n  NSPCNVSN: 8,    // My version number\n  NSPCNLOV: 10,   // Lowest version number I can be compatible with\n  NSPCNOPT: 12,   // Global service options\n  NSPCNSDU: 14,   // My SDU size\n  NSPCNTDU: 16,   // Maximum TDU size\n  NSPCNNTC: 18,   // NT characterstics\n  NSPCNTNA: 20,   // Line turnaround value\n  NSPCNONE: 22,   // The value '1' in my hardware byte order\n  NSPCNLEN: 24,   // Length of connect data\n  NSPCNOFF: 26,   // Offset to connect data\n  NSPCNMXC: 28,   // Maximum connect data you can send me\n  NSPCNFL0: 32,   // Connect flags\n  NSPCNFL1: 33,\n  NSPCNTMO: 50,   // local connection timeout val\n  NSPCNTCK: 52,   // local tick size\n  NSPCNADL: 54,\n  NSPCNAOF: 56,   // offset to reconnect tns addr\n  NSPCNLSD: 58,   // large sdu\n  NSPCNLTD: 62,   // large tdu\n  NSPCNCFL: 66,   // compression data\n  NSPCNCFL2: 70,  // connect flag2\n  //  NSPCNV310DAT : (NSPCNTMO + 8), start of connect data, V3.10   packet\n  //  NSPCNV315DAT : (NSPCNCFL + 4),\n  NSPCNDAT: 74,      // Start connect data\n  NSPMXCDATA: 230,   // Maximum length of connect data\n  // Connect flags (Used mostly by NA)\n  NSINAWANTED: 0x01, // Want to use NA\n  NSINAINTCHG: 0x02, // Interchange involved\n  NSINADISABLEDFORCONNECTION: 0x04, // Disable NA\n  NSINANOSERVICES: 0x08, // No NA services linked\n  NSINAREQUIRED: 0x10,   // NA is required\n  NSINAAUTHWANTED: 0x20, // Authentication linked\n  NSISUPSECRENEG: 0x80,  // bkwrd comp: SUPport SECurity RE-NEG\n  // Connect options\n  NSGDONTCARE: 0x0001, // \"don't care\"\n  NSGHDX: 0x0002, // half-duplex (w/ token management)\n  NSGFDX: 0x0004, // full-duplex\n  NSGHDRCHKSUM: 0x0008, // checksum on packet header\n  NSGPAKCHKSUM: 0x0010, // checksum on entire packet\n  NSGBROKEN: 0x0020, // provide broken connection notification\n  NSGUSEVIO: 0x0040, // can use Vectored I/O\n  NSGOSAUTHOK: 0x0080, // use OS authentication\n  NSGSENDATTN: 0x0200, // can send attention\n  NSGRECVATTN: 0x0400, // can recv attention\n  NSGNOATTNPR: 0x0800, // no attention processing\n  NSGRAW: 0x1000, // I/O is direct to/from transport\n  TNS_VERSION_DESIRED: 319,\n  TNS_VERSION_MINIMUM: 300,\n  TNS_VERSION_MIN_DATA_FLAGS: 318,\n  TNS_VERSION_MIN_END_OF_RESPONSE: 319,\n  TNS_UUID_OFFSET: 45,\n\n  /* Accept Packet */\n  NSPACVSN: 8,   // connection version\n  NSPACOPT: 10,  // global service options\n  NSPACSDU: 12,  // SDU size\n  NSPACTDU: 14,  // Maximum TDU\n  NSPACONE: 16,  // The value '1' in my hardware byte order\n  NSPACLEN: 18,  // connect data length\n  NSPACOFF: 20,  // offset to connect data\n  NSPACFL0: 22,  // connect flags\n  NSPACFL1: 23,\n  NSPACTMO: 24,  // connection pool timeout value\n  NSPACTCK: 26,  // local tick size\n  NSPACADL: 28,  // reconnect tns address length\n  NSPACAOF: 30,  // offset to reconnect tns addr\n  NSPACLSD: 32,  // Large sdu\n  NSPACLTD: 36,  // Large tdu\n  NSPACCFL: 40,  // compression flag\n  NSPACFL2: 41,  // accept flag2 (4 bytes)\n  NSPACV310DAT: 32, /* start of accept data, V3.10     packet */\n  NSPACV315DAT: 41, // start of accept data, V3.15     packet\n\n  /* Refuse Packet */\n  NSPRFURS: 8,  // User (appliction) reason for refusal\n  NSPRFSRS: 9,  // System (NS) reason for\n  NSPRFLEN: 10, // Length of refuse data\n  NSPRFDAT: 12, // Start of connect data\n  // Compression flags\n  NSPACCFON: 0x80, // 1st MSB:  compression on/off\n  NSPACCFAT: 0x40, // 2nd MSB :   compression auto\n  NSPACCFNT: 0x02, // Second last LSB : compression for non-tcp protocol\n  // Accept flag2\n  NSPACOOB: 0x00000001, // OOB support check at connection time\n  NSGPCHKSCMD: 0x01000000, // Support for Poll and Check logic\n  TNS_ACCEPT_FLAG_HAS_END_OF_REQUEST: 0x02000000,\n  TNS_ACCEPT_FLAG_FAST_AUTH: 0x10000000, // Support Fast Auth\n\n  /* Redirect packet */\n  NSPRDLEN: 8,   // Length of redirect data\n  NSPRDDAT: 10,  // Start of connect data\n\n  /* Data Packet */\n  NSPDAFLG: 8,    // Data flags\n  NSPDADAT: 10,   // Start of Data\n  NSPDAFEOF: 0x40, // \"end of file\"\n\n  /* Marker Packet */\n  NSPMKTYP: 8,     // marker type (see below)\n  NSPMKODT: 9,     // old (pre-V3.05) data byte\n  NSPMKDAT: 10,    // data byte\n  NSPMKTD0: 0,     // data marker - 0 data bytes\n  NSPMKTD1: 1,     // data marker - 1 data byte\n  NSPMKTAT: 2,     // Attention Marker\n  NIQBMARK: 1,     // Break marker\n  NIQRMARK: 2,     // Reset marker\n  NIQIMARK: 3,     // Interrupt marker\n\n  /* Control Packet */\n  NSPCTLCMD: 8,  // Control Command length is 2 bytes\n  NSPCTLDAT: 10, // Control Data length is specific to the Command type.\n  NSPCTL_SERR: 8,  // Error Control Command Type\n  NSPCTL_CLRATTN: 9,  // Clear OOB option\n\n  /* OPTIONS */\n  NSPDFSDULN: 8192,    // default SDU size\n  NSPABSSDULN: 2097152, // maximim SDU size\n  NSPMXSDULN: 65535,   // maximim SDU size\n  NSPMNSDULN: 512,     // minimum SDU size\n  NSPDFTDULN: 2097152, // default TDU size\n  NSPMXTDULN: 2097152, // maximum TDU size\n  NSPMNTDULN: 255,     // minimum TDU size\n  NSFIMM: 0x0040,  // immediate close\n\n  /* PARAMETERS */\n  DISABLE_OOB_STR: 'DISABLE_OOB', // disable OOB parameter\n  EXPIRE_TIME: 'EXPIRE_TIME', // expire Time\n  PEM_WALLET_FILE_NAME: 'ewallet.pem',\n\n  /* Get/Set options */\n  NT_MOREDATA: 1, // More Data in Transport available\n  NS_MOREDATA: 2, // More Data available to be read\n  SVCNAME: 3, // Service name\n  SERVERTYPE: 4, // Server type\n  REMOTEADDR: 5, // Remote Address\n  HEALTHCHECK: 6, // Health check of connection\n  CONNCLASS: 7, // Connection Class\n  PURITY: 8, // Purity\n  SID: 9, // SID\n\n  /* FLAGS */\n  NSNOBLOCK: 0x0001, // Do not block\n};\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Buffer = require(\"buffer\").Buffer;\nconst constants = require(\"./constants.js\");\nconst errors = require(\"../../errors.js\");\nconst MAX_CDATA_LEN = 230;\nconst NSPCNL = 74;\n\n/**\n * Connect Packet (NSPTCN)\n * @param {Buffer} connectData Outgoing Connect Data\n * @param {Object} sAtts Session Attributes\n */\nfunction ConnectPacket(connectData, sAtts, flags = 0) {\n  this.connectData = connectData;\n  this.connectDataLen = connectData.length;\n  this.overflow = false;\n\n  let size;\n\n  if (this.connectDataLen <= MAX_CDATA_LEN) {\n    size = NSPCNL + this.connectDataLen;\n  } else {\n    size = NSPCNL;\n    this.overflow = true;\n  }\n\n  /* Building Connect Packet */\n  this.buf = Buffer.allocUnsafe(size).fill(0);\n  this.buf.writeUInt16BE(size, constants.NSPHDLEN);\n  this.buf.writeUInt8(flags, constants.NSPHDFLGS);\n  this.buf.writeUInt8(constants.NSPTCN, constants.NSPHDTYP);\n\n  this.buf.writeUInt16BE(\n    constants.TNS_VERSION_DESIRED,\n    constants.NSPCNVSN\n  ); /* My version */\n  this.buf.writeUInt16BE(\n    constants.TNS_VERSION_MINIMUM,\n    constants.NSPCNLOV\n  ); /* Lowest version*/\n\n  /* Options:\n        Note : Node JS does not support TCP Out-of-band so not setting NSGSENDATTN or NSGRECVATTN\n  */\n  const options = constants.NSGDONTCARE;\n  //options = options | constants.NSGUSEVIO  /* Vectored I/O support.Uncomment when support is added */\n  this.buf.writeUInt16BE(options, constants.NSPCNOPT);\n\n  /* SDU */\n  if (sAtts.sdu > constants.NSPMXSDULN) {\n    this.buf.writeUInt16BE(constants.NSPMXSDULN, constants.NSPCNSDU);\n  } else {\n    this.buf.writeUInt16BE(sAtts.sdu, constants.NSPCNSDU);\n  }\n\n  /* TDU */\n  if (sAtts.tdu > constants.NSPMXSDULN) {\n    this.buf.writeUInt16BE(constants.NSPMXSDULN, constants.NSPCNTDU);\n  } else {\n    this.buf.writeUInt16BE(sAtts.tdu, constants.NSPCNTDU);\n  }\n\n  this.buf.writeUInt16BE(\n    sAtts.ntCha,\n    constants.NSPCNNTC\n  ); /* Protocol characteristics */\n\n  this.buf.writeUInt16BE(\n    1,\n    constants.NSPCNONE\n  ); /* Endianness does not matter for Node */\n\n  this.buf.writeUInt16BE(\n    this.connectDataLen,\n    constants.NSPCNLEN\n  ); /* Connect data Length */\n\n  this.buf.writeUInt16BE(\n    constants.NSPCNDAT,\n    constants.NSPCNOFF\n  ); /* Connect data offset */\n\n  this.buf.writeUInt8(\n    constants.NSISUPSECRENEG | constants.NSINADISABLEDFORCONNECTION,\n    constants.NSPCNFL0\n  ); /* NA disabled */\n\n  this.buf.writeUInt8(\n    constants.NSISUPSECRENEG | constants.NSINADISABLEDFORCONNECTION,\n    constants.NSPCNFL1\n  ); /* NA disabled *\n\n  /* Connection Pool is not supported */\n  this.buf.writeUInt16BE(0, constants.NSPCNTMO);\n  this.buf.writeUInt16BE(0, constants.NSPCNTCK);\n  this.buf.writeUInt16BE(0, constants.NSPCNADL);\n  this.buf.writeUInt16BE(0, constants.NSPCNAOF);\n\n  this.buf.writeUInt32BE(sAtts.sdu, constants.NSPCNLSD); /* SDU */\n  this.buf.writeUInt32BE(sAtts.tdu, constants.NSPCNLTD); /* TDU */\n  this.buf.writeUInt32BE(0, constants.NSPCNCFL); /* Compression not supported */\n\n  this.buf.writeUInt32BE(\n    0,\n    constants.NSPCNCFL2\n  ); /* No OOB path check support */\n\n  if (!this.overflow && this.connectDataLen) {\n    this.buf.write(connectData.toString('ascii'), constants.NSPCNDAT, this.connectDataLen, \"ascii\");\n  }\n}\n\n/**\n * Data Pakcet (NSPTDA)\n * @param {int} size of Data Packet\n * @param {boolean} isLargeSDU Large SDU\n */\nfunction DataPacket(isLargeSDU) {\n  this.dataPtr = 0; /* data offset start */\n  this.dataLen = 0; /* data offset end */\n  this.offset = 0; /* Offset for buffer read/write (fastpath) */\n  this.len = 0; /* Length of buffer read/write (fastpath) */\n  this.bufLen = 0; /* Length of buffer */\n\n  /**\n   * Create the Data Packet(Internal)\n   */\n  this.createPacket = function(len) {\n    /* Building Data Packet */\n    this.dataPtr = constants.NSPDADAT;\n    this.dataLen = constants.NSPDADAT;\n    this.buf = Buffer.allocUnsafe(len).fill(0);\n    this.buf.writeUInt8(0, constants.NSPHDFLGS);\n    this.buf.writeUInt8(constants.NSPTDA, constants.NSPHDTYP);\n    this.bufLen = len; /* Length of buffer */\n  };\n\n  /**\n   * Populate the Data Packet\n   * @param {Buffer} userbuf User Buffer\n   * @param {int} offset from which to fill data\n   * @param {int} len length of data\n   * @returns number of bytes copied\n   */\n  this.fillBuf = function(userbuf, offset, len, flags = 0) {\n    let bytes2Copy;\n\n    if (!this.buf) {\n      this.createPacket(len + constants.NSPDADAT); //Currently NS data packets are being used only in the connect/disconnect phase\n    }\n\n    if (len > this.bufLen - this.dataLen) {\n      bytes2Copy = this.bufLen - this.dataLen;\n    } else {\n      bytes2Copy = len;\n    }\n    if (bytes2Copy) {\n      userbuf.copy(this.buf, this.dataLen, offset, offset + bytes2Copy);\n    }\n    this.dataLen += bytes2Copy;\n\n    this.prepare2Send(flags);\n\n    return bytes2Copy;\n  };\n\n  /**\n   * Prepare Data Packet for send\n   * @param {int} flags Data flags\n   */\n  this.prepare2Send = function(flags = 0) {\n    if (isLargeSDU) {\n      this.buf.writeUInt32BE(this.dataLen, constants.NSPHDLEN);\n    } else {\n      this.buf.writeUInt16BE(this.dataLen, constants.NSPHDLEN);\n    }\n\n    this.buf.writeUInt16BE(flags, constants.NSPDAFLG);\n    this.dataBuf = this.buf.subarray(0, this.dataLen);\n  };\n\n  /**\n   * Construct Data Packet from receive data\n   * @param {Packet} packet NS packet\n   */\n  this.fromPacket = function(packet) {\n    this.buf = packet.buf;\n    this.dataLen = packet.buf.length;\n    this.dataPtr = constants.NSPDADAT;\n    this.offset = this.dataPtr;\n    this.len = this.dataLen;\n    packet.dataOffset = this.dataPtr;\n  };\n}\n\n/**\n * Accept Packet (NSPTAC)\n * @param {Packet} packet NS packet\n * @param {*} sAtts session Attributes\n */\nfunction AcceptPacket(packet, sAtts) {\n  this.buf = packet.buf;\n  this.len = packet.buf.length;\n\n  /* Set negotiated values */\n  sAtts.version = packet.buf.readUInt16BE(constants.NSPACVSN);\n  sAtts.options = packet.buf.readUInt16BE(constants.NSPACOPT);\n  sAtts.sdu = packet.buf.readUInt16BE(constants.NSPACSDU);\n  sAtts.tdu = packet.buf.readUInt16BE(constants.NSPACTDU);\n\n  if (sAtts.version >= 315) {\n    /* Large SDU Support */\n    sAtts.sdu = packet.buf.readUInt32BE(constants.NSPACLSD);\n    sAtts.tdu = packet.buf.readUInt32BE(constants.NSPACLTD);\n    sAtts.largeSDU = true;\n  }\n\n  /* Accept flags */\n  this.flag0 = packet.buf.readUInt8(constants.NSPACFL0);\n  this.flag1 = packet.buf.readUInt8(constants.NSPACFL1);\n\n  if (sAtts.version >= constants.TNS_VERSION_MIN_DATA_FLAGS) {\n    packet.flags = packet.buf.readUInt32BE(constants.NSPACFL2);\n  }\n}\n\n/**\n * Refuse Packet\n * @param {*} packet NS packet\n */\nfunction RefusePacket(packet) {\n  this.buf = packet.buf;\n  this.len = packet.buf.length;\n  this.userReason = packet.buf.readUInt8(constants.NSPRFURS);\n  this.systemReason = packet.buf.readUInt8(constants.NSPRFURS);\n  this.dataLen = packet.buf.readUInt16BE(constants.NSPRFLEN);\n  this.dataOff = constants.NSPRFDAT;\n\n  if (this.len > this.dataOff) {\n    this.dataBuf = this.buf.toString('ascii', this.dataOff, this.len);\n    this.overflow = false;\n  } else {\n    this.overflow = true;\n  }\n}\n\n/**\n * Redirect Packet (NSPTRD)\n * @param {*} packet NS packet\n */\nfunction RedirectPacket(packet) {\n  this.buf = packet.buf;\n  this.len = packet.buf.length;\n  this.flags = packet.flags;\n  this.dataLen = packet.buf.readUInt16BE(constants.NSPRDLEN);\n  this.dataOff = constants.NSPRDDAT;\n\n  if (this.len > this.dataOff) {\n    this.dataBuf = this.buf.subarray(this.dataOff, this.len);\n    this.overflow = false;\n  } else {\n    this.overflow = true;\n  }\n}\n\n/**\n * Marker Packet (NSPTMK)\n * @param {int} isLargeSDU Large SDU\n */\nfunction MarkerPacket(isLargeSDU) {\n  this.len = constants.NSPMKDAT + 1; /* Packet length */\n\n  // Packet Buffer\n  this.buf = Buffer.allocUnsafe(constants.NSPMKDAT + 1).fill(0);\n\n  if (isLargeSDU) {\n    this.buf.writeUInt32BE(this.len, constants.NSPHDLEN);\n  } else {\n    this.buf.writeUInt16BE(this.len, constants.NSPHDLEN);\n  }\n  this.buf.writeUInt8(0, constants.NSPHDFLGS);\n  this.buf.writeUInt8(constants.NSPTMK, constants.NSPHDTYP);\n\n  /**\n   * Prepare Marker packet for write\n   * @param {Uint8} type of Marker\n   * @param {Uint8} data Marker byte\n   */\n  this.prepare = function(type, data) {\n    this.buf.writeUInt8(type, constants.NSPMKTYP);\n    this.buf.writeUInt8(data, constants.NSPMKDAT);\n  };\n\n  /**\n   * Marker Packet receive\n   * @param {Packet} packet NS packet\n   * @param {NetworkSession} nsi Network Session\n   */\n  this.fromPacket = function(packet, nsi) {\n    this.type = packet.buf.readUInt8(constants.NSPMKTYP);\n\n    switch (this.type) {\n      case constants.NSPMKTD0:\n        nsi.isBreak = true;\n        break;\n      case constants.NSPMKTD1:\n        this.data = packet.buf.readUInt8(constants.NSPMKDAT);\n        nsi.isBreak = true;\n        if (this.data == constants.NIQRMARK) {\n          nsi.isReset = true;\n          nsi.isBreak = true;\n        }\n        break;\n      default:\n        errors.throwErr(errors.ERR_INVALID_PACKET);\n    }\n  };\n}\n\n/**\n * Control Packet NSPTCTL\n */\n\nfunction ControlPacket() {\n  /**\n   * Clear(reset) the packet\n   */\n  this.clear = function() {\n    this.errno = 0;\n    this.notif = null;\n    this.notifLen = 0;\n    this.cmd = 0;\n  };\n\n  /**\n   * Control Packet receive\n   * @param {*} packet NS packet\n   */\n  this.fromPacket = function(packet) {\n    const NSECMANSHUT = 12572; // CMAN SHUTDOWN\n    const NSESENDMESG = 12573; // SEND MESSAGE\n    const ORA_ERROR_EMFI_NUMBER = 22; //ORA -error\n    let emfi;\n    let err1;\n    let err2;\n\n    this.cmd = packet.buf.readUInt16BE(constants.NSPCTLCMD);\n    switch (this.cmd) {\n      case constants.NSPCTL_SERR:\n        emfi = packet.buf.readUInt32BE(constants.NSPCTLDAT);\n        err1 = packet.buf.readUInt32BE(constants.NSPCTLDAT + 4);\n        err2 = packet.buf.readUInt32BE(constants.NSPCTLDAT + 8);\n\n        if (err1 == NSECMANSHUT) {\n          this.errno = err1;\n        } else if (err1 == NSESENDMESG) {\n          this.errno = err1;\n          this.notifLen = err2;\n          this.notif = Buffer.allocUnsafe(err2 + 1).fill(0);\n          this.buf.copy(this.notif, 0, constants.NSPCTLDAT + 12, constants.NSPCTLDAT + 12 + err2);\n        } else {\n          this.errno = err1;\n          if (emfi == ORA_ERROR_EMFI_NUMBER) {\n            errors.throwErr(errors.ERR_CONNECTION_INBAND, \"ORA\" + \"-\" + err1);\n          } else {\n            errors.throwErr(errors.ERR_CONNECTION_INBAND, \"TNS\" + \"-\" + err1);\n          }\n        }\n        break;\n      default:\n        errors.throwErr(errors.ERR_INVALID_PACKET);\n    }\n  };\n}\n\nmodule.exports = {\n  ConnectPacket,\n  DataPacket,\n  AcceptPacket,\n  RefusePacket,\n  RedirectPacket,\n  MarkerPacket,\n  ControlPacket\n};\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"net\" has been externalized for browser compatibility. Cannot access \"net.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"tls\" has been externalized for browser compatibility. Cannot access \"tls.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"http\" has been externalized for browser compatibility. Cannot access \"http.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"timers\" has been externalized for browser compatibility. Cannot access \"timers.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require(\"../../errors.js\");\n\n\n/**\n  * Constant which implies that the VALUE has not been set to ATOM or LIST.\n*/\nconst RHS_NONE = 0;\n/**\n  * Constant which implies that the VALUE of an NVPair is an ATOM.\n*/\nconst  RHS_ATOM = 1;\n/**\n  * Constant which indicates that the VALUE of an NVPair is a list of NVPairs.\n*/\nconst RHS_LIST = 2;\n/**\n  * The List is in a regular format, i.e. (Name = Value) or (Name =\n  * (Name = Value)), and so on ..\n*/\nconst LIST_REGULAR = 3;\n/**\n  * The List is comma separated and looks like ( Name = Value, Value, Value )\n*/\nconst LIST_COMMASEP = 4;\n\n/**\n * An NVPair, or Name-Value Pair, is the structure used by SQL*Net to store\n * address information. An example of an NV-Pair is:\n *\n * CID = (ADDRESS = (PROTOCOL = TCP)(HOST = XYZ)(PORT = 1521))\n *\n * Here is a (brief) description of the syntax:\n *\n *  NVPair -> ( name = value ) value = atom | NVList\n*/\n\nclass NVPair {\n  constructor(name) {\n    this.name = name;\n    this.listType = LIST_REGULAR;\n    this.rhsType = RHS_NONE;\n  }\n  set setAtom(atom) {\n    if (this._containsComment(atom)) {\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    this.rhsType = RHS_ATOM;\n    this.list = null;\n    this.atom = atom;\n  }\n  /**\n    * Checks if the input string contains comment.\n    * @param {string} str - input string\n    * @returns {boolean}\n    */\n  _containsComment(str) {\n    for (let i = 0; i < str.length; i++) {\n      if (str.charAt(i) == '#') {\n        if (i != 0) {\n          // Check if this character is escaped\n          if (str.charAt(i - 1) == '\\\\')\n            continue;\n          else\n            return true;\n        } else {\n          // Entire line is a comment\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n     * gets the size of the list.\n     * @returns {integer}\n     */\n  getListSize() {\n    if (this.list == null)\n      return 0;\n    else\n      return this.list.length;\n  }\n  /**\n     * gets the element at a given position in the list.\n     * @param {integer} pos\n     * @returns {string}\n     */\n  getListElement(pos) {\n    if (this.list == null)\n      return null;\n    else\n      return this.list[pos];\n  }\n  /**\n     * adds a nvpair to the existing one.\n     * @param {nvpair} pair\n     */\n  addListElement(pair) {\n    if (this.list == null) {\n      this.rhsType = RHS_LIST;\n      this.list = new Array();\n      this.atom = null;\n    }\n    this.list.push(pair);\n    pair.parent = this;\n  }\n  /**\n     * removes an element at a given position.\n     * @param {integer} pos\n     */\n  removeListElement(pos) {\n    if (this.list != null) {\n      this.list.splice(pos, 1);\n      if (this.getListSize == 0) {\n        this.list = null;\n        this.rhsType = RHS_NONE;\n      }\n    }\n  }\n  /**\n    * Returns an empty string with the number specified in the argument. Used for\n     * indentation of multi-level NVPairs as they are stored\n     *\n     * @param count\n     *          Number of spaces required in the blank string.\n    */\n  _space(count) {\n    var blank_str = \"\";\n    for (let i = 0;i < count;i++) {\n      blank_str += \" \";\n    }\n    return blank_str;\n  }\n\n  /**\n  * Returns the value of an NVPair (and all child NVPairs) as a readable\n  * String.\n    */\n  valueToString() {\n    let out = \"\";\n    if (this.rhsType == RHS_ATOM) {\n      out = out + this.atom;\n    } else if (this.rhsType == RHS_LIST) {\n      if (this.listType == LIST_REGULAR) {\n        for (let i = 0; i < this.getListSize(); i++) {\n          out = out + this.getListElement(i).toString();\n        }\n      } else if (this.listType == LIST_COMMASEP) {\n        for (let i = 0; i < this.getListSize(); i++) {\n          const listElem = this.getListElement(i);\n          out = out + listElem.name;\n          if (i != this.getListSize() - 1)\n            out = out + \", \";\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n    *\n    * @returns string representation of the nvpair\n    */\n  toString() {\n    let out = \"(\" + this.name + \"=\";\n    if (this.rhsType == RHS_ATOM) {\n      out = out + this.atom;\n    } else if (this.rhsType == RHS_LIST) {\n      if (this.listType == LIST_REGULAR) {\n        for (let i = 0; i < this.getListSize(); i++) {\n          out = out + this.getListElement(i).toString();\n        }\n      } else if (this.listType == LIST_COMMASEP) {\n        out = out + \" (\";\n        for (let i = 0; i < this.getListSize(); i++) {\n          const listElem = this.getListElement(i);\n          out = out + listElem.name;\n\n          if (i != this.getListSize() - 1)\n            out = out + \", \";\n        }\n        out = out + \")\";\n      }\n    }\n    out = out + \")\";\n    return out;\n  }\n\n\n}\n/**\n   * Constant which indicates that there are no more tokens left.\n   */\nconst  TKN_NONE = 0;\n\n/**\n   * Constant for left parenthesis '(' token.\n   */\nconst TKN_LPAREN = 1;\n\n/**\n   * Constant for right parenthesis ')' token.\n   */\nconst TKN_RPAREN = 2;\n\n/**\n   * Constant for comma token ',' token.\n   */\nconst TKN_COMMA = 3;\n\n/**\n   * Constant for equal sign '=' token.\n   */\nconst TKN_EQUAL = 4;\n\n/**\n   * Constant for literal token.\n   */\nconst TKN_LITERAL = 8;\n\n/**\n   * Constant marking end of NVString.\n   */\nconst TKN_EOS = 9;\n\n/*\n   * Characters used for comparison for tokens. When the analyzer hits and\n   * unescaped TKN_LPAREN_VALUE it interprets it as a TKN_LPAREN token.\n   */\nconst TKN_LPAREN_VALUE = '(';\nconst TKN_RPAREN_VALUE = ')';\nconst TKN_COMMA_VALUE = ',';\nconst TKN_EQUAL_VALUE = '=';\nconst TKN_BKSLASH_VALUE = '\\\\';\nconst TKN_DQUOTE_VALUE = \"\\\"\";\nconst TKN_SQUOTE_VALUE = '\\'';\nconst TKN_EOS_VALUE = '%';\n\n/*\n   * Characters which are considered whitespace.\n   */\nconst TKN_SPC_VALUE = ' ';\nconst TKN_TAB_VALUE = '\\t';\nconst TKN_LF_VALUE = '\\n';\nconst TKN_CR_VALUE = '\\r';\n\n/**\n * The NVTokens class is used to help break NVStrings apart into tokens, such as\n * TKN_LPAREN or TKN_LITERAL - this helps simplify the task of building NVPairs\n * from an NVString.\n*/\nclass NVTokens {\n\n\n  /**\n   * Constructs NVTokens object for use.\n   */\n  constructor() {\n    this.tkType = null;\n    this.tkValue = null;\n    this.numTokens = 0;\n    this.tkPos = 0;\n  }\n\n  /*\n   * function to determine if a given character is whitespace. The\n   * following constitute whitespace: ' ' (SPACE), '\\t' (TAB), '\\n' (NEWLINE),\n   * '\\r' (LINEFEED),\n   */\n  _isWhiteSpace(it) {\n    if ((it == TKN_SPC_VALUE) || (it == TKN_TAB_VALUE) || (it == TKN_LF_VALUE)\n        || (it == TKN_CR_VALUE)) {\n      return true;\n    }\n    return false;\n  }\n\n  /*\n   * function to trim leading and trailing spaces from a literal.\n   */\n  _trimWhiteSpace(it) {\n    const length = it.length;\n    let start = 0;\n    let end = length;\n\n    // Find first non-whitespace character\n    while ((start < length) && (this._isWhiteSpace(it.charAt(start)))) {\n      start++;\n    }\n    // From the back, find last non-whitespace character\n    while ((start < end) && (this._isWhiteSpace(it.charAt(end - 1)))) {\n      end--;\n    }\n    return it.substring(start, end);\n  }\n\n  /**\n   * Parses an NVString into a list of tokens which can be more easily\n   * interpreted. The list of tokens is stored within the class and must be\n   * accessed through getToken()/getLiteral() and eatToken().\n   *\n   * @param nvString\n   *          NVString to be parsed.\n   */\n  parseTokens(nvString) {\n    this.numTokens = 0;\n    this.tkPos = 0;\n    this.tkType = new Array();\n    this.tkValue = new Array();\n\n    const len = nvString.length;\n    let eql_seen = false;\n    // convert NVString to character array for easier access\n    let input = new Array();\n    input = Array.from(nvString);\n    let pos = 0; // position in NVString\n\n    while (pos < len) {\n      // eat leading whitespace\n      while ((pos < len) && (this._isWhiteSpace(input[pos]))) {\n        pos++;\n      }\n      if (pos < len) {\n        switch (input[pos]) {\n        // For metacharacters (, ), and =, add to the token list, and\n        // advance the NVString position. (Save token, eat character)\n          case TKN_LPAREN_VALUE:\n            eql_seen = false;\n            this._addToken(TKN_LPAREN, TKN_LPAREN_VALUE);\n            pos++;\n            break;\n\n          case TKN_EQUAL_VALUE:\n            eql_seen = true;\n            this._addToken(TKN_EQUAL, TKN_EQUAL_VALUE);\n            pos++;\n            break;\n\n          case TKN_RPAREN_VALUE:\n            eql_seen = false;\n            this._addToken(TKN_RPAREN, TKN_RPAREN_VALUE);\n            pos++;\n            break;\n          case TKN_COMMA_VALUE:\n            eql_seen = false;\n            this._addToken(TKN_COMMA, TKN_COMMA_VALUE);\n            pos++;\n            break;\n\n          default: // Otherwise, treat it as a literal\n          {\n            let startPos = pos;\n            let endPos = -1; // substring position in input\n            let quoted_str = false; // is literal wrapped with quotes?\n            let quote_char = TKN_DQUOTE_VALUE;\n\n            // does it begin with a single or double quote?\n            if ((input[pos] == TKN_SQUOTE_VALUE)\n              || (input[pos] == TKN_DQUOTE_VALUE)) {\n              quoted_str = true;\n              quote_char = input[pos];\n              pos++;\n              startPos = pos;\n            }\n\n            while (pos < len) {\n            // On a backslash (escaped character), save the backslash and\n            // following character into the literal.\n              if (input[pos] == TKN_BKSLASH_VALUE) {\n                pos += 2;\n                continue;\n              }\n\n              if (quoted_str) { // literal wrapped with quotes\n                if (input[pos] == quote_char) {// quote terminator found\n                  pos++;\n                  endPos = pos - 1; // exclusive\n                  break;\n                }\n              } else { // did we hit unescaped meta character ( ) or =\n                if ((input[pos] == TKN_LPAREN_VALUE)\n                  || (input[pos] == TKN_RPAREN_VALUE)\n                  || ((input[pos] == TKN_COMMA_VALUE) && !eql_seen)\n                  || ((input[pos] == TKN_EQUAL_VALUE) && !eql_seen)) {\n                // terminate string - do NOT increment POS, or it will\n                // swallow the metacharacter into the literal\n                  endPos = pos; // exclusive\n                  break;\n                }\n              }\n              pos++; // accept character into literal\n            }\n\n            if (endPos == -1) { // reached end of NVString without terminator\n              endPos = pos; // exclusive\n            }\n            this._addToken(TKN_LITERAL,\n              nvString.substring(startPos, endPos).trim());\n            break;\n          }\n        }\n      }\n    }\n    // Add TKN_EOS as the last token in token list.\n    this._addToken(TKN_EOS, TKN_EOS_VALUE);\n    return true;\n  }\n  /**\n   * Returns current token. Throws Error if no string has\n   * been parsed, or if there are no tokens left. Does NOT advance\n   * the token position.\n   */\n  getToken() {\n    if (this.tkType == null) { // nothing parsed\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    if (this.tkPos < this.numTokens) {// are there tokens left?\n      return Number(this.tkType[this.tkPos]);\n    } else {\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n  }\n\n  /**\n   * Returns current token. Throws Error if no string has\n   * been parsed, or if there are no tokens left. DOES advance the\n   * token position.\n   */\n  popToken() {\n    let token = TKN_NONE;\n\n    if (this.tkType == null) {\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    if (this.tkPos < this.numTokens) { // if parsed and tokens left\n      token = Number(this.tkType[this.tkPos++]);\n    } else {\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    return token;\n  }\n  /**\n   * Returns literal for current token. If current token is NOT a TKN_LITERAL,\n   * it returns a string representation of the current token. Throws\n   * Error if no string has been parsed, or\n   * if there are no tokens left.\n   *\n   * DOES NOT advance the token position.\n   */\n  getLiteral() {\n    let theLiteral = null;\n    if (this.tkValue == null) {\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    // If we have parsed an NV string AND we have tokens left\n    if (this.tkPos < this.numTokens) {\n      theLiteral = String(this.tkValue[this.tkPos]);\n    } else {\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    return theLiteral;\n  }\n\n  /**\n   * Returns literal for current token. If current token is NOT a TKN_LITERAL,\n   * it returns a string representation of the current token. Throws\n   * Error if no string has been parsed, or\n   * if there are no tokens left.\n   *\n   * DOES advance the token position.\n   */\n  popLiteral() {\n    let theLiteral = null;\n\n    if (this.tkValue == null) {\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    // If we have parsed an NV string AND we have tokens left.\n    if (this.tkPos < this.numTokens) {\n      theLiteral = String(this.tkValue[this.tkPos++]);\n    } else {\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    return theLiteral;\n  }\n\n  /**\n   * Advances the token position by one.\n   */\n  eatToken() {\n    if (this.tkPos < this.numTokens) {\n      this.tkPos++;\n    }\n  }\n\n  /**\n   * Returns NVTokens list as a readable String.\n   */\n  toString() {\n    if (this.tkType == null) {\n      return \"*NO TOKENS*\";\n    }\n    let out = \"Tokens\";\n    for (let i = 0; i < this.numTokens; i++) {\n      out = out + \" : \" + this.tkValue[i];\n    }\n    return out;\n  }\n  /*\n   * function to add a token and corresponding printable version (i.e.,\n   * TKN_LPAREN and TKN_LPAREN_VALUE) into the token list.\n   */\n  _addToken(tk, tk_val) {\n    this.tkType.push(Number(tk));\n    this.tkValue.push(String(tk_val));\n    this.numTokens++;\n  }\n}\n\n\n\n\n/**\n * The NVFactory class is used to help interpret the tokens generated by\n * NVTokens from an NVString.\n */\n\n\n/**\n  * Returns an NVPair which contains the broken-down form of nvString\n  * @param  nvString  the nvString to parse\n  */\nfunction createNVPair(nvString) {\n  const nvt = new NVTokens();\n  nvt.parseTokens(nvString);\n  return readTopLevelNVPair(nvt);\n}\n\n/*\n  * function which returns a top-level NVPair from NVTokens.\n  * NVPair: (name=value)\n  * value: atom | NVList\n  */\nfunction readTopLevelNVPair(nvt) {\n  //check for opening (\n  let tk = nvt.getToken();\n  nvt.eatToken();\n  if (tk != TKN_LPAREN) {\n    errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  }\n\n  let name = readNVLiteral(nvt);\n  const nvp = new NVPair(name);\n\n  if ((tk = nvt.getToken()) == TKN_COMMA) {\n    // read comma'ed names as one name\n    while (tk == TKN_LITERAL || tk == TKN_COMMA) {\n      name += nvt.popLiteral();\n      tk = nvt.getToken();\n    }\n    nvp.name = name;\n\n    return readRightHandSide(nvp, nvt);\n  }\n\n  return readRightHandSide(nvp, nvt);\n}\n/*\n * function which returns the next NVPair from NVTokens.\n *   NVPair: (name=value) | (name, | ,name) | ,name,\n *   value: atom | NVList\n */\nfunction readNVPair(nvt) {\n  // Opening ( or , for NVPair\n  const tk = nvt.getToken();\n  nvt.eatToken();\n  if (!((tk == TKN_LPAREN) || (tk == TKN_COMMA))) {\n    errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  }\n\n  const name = readNVLiteral(nvt);\n  const nvp = new NVPair(name);\n\n  return readRightHandSide(nvp, nvt);\n}\n\n/*\n* function which reads rhs and returns NVPair from NVTokens.\n * NVPair: (name=value)\n * value: atom | NVList\n*/\nfunction readRightHandSide(nvp, nvt) {\n  let tk = nvt.getToken();\n  switch (tk) {\n    case TKN_EQUAL:\n      nvt.eatToken();\n\n      // If the next token after \"=\" is a LITERAL, then read an atom,\n      // otherwise read an NVList.\n      tk = nvt.getToken();\n      if (tk == TKN_LITERAL) {\n        const value = readNVLiteral(nvt);\n        nvp.setAtom = value;\n      } else {\n        // NVList is responsible for adding child NVPairs to this parent\n        // NVPair.\n        readNVList(nvt, nvp);\n      }\n      break;\n\n    case TKN_COMMA:\n    case TKN_RPAREN:\n\n      // If we get a \"comma\" or \")\", then we need to parse a list of values.\n      // eg, \"(x=(value1, value2,...))\" or \"(x=(value))\"\n      nvp.setAtom = nvp.name;\n      break;\n\n    default:\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  }\n\n  // terminating \")\" or \",\" for NVPair\n  tk = nvt.getToken();\n  if (tk == TKN_RPAREN) {\n    nvt.eatToken();\n  } else if (tk != TKN_COMMA) {\n    errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  }\n\n  return nvp;\n}\n/*\n * function which returns the next literal from NVTokens.\n */\nfunction readNVLiteral(nvt) {\n  const tk = nvt.getToken();\n  if (tk != TKN_LITERAL) {\n    errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  }\n  return nvt.popLiteral();\n}\n\n/*\n * function which adds a list of NVPairs to a parent NVPair.\n *   NVList:  NVPair NVList | epsilon\n */\nfunction readNVList(nvt, parent) {\n  // if next token is \"(\" or \",\", then read an NVPair\n  // otherwise, assume epsilon\n  const tk = nvt.getToken();\n  if (!(tk == TKN_LPAREN || tk == TKN_COMMA)) {\n    return; // didn't read an nvpair\n  }\n\n  const child = readNVPair(nvt);\n\n  // read a good NVPair\n  parent.addListElement(child);\n  if ((tk == TKN_COMMA) || (child.name == child.atom)) {\n    if (parent.getListType != LIST_COMMASEP) // if not already set\n      parent.setListType = LIST_COMMASEP;    // set it\n  }\n\n  readNVList(nvt, parent);  // next iteration of NVList()\n}\n\n/**\n  * Returns a NVPair whose name matches (ignoring case) the specified\n  * name.  This function does search recursively through all descendents\n  * of the specified NVPair.\n  * @param  nvp  NVPair to search through\n  * @param  name  name to match (ignoring case)\n  */\nfunction findNVPairRecurse(nvp, name) {\n  /* Is the base NV Pair the name we are looking for?                    */\n  if (!nvp) {\n    return null;\n  }\n  if ((name.toUpperCase() == (nvp.name).toUpperCase()))\n    return nvp;\n\n  /* Do we have anywhere else to search (ie, is nvp a list)?               */\n  if (nvp.getRHSType == RHS_ATOM)\n    return null;\n\n  /* Loop thru the list of children and searching each child for name.     */\n  for (let i = 0; i < nvp.getListSize(); i++) {\n    const child = findNVPairRecurse(nvp.getListElement(i), name);\n\n    /* Did we find \"name\"?                                                 */\n    if (child !== null)\n      return child;\n  }\n\n  return null;\n}\n\n/**\n  * Returns a NVPair whose name matches (ignoring case) the specified\n  * name. This functions only searches the direct descendants of specified NVPair\n  * @param  nvp  NVPair to search through\n  * @param  name  name to match (ignoring case)\n  */\nfunction findNVPair(nvp, name) {\n  if (!nvp) {\n    return null;\n  }\n\n  /* Do we have anywhere else to search (ie, is nvp a list)?               */\n  if (nvp.getRHSType == RHS_ATOM)\n    return null;\n\n  /* Loop thru the list of children and searching each child for name.     */\n  for (let i = 0; i < nvp.getListSize(); i++) {\n    const child = nvp.getListElement(i);\n    if (name.toUpperCase() == (child.name).toUpperCase())\n      return child;\n  }\n  return null;\n}\n\n/**\n  * Returns a value which matches the specified path\n  * @param  nvp  NVPair to search through\n  * @param  name  array of names to match (ignoring case)\n  */\nfunction findValue(nvp, names) {\n  if (!nvp) {\n    return null;\n  }\n\n  /* Is the base NV Pair the first name in path */\n  if ((names[0].toUpperCase() != (nvp.name).toUpperCase()))\n    return null;\n\n  let output = nvp;\n  const sze = names.length;\n\n  for (let i = 1; i < sze; i++) {\n    output = findNVPair(output, names[i]);\n    if (!output)\n      return null;\n  }\n  if (output.atom == null) {\n    if (output.list == null)\n      return null;\n    else\n      return (output.list).toString();\n  } else {\n    return (output.atom).toString();\n  }\n}\nmodule.exports = {findNVPairRecurse, createNVPair, findNVPair, findValue};\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst net = require(\"net\");\nconst process = require(\"process\");\nconst tls = require(\"tls\");\nconst http = require(\"http\");\nconst Timers = require('timers');\nconst constants = require(\"./constants.js\");\nconst errors = require(\"../../errors.js\");\nconst { findValue } = require(\"./nvStrToNvPair.js\");\n\nconst PACKET_HEADER_SIZE = 8;\nconst DEFAULT_PORT = 1521;\nconst DEFAULT_HTTPS_PROXY_PORT = 80;\n\n/* Protocol characteristics */\nconst TCPCHA = 1 << 1 |    /* ASYNC support */\n  1 << 2 |    /* Callback support */\n  1 << 3 |    /* More Data support */\n  1 << 8 |    /* Read/Write Readiness support */\n  1 << 9 |    /* Full Duplex support */\n  1 << 12;    /* SIGPIPE Support */\n\nlet streamNum = 1;\n\n/**\n * Network Transport TCP/TCPS adapter\n * @param {Address} address Destination Address\n * @param {Object} atts Transport Attributes\n */\nclass NTTCP {\n\n  constructor(atts) {\n    this.atts = atts;\n    this.cha = TCPCHA;\n    this.connected = false;\n    this.err = false;\n    this.needsDrain = false;\n    this.numPacketsSinceLastWait = 0;\n    this.secure = false;\n    this.largeSDU = false;\n    this.streamNum = streamNum++;\n    this.packetNum = 1;\n    this.doDNMatch = true;\n  }\n\n  /**\n   * DN matching funciton(used with TLS)\n   */\n  dnMatch(serverName, cert) {\n    if (this.atts.sslServerDNMatch && this.doDNMatch) {\n      const toObject = str =>str .split(',').map(x => x.split('=').map(y => y.trim())).reduce((a, x) => {\n        a[x[0]] = x[1];\n        return a;\n      }, {});\n      if (this.atts.sslServerCertDN) { /* Full DN Match */\n        const obj = toObject(this.atts.sslServerCertDN);\n        if (Object.keys(obj).length == Object.keys(cert.subject).length) {\n          for (const key in obj) {\n            if (obj[key] != cert.subject[key]) {\n              return (errors.getErr(errors.ERR_TLS_DNMATCH_FAILURE));\n            }\n          }\n        } else {\n          return (errors.getErr(errors.ERR_TLS_DNMATCH_FAILURE));\n        }\n      } else {\n        if (tls.checkServerIdentity(this.hostName, cert) && (!this.originHost || tls.checkServerIdentity(this.originHost, cert))) { /* Hostname match */\n          if (this.atts.sslAllowWeakDNMatch) {\n            const serviceName = findValue(this.atts.cDataNVPair, [\"DESCRIPTION\", \"CONNECT_DATA\", \"SERVICE_NAME\"]); /* Service Name match */\n            if (serviceName != cert.subject.CN) {\n              return (errors.getErr(errors.ERR_TLS_DNMATCH_FAILURE));\n            }\n          } else {\n            const hostName = this.hostName + \" \"  + (this.originHost ? \"or \" + this.originHost : \"\");\n            return (errors.getErr(errors.ERR_TLS_HOSTMATCH_FAILURE, hostName));\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * TLS connection establishment\n   * @returns Promise\n   */\n  async tlsConnect(secureContext, connStream) {\n    this.stream.removeAllListeners();\n    let connectErrCause;\n    const tlsOptions = {\n      host: this.host,\n      socket: connStream,\n      rejectUnauthorized: true,\n      secureContext: secureContext,\n      enableTrace: false,\n      checkServerIdentity: this.dnMatch.bind(this)\n    };\n\n    await new Promise((resolve) => {\n      this.stream = tls.connect(tlsOptions, () => {\n        if (!this.stream.authorized) {\n          connectErrCause = \"server certificate unauthorized\";\n        }\n        resolve();\n      }).on('error', (err) => {\n        connectErrCause = err.message;\n        resolve();\n      });\n    });\n    if (connectErrCause)\n      errors.throwErr(errors.ERR_TLS_AUTH_FAILURE, this.host, this.port, this.atts.connectionId, connectErrCause);\n    this.connStream = connStream;\n  }\n\n  /**\n   * TCP connection establishment\n   * @returns Promise\n   */\n  async ntConnect(address) {\n    if (!address.port) {\n      address.port = DEFAULT_PORT;\n    }\n\n    let connectErrCause, proxyConnectErrCause, req;\n    const httpsProxy = address.httpsProxy || this.atts.httpsProxy;\n    let httpsProxyPort = address.httpsProxyPort || this.atts.httpsProxyPort;\n\n    await new Promise((resolve) => {\n      if (httpsProxy) {\n        if (!httpsProxyPort) {\n          httpsProxyPort = DEFAULT_HTTPS_PROXY_PORT;\n        }\n        req = http.request({\n          host: httpsProxy,\n          port: httpsProxyPort,\n          method: 'CONNECT',\n          path: address.host + ':' + address.port,\n        });\n        req.once('connect', (res, socket) => {\n          if (res.statusCode == 200) {\n            this.connected = true;\n            this.stream = socket;\n          } else {\n            proxyConnectErrCause = res.statusCode;\n          }\n          resolve();\n        });\n        req.once('error', (err) => {\n          proxyConnectErrCause = err.message;\n          resolve();\n        });\n        req.end();\n      } else {\n        this.stream = net.connect(address.port, address.host, () => {\n          this.connected = true;\n          resolve();\n        });\n        this.stream.once('error', (err) => {\n          connectErrCause = err.message;\n          resolve();\n        });\n      }\n    });\n    if (req)\n      req.removeAllListeners();\n    if (!this.connected) {\n      if (proxyConnectErrCause) {\n        errors.throwErr(errors.ERR_PROXY_CONNECTION_FAILURE, httpsProxy, httpsProxyPort, this.atts.connectionId, proxyConnectErrCause);\n      } else {\n        errors.throwErr(errors.ERR_CONNECTION_INCOMPLETE, this.host, this.port, this.atts.connectionId, connectErrCause);\n      }\n    }\n  }\n\n  /**\n   * Network Transport connection establishment\n   * @returns Promise\n   */\n  async connect(address) {  /* Connect function for TCP sockets */\n    this.originHost = address.originHost;\n    this.host = address.host;\n    this.hostName = address.hostname;\n    this.port = address.port;\n\n    try {\n      await this.ntConnect(address);\n      if (this.atts.expireTime || this.atts.enableDCD) {  /* Set Keep alives */\n        if (this.atts.expireTime) {\n          this.stream.setKeepAlive(true, this.atts.expireTime);\n        } else {\n          this.stream.setKeepAlive(true);\n        }\n      }\n      if (this.atts.tcpNoDelay) {  /* Turn off Nagle's unless explicitly enabled by user */\n        this.stream.setNoDelay(true);\n      }\n      if (address.protocol.toUpperCase() == \"TCPS\") {\n        let secureContext;\n        this.secure = true;\n        if (this.atts.sslAllowWeakDNMatch)\n          this.doDNMatch = false; //Don't match initial connect\n        try {\n          secureContext = tls.createSecureContext({\n            cert: this.atts.wallet,\n            key: this.atts.wallet,\n            passphrase: this.atts.walletPassword,\n            ca: this.atts.wallet,\n          });\n        } catch (err) {\n          errors.throwErr(errors.ERR_TLS_INIT_FAILURE);\n        }\n        await this.tlsConnect(secureContext, this.stream);\n      }\n    } finally {\n      if (this.stream) {\n        this.setupEventHandlers();\n      }\n    }\n  }\n\n  /**\n   * Disconnect Network Transoprt\n   * @param {int} type\n   * @returns Proimise\n   */\n  disconnect(type) {   /* Disconnect function for TCP sockets */\n    if (this.connected && !this.err) {\n      if (type == constants.NSFIMM)\n        this.stream.destroy();\n      else\n        this.stream.end();\n    }\n    this.stream = null;\n    this.connected = false;\n    this.drainWaiter = null;\n    this.readWaiter = null;\n  }\n\n  /**\n   * Get the string containing a packet dump.\n   * @param {Buffer} buffer containing packet data\n   */\n  getPacketDump(buffer) {\n    const lines = [];\n    for (let i = 0; i < buffer.length; i += 8) {\n      const address = i.toString().padStart(4, '0');\n      const block = buffer.slice(i, i + 8);\n      const hexDumpValues = [];\n      const printableValues = [];\n      for (const hexByte of block) {\n        hexDumpValues.push(hexByte.toString(16).toUpperCase().padStart(2, '0'));\n        if (hexByte > 0x20 && hexByte < 0x7f) {\n          printableValues.push(String.fromCharCode(hexByte));\n        } else {\n          printableValues.push(\".\");\n        }\n      }\n      while (hexDumpValues.length < 8) {\n        hexDumpValues.push(\"  \");\n        printableValues.push(\" \");\n      }\n      const hexValuesBlock = hexDumpValues.join(\" \");\n      const printableBlock = printableValues.join(\"\");\n      lines.push(`${address} : ${hexValuesBlock} |${printableBlock}|`);\n    }\n    return lines.join(\"\\n\");\n  }\n\n  /**\n   * Print the packet to the console.\n   * @param {String} operation which was performed\n   * @param {Buffer} buffer containing packet data\n   */\n  printPacket(operation, buffer) {\n    const now = new Date();\n    const formattedDate =\n      `${now.getFullYear()}-${now.getMonth().toString().padStart(2, '0')}-` +\n      `${now.getDay().toString().padStart(2, '0')} ` +\n      `${now.getHours().toString().padStart(2, '0')}:` +\n      `${now.getMinutes().toString().padStart(2, '0')}:` +\n      `${now.getSeconds().toString().padStart(2, '0')}.` +\n      `${now.getMilliseconds().toString().padStart(3, '0')}`;\n    const packetDump = this.getPacketDump(buffer);\n    console.log(`${formattedDate} ${operation}:\\n${packetDump}\\n`);\n  }\n\n  /**\n   * Check for errors\n   */\n  checkErr() {\n    if (!this.connected || this.err) {\n      let err;\n      if (this.savedErr) {\n        err = errors.getErr(errors.ERR_CONNECTION_LOSTCONTACT,\n          this.host, this.port,  this.atts.connectionId, this.savedErr.message);\n      } else {\n        err = errors.getErr(errors.ERR_CONNECTION_EOF, this.host, this.port, this.atts.connectionId,);\n      }\n      /* Wrap around NJS-500 */\n      const newErr = errors.getErr(errors.ERR_CONNECTION_CLOSED);\n      newErr.message = newErr.message + \"\\n\" + err.message;\n      throw (newErr);\n    }\n  }\n\n  /**\n   * Transport Send\n   * @param {Buffer} buf Buffer to send\n   * @returns Promise\n   */\n  send(buf) {\n    this.checkErr();\n    if (process.env.NODE_ORACLEDB_DEBUG_PACKETS)\n      this.printPacket(`Sending packet ${this.packetNum} on stream ${this.streamNum}`, buf);\n    const result = this.stream.write(buf, (err) => {\n      if (err) {\n        this.savedErr = err;\n        this.err = true;\n        this._notifyWaiters();\n      }\n    });\n    if (!result) {\n      this.needsDrain = true;\n    }\n    this.numPacketsSinceLastWait++;\n    this.packetNum++;\n  }\n\n  /**\n   * Should writing to the transport be paused? This occurs if draining is\n   * required or if the number of packets written since the last pause exceeds\n   * 100 (in order to avoid starvation of the event loop during large writes).\n   */\n  shouldPauseWrite() {\n    return (this.needsDrain || this.numPacketsSinceLastWait >= 100);\n  }\n\n  /**\n   * Perform a wait -- if draining is required, then until the drain event is\n   * emitted or if draining is not required, then a simple setImmediate() that\n   * ensures that the event loop is not starved.\n   */\n  async pauseWrite() {\n    this.checkErr();\n    if (this.needsDrain) {\n      await new Promise((resolve) => {\n        this.drainWaiter = resolve;\n      });\n      this.checkErr();\n    } else {\n      await new Promise((resolve) => Timers.setImmediate(resolve));\n    }\n    this.numPacketsSinceLastWait = 0;\n  }\n\n  /**\n   * Start Async reads\n   */\n  startRead() {\n    let tempBuf;\n    this.packets = [];\n    this.stream.on('data', (chunk) => {\n\n      // append buffer if previous chunk(s) were insufficient for a full packet\n      if (tempBuf) {\n        tempBuf = Buffer.concat([tempBuf, chunk]);\n      } else {\n        tempBuf = chunk;\n      }\n\n      while (tempBuf.length >= PACKET_HEADER_SIZE) {\n\n        // determine the length of the packet\n        let len;\n        if (this.largeSDU) {\n          len = tempBuf.readUInt32BE();\n        } else {\n          len = tempBuf.readUInt16BE();\n        }\n\n        // not enough for a full packet so wait for more data to arrive\n        if (len > tempBuf.length)\n          break;\n\n        // enough for a full packet, extract details from the packet header\n        // and pass them along for processing\n        const packet = {\n          buf: tempBuf.subarray(0, len),\n          type: tempBuf[4],\n          flags: tempBuf[5],\n          num: this.packetNum++\n        };\n        this.packets.push(packet);\n        if (this.readWaiter) {\n          this.readWaiter();\n          this.readWaiter = null;\n        }\n        if (process.env.NODE_ORACLEDB_DEBUG_PACKETS)\n          this.printPacket(`Receiving packet ${packet.num} on stream ${this.streamNum}`, packet.buf);\n\n        // if the packet consumed all of the bytes (most common scenario), then\n        // simply clear the temporary buffer; otherwise, retain whatever bytes\n        // are unused and see if sufficient data is available for another\n        // packet\n        if (len === tempBuf.length) {\n          tempBuf = null;\n          break;\n        } else {\n          tempBuf = tempBuf.subarray(len);\n        }\n\n      }\n\n    });\n  }\n\n  /**\n   * Synchronous receive\n   * @returns a single packet or undefined if no packets are available\n   */\n  syncReceive() {\n    return this.packets.shift();\n  }\n\n  /**\n   * Asynchronous receive\n   * @returns a single packet\n   */\n  async receive() {\n    if (this.packets.length === 0) {\n      this.checkErr();\n      await new Promise((resolve) => {\n        this.readWaiter = resolve;\n        this.numPacketsSinceLastWait = 0;\n      });\n      this.checkErr();\n    }\n    return this.packets.shift();\n  }\n\n  /**\n   * TLS renegotiate\n   * @returns Promise\n   */\n  async renegTLS() {\n    try {\n      this.checkErr();\n      this.doDNMatch = true;\n      const secureContext = tls.createSecureContext({\n        cert: this.atts.wallet,\n        key: this.atts.wallet,\n        passphrase: this.atts.walletPassword,\n        ca: this.atts.wallet,\n      });\n      await this.tlsConnect(secureContext, this.connStream);\n    } finally {\n      this.setupEventHandlers();\n    }\n  }\n\n  /**\n   * Setup handling of events\n   */\n  setupEventHandlers() {\n    this.stream.removeAllListeners();\n\n    this.stream.on('error', (err) => {\n      this.savedErr = err;\n      this.err = true;\n      this._notifyWaiters();\n    });\n\n    this.stream.on('end', () => {\n      this.err = true;\n      this._notifyWaiters();\n    });\n\n    this.stream.on('close', () => {\n      this.connected = false;\n      this._notifyWaiters();\n    });\n\n    this.stream.on('drain', () => {\n      this.needsDrain = false;\n      if (this.drainWaiter) {\n        this.drainWaiter();\n        this.drainWaiter = null;\n      }\n    });\n\n  }\n\n  /**\n   * Get Transport Attributes\n   * @param {int} opcode type of attribute\n   * @returns attribute value\n   */\n  getOption(opcode) {\n    this.checkErr();\n    switch (opcode) {\n      case constants.NT_MOREDATA: /* More data available to read */\n        return (this.packets.length > 0);\n      case constants.REMOTEADDR: /* Remote Address */\n      {\n        const socket = this.secure ? this.connStream : this.stream;\n        return (socket.remoteAddress + \":\" + socket.remotePort);\n      }\n      default:\n        errors.throwErr(errors.ERR_INTERNAL, \"getOption not supported for opcode \" + opcode);\n    }\n  }\n\n  /**\n   * Notify the waiters (drain and read) and reset them, if applicable.\n   */\n  _notifyWaiters() {\n    if (this.drainWaiter) {\n      this.drainWaiter();\n      this.drainWaiter = null;\n    }\n    if (this.readWaiter) {\n      this.readWaiter();\n      this.readWaiter = null;\n    }\n  }\n\n}\n\nmodule.exports = NTTCP;\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst crypto = require('crypto');\nconst path = require('path');\nconst constants = require(\"./constants.js\");\nconst fs = require(\"fs\");\n\n/**\n   * Generate UUID (Used for Connection ID)\n   * @returns Promise\n   */\nasync function genuuid() {\n  return await new Promise((resolve, reject) => {\n    crypto.randomBytes(16, (err, buf) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(buf);\n      }\n    });\n  });\n}\n\n/**\n * Network Session Attributes\n */\nclass SessionAtts {\n\n  constructor(uuid) {\n    this.largeSDU = false;\n    this.tdu = constants.NSPDFTDULN;\n    this.nt = {};\n    this.nt.tcpNoDelay = true;\n    this.uuid = uuid;\n    this.nt.sslServerDNMatch = true;\n    this.nt.sslAllowWeakDNMatch = false;\n  }\n\n  /**\n   * Update Session attributes with input Parameters\n   * @param {object} Params Input paramters\n   */\n  setFrom(params) {\n    if (params) {\n      if (params.sdu > 0) {\n        this.sdu = parseInt(params.sdu);\n      }\n      if (typeof params.walletLocation === 'string') {\n        this.nt.walletFile = path.join(params.walletLocation, constants.PEM_WALLET_FILE_NAME);\n      }\n      if (typeof params.walletPassword === 'string') {\n        this.nt.walletPassword = params.walletPassword;\n      }\n      if (params.expireTime > 0) {\n        this.nt.expireTime = params.expireTime * 1000 * 60;\n      }\n      if (params.connectTimeout > 0) {\n        this.connectTimeout = params.connectTimeout * 1000;\n      }\n      if (params.transportConnectTimeout > 0) {\n        this.transportConnectTimeout = params.transportConnectTimeout * 1000;\n      }\n      if (params.recvTimeout > 0) {\n        this.recvTimeout = params.recvTimeout * 1000;\n      }\n      if (params.sendTimeout > 0) {\n        this.sendTimeout = params.sendTimeout * 1000;\n      }\n      if (typeof params.connectionIdPrefix === 'string') {\n        this.connectionIdPrefix = params.connectionIdPrefix;\n      }\n      if (typeof params.tcpNoDelay === 'boolean') {\n        this.nt.tcpNoDelay = params.tcpNoDelay;\n      }\n      if (typeof params.sslServerDNMatch === 'boolean') {\n        this.nt.sslServerDNMatch = params.sslServerDNMatch;\n      }\n      if (typeof params.sslAllowWeakDNMatch === 'boolean') {\n        this.nt.sslAllowWeakDNMatch = params.sslAllowWeakDNMatch;\n      }\n      if (typeof params.sslServerCertDN === 'string') {\n        this.nt.sslServerCertDN = params.sslServerCertDN;\n      }\n      if (typeof params.enable === 'string' && params.enable.toUpperCase() == \"BROKEN\") {\n        this.nt.enabledDCD = true;\n      }\n      if (typeof params.httpsProxy === 'string') {\n        this.nt.httpsProxy = params.httpsProxy;\n      }\n      if (params.httpsProxyPort >= 0) {\n        this.nt.httpsProxyPort = parseInt(params.httpsProxyPort);\n      }\n    }\n  }\n\n  /**\n   * Read wallet\n   * @returns Promise\n   */\n  readWalletFile() {\n    return new Promise((resolve, reject)=> {\n      fs.readFile(this.nt.walletFile, (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Prepare attributes for connection, Generate Connection ID and read Wallet file\n   *\n   */\n  async prepare(protocol) {\n    if (!this.uuid) {\n      this.uuid = await genuuid();\n      this.uuid = this.uuid.toString('base64');\n    }\n    if (this.connectionIdPrefix) {\n      this.connectionId = this.connectionIdPrefix + this.uuid;\n    } else {\n      this.connectionId = this.uuid;\n    }\n    this.nt.connectionId = this.connectionId;\n\n    if (protocol && (protocol.toUpperCase() == \"TCPS\" && this.nt.walletFile)) {\n      this.nt.wallet = await this.readWalletFile();\n    }\n\n    if (!this.connectTimeout && !this.transportConnectTimeout)\n      this.transportConnectTimeout = 60 * 1000; /* Default to 60 secs */\n  }\n\n}\n\nmodule.exports = SessionAtts;\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"os\" has been externalized for browser compatibility. Cannot access \"os.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"dns\" has been externalized for browser compatibility. Cannot access \"dns.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('../constants');\nconst errors = require('../errors.js');\nconst os = require('os');\n\n//---------------------------------------------------------------------------\n// populateClientInfo()\n//\n// Populates client process information\n//---------------------------------------------------------------------------\nfunction populateClientInfo() {\n  this.program = process.argv0;\n  this.terminal = \"unknown\";\n  this.pid = process.pid.toString();\n  try {\n    this.userName = os.userInfo().username;\n  } catch {\n    this.userName = \"unknown\";\n  }\n  this.hostName = os.hostname();\n}\n// Initialize client data on startup.\nconst CLIENT_INFO = new populateClientInfo();\n\n//---------------------------------------------------------------------------\n// getMetadataMany(sql)\n//\n// Get metadata info for all the columns in the table\n//---------------------------------------------------------------------------\nfunction getMetadataMany(vars) {\n  const metadata = [];\n  for (const queryVar of vars) {\n    metadata.push(queryVar.fetchInfo);\n  }\n  return metadata;\n}\n\n//---------------------------------------------------------------------------\n// getOutBindValues(sql)\n//\n// Return the values for the out binds at the given position (row).\n//---------------------------------------------------------------------------\nfunction getOutBindValues(bindVars, pos) {\n  const bindByPos = (bindVars[0].name === undefined);\n  const outBindValues = (bindByPos) ? [] : {};\n  for (let i = 0; i < bindVars.length; i++) {\n    if (bindByPos) {\n      outBindValues.push(bindVars[i].values[pos]);\n    } else {\n      outBindValues[bindVars[i].name] = bindVars[i].values[pos];\n    }\n  }\n  return outBindValues;\n}\n\n//---------------------------------------------------------------------------\n// getOutBinds()\n//\n// Return the out binds for the given statement.\n//---------------------------------------------------------------------------\nfunction getOutBinds(statement, numIters, executeManyFlag) {\n  const bindVars = statement.bindInfoList.map(i => i.bindVar);\n  const outBinds = bindVars.filter(v => v.dir !== constants.BIND_IN);\n  if (outBinds.length > 0) {\n    if (executeManyFlag) {\n      const outBindValues = new Array(numIters);\n      for (let i = 0; i < numIters; i++) {\n        outBindValues[i] = getOutBindValues(outBinds, i);\n      }\n      return outBindValues;\n    }\n    return getOutBindValues(outBinds, 0);\n  }\n}\n\n//---------------------------------------------------------------------------\n// checkProxyUserValidity()\n//\n// Check validity status for proxy authentication\n//---------------------------------------------------------------------------\nfunction checkProxyUserValidity(userName) {\n  let schemaUser = '', proxyUser = '';\n  let quoteFound = false, openSquareBracketFound = false;\n  let lastQuoteFoundIndex = 0;\n  const result = {\n    status: -1,\n    proxyUser: '',\n    schemaUser: ''\n  };\n  const userNameLength = userName.length;\n  let index = 0, i, j;\n  while (index < userNameLength) {\n    // check for double quotes\n    if (userName.charAt(index) === '\"') {\n      quoteFound = !quoteFound;\n      lastQuoteFoundIndex = index;\n    }\n\n    // check for open square bracket\n    if (userName.charAt(index) === '[' && !quoteFound) {\n      openSquareBracketFound = true;\n      // skip leading space and extract proxy user name\n      if (lastQuoteFoundIndex != 0) {\n        for (i = lastQuoteFoundIndex + 1; i < index; i++) {\n          if (userName.charAt(i) !== ' ') {\n            return result;\n          }\n        }\n\n        for (i = 0; i <= lastQuoteFoundIndex; i++) {\n          proxyUser += userName.charAt(i);\n        }\n      } else {\n        for (i = 0; i < index; i++) {\n          if (userName.charAt(i) !== ' ') {\n            proxyUser += userName.charAt(i);\n          } else {\n            break;\n          }\n        }\n      }\n      break;\n    }\n    index++;\n  }\n\n  if (proxyUser.length === 0) {\n    return result;\n  } else {\n    result.proxyUser = proxyUser;\n  }\n\n  // extract schema user\n  index = index + 1;\n  quoteFound = false;\n  const schemaUserStartIndex = index;\n  lastQuoteFoundIndex = 0;\n  while (index < userNameLength) {\n    // check for double quotes\n    if (userName.charAt(index) === '\"') {\n      quoteFound = !quoteFound;\n      lastQuoteFoundIndex = index;\n    }\n\n    if (userName.charAt(index) === '[' && !quoteFound &&\n        openSquareBracketFound) {\n      return result;\n    }\n\n    if (userName.charAt(index) === ']' && !quoteFound) {\n      if (lastQuoteFoundIndex != schemaUserStartIndex &&\n          lastQuoteFoundIndex != 0) {\n        for (i = schemaUserStartIndex; i <= lastQuoteFoundIndex; i++) {\n          schemaUser += userName.charAt(i);\n        }\n        // check for character between double quotes and close brackets\n        for (i = lastQuoteFoundIndex + 1; i < index; i++) {\n          if (userName.charAt(i) != ' ') {\n            return result;\n          }\n        }\n      } else {\n        // skip trailing spaces\n        for (i = schemaUserStartIndex; i < index; i++) {\n          if (userName.charAt(i) != ' ') {\n            break;\n          }\n        }\n        if (i == index) {\n          return result;\n        }\n\n        for (j = i; j < index; j++) {\n          schemaUser += userName[j];\n        }\n      }\n\n      // check for character from [ till end of string\n      for (i = index + 1; i < userNameLength; i++) {\n        if (userName[i] != ' ') {\n          return result;\n        }\n      }\n    }\n    index++;\n  }\n\n  if (schemaUser.length === 0) {\n    return result;\n  } else {\n    result.schemaUser = schemaUser;\n  }\n\n  result.status = 0;\n  return result;\n}\n\n//---------------------------------------------------------------------------\n// checkCredentials()\n//\n// Check Credentials for Password Authentication\n//---------------------------------------------------------------------------\nfunction checkCredentials(params) {\n  if (params.token === undefined) {\n    if (params.externalAuth === true) {\n      errors.throwErr(errors.ERR_NOT_IMPLEMENTED, 'External Authentication');\n    }\n    if (params.password === undefined) {\n      errors.throwErr(errors.ERR_MISSING_CREDENTIALS);\n    }\n  }\n}\n\n//---------------------------------------------------------------------------\n// normalizePrivateKey()\n//\n// Add header and footer to private key\n//---------------------------------------------------------------------------\nfunction normalizePrivateKey(privateKey) {\n  return '-----BEGIN PRIVATE KEY-----\\n' + privateKey +\n  '\\n' + '-----END PRIVATE KEY-----';\n}\n\nmodule.exports = {\n  getMetadataMany,\n  CLIENT_INFO,\n  getOutBinds,\n  checkProxyUserValidity,\n  checkCredentials,\n  normalizePrivateKey,\n};\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { findNVPairRecurse, createNVPair } = require('./nvStrToNvPair.js');\nconst errors = require(\"../../errors.js\");\nconst os = require(\"os\");\nconst net = require('net');\nconst dns = require('dns');\nconst dnsPromises = dns.promises;\nconst cInfo = require(\"../util.js\").CLIENT_INFO;\n\nconst SchemaObjectFactoryInterface = {\n  ADDR: 0,\n  ADDR_LIST: 1,\n  DESC: 2,\n  DESC_LIST: 3,\n};\n\n/**\n * Class representing Address Object\n */\nclass Address {\n\n  /** return the type of this SchemaObject */\n  isS() {\n    return SchemaObjectFactoryInterface.ADDR;\n  }\n\n  /** initialize this object from the given string\n   * @param string the string\n   *  Error thrown if invalid NV-string format (ie, bad parens)\n   *  Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...)) and  \")\n   */\n  initFromString(s) {\n    const nvp = createNVPair(s);\n    this.initFromNVPair(nvp);\n  }\n\n  /** initialize this object from an NVPair\n   * @param nvp the NVPair\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromNVPair(nvp) {\n    if (nvp == null || !(nvp.name.toUpperCase() == \"ADDRESS\"))\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    const protnvp = findNVPairRecurse(nvp, 'protocol');\n    const portnvp = findNVPairRecurse(nvp, 'port');\n    const hostnvp = findNVPairRecurse(nvp, 'host');\n    const httpsProxyNVP = findNVPairRecurse(nvp, 'https_proxy');\n    const httpsProxyPortNVP = findNVPairRecurse(nvp, 'https_proxy_port');\n\n    if (portnvp)\n      this.port = Number(portnvp.atom);\n\n    if (hostnvp)\n      this.host = hostnvp.atom;\n\n    if (protnvp)\n      this.prot = protnvp.atom;\n\n    if (httpsProxyNVP)\n      this.httpsProxy = httpsProxyNVP.atom;\n    if (httpsProxyPortNVP)\n      this.httpsProxyPort = Number(httpsProxyPortNVP.atom);\n\n    this.addr = nvp.toString();\n  }\n\n  /** return the string representation of this object */\n  toString() {\n    return this.addr;\n  }\n}\n\n/**\n * Class representing addressList object\n */\nclass AddressList {\n  constructor() {\n    this.children = new Array();\n    this.sourceRoute = false;\n    this.loadBalance = false;\n    this.failover = true;\n  }\n  /** return the type of this SchemaObject */\n  isS() {\n    return SchemaObjectFactoryInterface.ADDR_LIST;\n  }\n\n  /** initialize this object from the given string\n   * @param string the string\n   *  Error thrown if invalid NV-string format (ie, bad parens)\n   *  Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromString(s) {\n    const nvp = createNVPair(s);\n    this.initFromNVPair(nvp);\n  }\n\n  /** initialize this object from an NVPair\n   * @param nvp the NVPair\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromNVPair(nvp) {\n    /* for each child of \"ADDRESS_LIST\", create child or set SR/LB/FO */\n    this.children = [];\n    let childnv, child;\n    const listsize = nvp.getListSize();\n    if (listsize == 0) /* atom can not be valid */\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n\n    for (let i = 0; i < listsize; i++) {\n      childnv = nvp.getListElement(i);\n      if (childnv.name.toUpperCase() == \"SOURCE_ROUTE\") {\n        this.sourceRoute = (childnv.atom.toLowerCase() == \"yes\"\n          || childnv.atom.toLowerCase() == \"on\"\n          || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"LOAD_BALANCE\") {\n        this.loadBalance = (childnv.atom.toLowerCase() == \"yes\"\n          || childnv.atom.toLowerCase() == \"on\"\n          || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"FAILOVER\") {\n        this.failover = (childnv.atom.toLowerCase() == \"yes\"\n          || childnv.atom.toLowerCase() == \"on\"\n          || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"ADDRESS\") {\n        child = new NavAddress();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else if (childnv.name.toUpperCase() == \"ADDRESS_LIST\") {\n        child = new NavAddressList();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    if (this.children.length == 0) errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  }\n\n\n  /** return the string representation of this object */\n  toString() {\n    let s = new String(\"\");\n    if (this.children.size() < 1) // there is no address list without addresses\n      return s;\n    s += \"(ADDRESS_LIST=\";\n\n    for (let i = 0; i < this.children.size(); i++)\n      s += this.children[i].toString();\n\n    if (this.sourceRoute) s += \"(SOURCE_ROUTE=yes)\" + NavSchemaObject.HC;\n    if (this.loadBalance) s += \"(LOAD_BALANCE=yes)\";\n    if (!this.failover) s += \"(FAILOVER=false)\";\n\n    s += \")\";\n\n    return s;\n  }\n}\n\n/**\n * Class represnting description object\n */\nclass Description {\n  // description-level stuff\n  constructor() {\n    this.children = new Array();\n    this.sourceRoute = false;\n    this.loadBalance = false;\n    this.failover = true;\n    this.delayInMillis = -1;\n    this.params = {};\n  }\n\n  /**\n    * Return the type of this SchemaObject\n   */\n  isS() {\n    return SchemaObjectFactoryInterface.DESC;\n  }\n\n  /**\n    * Initialize this object from the given string\n    *\n    * @param string\n    *          the string\n    * Error rhrown if invalid NV-string format (ie, bad parens)\n    * Error thrown if invalid syntax (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n  */\n  initFromString(s) {\n    const nvp = createNVPair(s);\n    this.initFromNVPair(nvp);\n  }\n\n  /** initialize this object from an NVPair\n   * @param nvp the NVPair\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  //errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  initFromNVPair(nvp) {\n    const listsize = nvp.getListSize();\n    let childnv, child;\n    if (listsize == 0) // atom can not be valid\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n\n    for (let i = 0; i < listsize; i++) {\n      childnv = nvp.getListElement(i);\n      if (childnv.name.toUpperCase() == \"SOURCE_ROUTE\") {\n        this.sourceRoute = (childnv.atom.toLowerCase() == \"yes\"\n                  || childnv.atom.toLowerCase() == \"on\"\n                  || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"LOAD_BALANCE\") {\n        this.loadBalance = (childnv.atom.toLowerCase() == \"yes\"\n                  || childnv.atom.toLowerCase() == \"on\"\n                  || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"FAILOVER\") {\n        this.failover = (childnv.atom.toLowerCase() == \"yes\"\n                  || childnv.atom.toLowerCase() == \"on\"\n                  || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"ADDRESS_LIST\") {\n        child = new NavAddressList();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else if (childnv.name.toUpperCase() == \"ADDRESS\") {\n        child = new NavAddress();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else if (childnv.name.toUpperCase() == \"CONNECT_DATA\") {\n        let tmpnv;\n        const listsize = childnv.getListSize();\n        for (let i = 0; i < listsize; i++) {\n          tmpnv = childnv.getListElement(i);\n          if (tmpnv.name.toUpperCase() == \"CONNECTION_ID_PREFIX\") {\n            this.params.connectionIdPrefix = tmpnv.atom;\n            childnv.removeListElement(i);\n            break;\n          }\n        }\n        this.connectData = childnv.valueToString();\n      } else if (childnv.name.toUpperCase() == \"RETRY_DELAY\") {\n        // Delay between retries.\n        // If no unit is provided, it is interpreted in seconds.\n        // The value is internally stored in milliseconds.\n        if (childnv.atom > 0)\n          this.delayInMillis = childnv.atom * 1000;\n      } else if (childnv.name.toUpperCase() == \"RETRY_COUNT\") {\n        this.retryCount = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"CONNECTION_ID_PREFIX\") {\n        this.conidPrefix = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"CONNECT_TIMEOUT\") {\n        if (childnv.atom > 0)\n          this.params.connectTimeout = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"TRANSPORT_CONNECT_TIMEOUT\") {\n        if (childnv.atom > 0)\n          this.params.transportConnectTimeout = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"ENABLE\") {\n        this.params.enable = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"RECV_TIMEOUT\") {\n        if (childnv.atom > 0) {\n          this.params.recvTimeout = childnv.atom;\n        }\n      } else if (childnv.name.toUpperCase() == \"SDU\") {\n        this.params.sdu = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"EXPIRE_TIME\") {\n        if (childnv.atom > 0)\n          this.params.expireTime = childnv.atom;\n      } else if (childnv.name.toUpperCase() == \"SECURITY\") {\n        const listsize = childnv.getListSize();\n        let tmpnv;\n        for (let i = 0; i < listsize; i++) {\n          tmpnv = childnv.getListElement(i);\n          if (tmpnv.name.toUpperCase() == \"SSL_SERVER_CERT_DN\") {\n            this.params.sslServerCertDN = tmpnv.valueToString();\n          } else if (tmpnv.name.toUpperCase() == \"SSL_SERVER_DN_MATCH\") {\n            this.params.sslServerDNMatch = (tmpnv.atom.toLowerCase() == \"yes\"\n            || tmpnv.atom.toLowerCase() == \"on\"\n            || tmpnv.atom.toLowerCase() == \"true\");\n          } else if (tmpnv.name.toUpperCase() == \"SSL_ALLOW_WEAK_DN_MATCH\") {\n            this.params.sslAllowWeakDNMatch = (tmpnv.atom.toLowerCase() == \"yes\"\n            || tmpnv.atom.toLowerCase() == \"on\"\n            || tmpnv.atom.toLowerCase() == \"true\");\n          } else if ((tmpnv.name.toUpperCase() == \"WALLET_LOCATION\") || (tmpnv.name.toUpperCase() == \"MY_WALLET_DIRECTORY\")) {\n            this.params.walletLocation = tmpnv.atom;\n          }\n        }\n      }\n    }\n  }\n  toString() {\n    let s = new String(\"\"), child ;\n\n    // see if there are any endpoints\n    child = new String(\"\");\n    for (let i = 0; i < this.children.size(); i++) {\n      child = this.children[i].toString();\n      if (!child == \"\")\n        s += child;\n    }\n\n    // some parameters make sense only if there are endpoints defined\n    if (!s == \"\" && this.sourceRoute)\n      s += \"(SOURCE_ROUTE=yes)\";\n    if (!s == \"\" && this.loadBalance)\n      s += \"(LOAD_BALANCE=yes)\";\n    if (!s == \"\" && !this.failover)\n      s += \"(FAILOVER=false)\";\n    if (!s.equals(\"\"))\n      s = \"(DESCRIPTION=\" + s + \")\";\n\n    return s;\n  }\n}\n\n/**\n * Class representing DescriptionList object.\n */\nclass DescriptionList {\n\n  constructor() {\n    this.children = new Array();\n    this.sourceRoute = false;\n    this.loadBalance = true;\n    this.failover = true;\n  }\n\n  /** return the type of this SchemaObject */\n  isS() {\n    return SchemaObjectFactoryInterface.ADDR_LIST;\n  }\n\n  /** initialize this object from the given string\n   * @param string the string\n   * Error thrown if invalid NV-string format (ie, bad parens)\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromString(s) {\n    const nvp = createNVPair(s);\n    this.initFromNVPair(nvp);\n  }\n\n  /** initialize this object from an NVPair\n   * @param nvp the NVPair\n   * Error thrown if invalid syntax\n   *               (ie, \"(ADDRESS=(DESCRIPTION=...))\")\n   */\n  initFromNVPair(nvp) {\n    const listsize = nvp.getListSize();\n    let child, childnv;\n    if (listsize == 0) /* atom can not be valid */\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n\n    for (let i = 0; i < listsize; i++) {\n      childnv = nvp.getListElement(i);\n      if (childnv.name.toUpperCase() == \"SOURCE_ROUTE\") {\n        this.sourceRoute = (childnv.atom.toLowerCase() == \"yes\"\n                      || childnv.atom.toLowerCase() == \"on\"\n                      || childnv.atom.toLowerCase == \"true\");\n      } else if (childnv.name.toUpperCase() == \"LOAD_BALANCE\") {\n        this.loadBalance = (childnv.atom.toLowerCase() == \"yes\"\n                      || childnv.atom.toLowerCase() == \"on\"\n                      || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"FAILOVER\") {\n        this.failover = (childnv.atom.toLowerCase() == \"yes\"\n                  || childnv.atom.toLowerCase() == \"on\"\n                  || childnv.atom.toLowerCase() == \"true\");\n      } else if (childnv.name.toUpperCase() == \"DESCRIPTION\") {\n        child = new NavDescription();\n        child.initFromNVPair(childnv);\n        this.children.push(child);\n      } else errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n    }\n    if (this.children.length == 0) errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_SYNTAX);\n  }\n\n  /** return the string representation of this object */\n  toString() {\n    let s = new String(\"\");\n    if (this.children.size() < 1) // no descr list without descriptions\n      return s;\n\n    let child = new String(\"\");\n    for (let i = 0; i < this.children.size(); i++) {\n      child = this.children[i].toString();\n      if (!child.equals(\"\"))\n        s += child;\n    }\n\n    // some parameters make sense only if there are endpoints defined\n    if (s.equals(\"\") && this.sourceRoute) s += \"(SOURCE_ROUTE=yes)\";\n    if (s.equals(\"\") && !this.loadBalance) s += \"(LOAD_BALANCE=no)\";\n    if (s.equals(\"\") && !this.failover)   s += \"(FAILOVER=false)\";\n\n    if (!s.equals(\"\")) // no valid children were found\n      s = \"(DESCRIPTION_LIST=\" + s + \")\";\n\n    return s;\n  }\n}\n\n\n\n\n\n/**\n * Class that contains information about a possible connection.\n */\nclass ConnOption {\n  constructor() {\n    this.CNdata = new Array();\n  }\n\n}\n\nconst NavSchemaObject = {\n  DEBUG: false,\n  SR: \"(SOURCE_ROUTE=yes)\",\n  HC: \"(HOP_COUNT=0)\",\n  LB: \"(LOAD_BALANCE=yes)\",\n  NFO: \"(FAILOVER=false)\",\n  CD: \"(CONNECT_DATA=\",\n  CONID: \"(CONNECTION_ID=\"\n};\nconst options = {\n  all: true,\n};\n/**\n * Class that navigates the address node in the tree.\n */\nclass NavAddress extends Address {\n  constructor() {\n    super();\n  }\n  /**\n   * Set the connection option to this address.\n   * @param {object} cs\n   */\n  async navigate(cs) {\n    let addresses;\n    let nullHost = 0;\n    let needToCloseDescription = false;\n    if (!this.host) {\n      nullHost = 1;\n      this.host = os.hostname();\n      try {\n        await dnsPromises.lookup(this.host, options);\n      } catch {\n        this.host = 'localhost';\n      }\n    }\n    // Sometimes REDIRECT packets do not have DESCRIPTION\n    // this is for handling such conditions.\n    if (cs.getcurrentDescription() == null) {\n      cs.newConnectionDescription();\n      needToCloseDescription = true;\n    }\n    if (!net.isIP(this.host)) {\n      try {\n        addresses = await dnsPromises.lookup(this.host, options);\n        for (const addr of addresses) {\n          const co = new ConnOption();\n          co.hostname = this.host;\n          co.port = this.port;\n          co.protocol = this.prot;\n          co.httpsProxy = this.httpsProxy;\n          co.httpsProxyPort = this.httpsProxyPort;\n          co.desc = cs.getcurrentDescription();\n          co.CNdata.push(cs.sBuf.join(\"\"));\n          if (nullHost == 1)\n            co.CNdata.push('(address=(protocol=' + this.prot + ')(host=' + this.host + ')(port=' + this.port + '))');\n          else\n            co.CNdata.push(this.toString());\n          co.host = addr.address;\n          co.addr = this.addr;\n          cs.getcurrentDescription().addConnectOption(co);\n        }\n      } catch {\n        // do nothing\n      }\n    } else {\n      const co = new ConnOption();\n      co.hostname = this.host;\n      co.port = this.port;\n      co.protocol = this.prot;\n      co.httpsProxy = this.httpsProxy;\n      co.httpsProxyPort = this.httpsProxyPort;\n      co.desc = cs.getcurrentDescription();\n      co.CNdata.push(cs.sBuf.join(\"\"));\n      co.CNdata.push(this.toString());\n      co.host = this.host;\n      co.addr = this.addr;\n      cs.getcurrentDescription().addConnectOption(co);\n    }\n\n    if (needToCloseDescription) {\n      cs.closeDescription();\n    }\n\n  }\n\n\n\n  /**\n   * AddToString is used to construct a string representation of the TNS\n   * Address. Constructing a string is mainly needed when source route is ON.\n   */\n  addToString(cs) {\n    const NVString = this.toString();\n    let cOpts = new Array();\n    cOpts = cs.getcurrentDescription().getConnectOptions();\n    for (let i = 0;i < cOpts.length; i++) {\n      if (cOpts[i].done) {\n        continue;\n      }\n      cOpts[i].CNdata.push(NVString);\n    }\n  }\n}\n\n/**\n * Class that navigates the addressList node in the tree.\n */\nclass NavAddressList extends AddressList {\n  constructor() {\n    super();\n    this.activeChildren = new Array();\n    this.sBuflength = 0;\n  }\n\n  /**\n * Method decides how to traverse and sets the active children based on\n * the loadbalancing, failover values.\n * @param {object} cs\n */\n  async navigate(cs) {\n    await this.navigate2(cs, 0);\n  }\n\n  async navigate2(cs, reCurCnt) {\n    reCurCnt++;\n    this.sBuflength = cs.sBuf.length;\n    cs.sBuf.push(\"(ADDRESS_LIST=\");\n    if (this.sourceRoute) {\n      this.activeChildren = this.children;\n      await this.activeChildren[0].navigate(cs);\n\n      for (let i = 1; i < this.activeChildren.length; i++) {\n        this.activeChildren[i].addToString(cs);\n      }\n    } else { // SR is off\n      this.activeChildren = NavDescriptionList.setActiveChildren(this.children, this.failover,\n        this.loadBalance);\n      for (let i = 0; i < this.activeChildren.length; i++) {\n        if (this.getChildrenType(i) == 1) {\n          await this.activeChildren[i].navigate2(cs, reCurCnt);\n        } else {\n          await this.activeChildren[i].navigate(cs);\n        }\n\n      }\n    }\n    this.closeNVPair(cs);\n    cs.sBuf.length = this.sBuflength;\n\n  }\n  addToString(cs) {\n    const NVString = this.toString();\n    let cOpts = new Array();\n    cOpts = cs.getcurrentDescription().getConnectOptions();\n    for (let i = 0;i < cOpts.length; i++) {\n      if (cOpts[i].done) {\n        continue;\n      }\n      cOpts[i].CNdata.push(NVString);\n    }\n  }\n\n\n  getChildrenSize() {\n    let size = 0;\n    for (let i = 0; i < this.activeChildren.length; i++) {\n      if (this.getChildrenType(i) == 1) {\n        size += this.activeChildren[i].getChildrenSize();\n      } else {\n        size++;\n      }\n      if (this.sourceRoute)\n        return size;\n    }\n    return (size);\n  }\n\n  /**\n   * get children type\n  */\n  getChildrenType(childNum) {\n    return (this.activeChildren[childNum].isS());\n  }\n\n  /**\n   *get child at a given pos\n  */\n  getChild(childNum) {\n    return (this.children[childNum]);\n  }\n\n  closeNVPair(cs) {\n    let cOpts = new Array();\n    const childS = this.getChildrenSize();\n    if (cs.getcurrentDescription() != null) {\n      cOpts = cs.getcurrentDescription().getConnectOptions();\n      let numChildren = 0;\n      let prevHost = null;\n      let prevPort = null;\n      for (let i = cOpts.length - 1 ; (i >= 0\n              && !cOpts[i].done); i--) {\n        if (cOpts[i].hostname != prevHost || cOpts[i].port != prevPort)\n          numChildren++;\n        prevHost = cOpts[i].hostname;\n        prevPort = cOpts[i].port;\n\n        // close NV Pair for current active children\n        if ((numChildren > childS)) {\n          break;\n        }\n\n        if (this.sourceRoute) {\n          cOpts[i].CNdata.push(NavSchemaObject.SR);\n          cOpts[i].CNdata.push(NavSchemaObject.HC);\n          cOpts[i].done = true;\n        }\n        // Always close the NV Pair with a \")\"\n        cOpts[i].CNdata.push(\")\");\n      }\n    }\n  }\n\n\n}\n\n/**\n * Class that navigates the description node in a tree.\n */\nclass NavDescription extends Description {\n  constructor() {\n    super();\n    this.activeChildren = new Array();\n    this.descProcessed = 0;\n  }\n\n  /**\n * Method decides how to traverse and sets the active children based on\n * the loadbalancing, failover values. Also creates connection description\n * object.\n * @param {object} cs\n */\n  async navigate(cs) {\n    cs.sBuf.length = 0; //reset\n    cs.sBuf.push(\"(DESCRIPTION=\");\n    const desc = cs.newConnectionDescription(); //connectiondescription\n    if (this.retryCount != null) {\n      cs.retryCount = this.getIntValue(this.retryCount, cs.retryCount);\n      desc.retryCount = cs.retryCount;\n    }\n    if (this.delayInMillis != -1) {\n      desc.delayInMillis = this.delayInMillis;\n    }\n\n    desc.params = this.params;\n\n    if ('connectTimeout' in this.params) {\n      cs.sBuf.push(\"(CONNECT_TIMEOUT=\" + this.params.connectTimeout + \")\");\n    }\n    if ('transportConnectTimeout' in this.params) {\n      cs.sBuf.push(\"(TRANSPORT_CONNECT_TIMEOUT=\" + this.params.transportConnectTimeout + \")\");\n    }\n    if ('recvTimeout' in this.params) {\n      cs.sBuf.push(\"(RECV_TIMEOUT=\" + this.params.recvTimeout + \")\");\n    }\n    if ('sdu' in this.params) {\n      cs.sBuf.push(\"(SDU=\" + this.params.sdu + \")\");\n    }\n    if ('expireTime' in this.params) {\n      cs.sBuf.push(\"(EXPIRE_TIME=\" + this.params.expireTime + \")\");\n    }\n    if ('enable' in this.params) {\n      cs.sBuf.push(\"(ENABLE=\" + this.params.enable + \")\");\n    }\n    if (('sslServerCertDN' in this.params) || ('sslServerDNMatch' in this.params) || ('walletLocation' in this.params) || ('sslAllowWeakDNMatch' in this.params)) {\n      cs.sBuf.push(\"(SECURITY=\");\n      if ('sslServerCertDN' in this.params) {\n        cs.sBuf.push(\"(SSL_SERVER_CERT_DN=\" + this.params.sslServerCertDN + \")\");\n      }\n      if ('sslServerDNMatch' in this.params) {\n        cs.sBuf.push(\"(SSL_SERVER_DN_MATCH=\" + this.params.sslServerDNMatch + \")\");\n      }\n      if ('sslAllowWeakDNMatch' in this.params) {\n        cs.sBuf.push(\"(SSL_ALLOW_WEAK_DN_MATCH=\" + this.params.sslAllowWeakDNMatch + \")\");\n      }\n      if ('walletLocation' in this.params) {\n        cs.sBuf.push(\"(WALLET_LOCATION=\" + this.params.walletLocation + \")\");\n      }\n      cs.sBuf.push(\")\");\n    }\n    if ('httpsProxyPort' in this.params) {\n      cs.sBuf.push(\"(HTTPS_PROXY_PORT=\" + this.params.httpsProxyPort + \")\");\n    }\n    if ('httpsProxy' in this.params) {\n      cs.sBuf.push(\"(HTTPS_PROXY=\" + this.params.httpsProxy + \")\");\n    }\n    if (!this.failover) {\n      cs.sBuf.push(NavSchemaObject.NFO);\n    }\n    if (!this.sourceRoute) {\n      // SR is off, navigate every child and close the NV Pair\n      this.activeChildren = NavDescriptionList.setActiveChildren(this.children, this.failover,\n        this.loadBalance);\n      for (let i = 0; i < this.activeChildren.length; i++) {\n        await this.activeChildren[i].navigate(cs);\n      }\n      this.closeNVPair(cs);\n    } else {\n      // SR is ON\n      this.activeChildren = this.children;\n      await this.activeChildren[0].navigate(cs);\n      for (let i = 1; i < this.activeChildren.length; i++) {\n        this.activeChildren[i].addToString(cs);\n      }\n      this.closeNVPair(cs);\n    }\n    cs.closeDescription();\n\n  }\n\n  closeNVPair(cs) {\n\n    if (cs.getcurrentDescription() == null)\n      return;\n    let cOpts = new Array();\n    cOpts = cs.getcurrentDescription().getConnectOptions();\n    for (let i = 0; i < cOpts.length; ++i) {\n\n      if (this.sourceRoute) {\n        cOpts[i].CNdata.push(NavSchemaObject.SR);\n      }\n\n      // Use default service, if no connect_data\n      if (this.connectData == null) {\n        this.connectData = \"(SERVICE_NAME=)\";\n      }\n      const pgmName = \"\\\"'\" + cInfo.program + \"'\\\"\";\n      const cid = `(CID=(PROGRAM=${pgmName})(HOST=${cInfo.hostName})(USER=${cInfo.userName}))`;\n      cOpts[i].CNdata.push(NavSchemaObject.CD);\n      cOpts[i].CNdata.push(this.connectData);\n      cOpts[i].CNdata.push(cid);\n      cOpts[i].CNdata.push(\")\");\n\n      if (this.SID != null) {\n        cOpts[i].sid = this.SID;\n      }\n      if (this.serviceName != null) {\n        cOpts[i].service_name = this.serviceName;\n      }\n      if (this.instanceName != null) {\n        cOpts[i].instance_name = this.instanceName;\n      }\n      // Close the description\n      cOpts[i].CNdata.push(\")\");\n      cOpts[i].done = true;\n    }\n  }\n\n  getIntValue(stringInt, defaultValue) {\n    try {\n      return parseInt(stringInt);\n    } catch (exception) {\n      return defaultValue;\n    }\n  }\n\n}\n\n/**\n * Class that navigates descriptionlist node in a tree.\n */\nclass NavDescriptionList extends DescriptionList {\n  constructor(activeChildren = new Array(), descProcessed = 0, done = 0) {\n    super();\n    this.activeChildren = activeChildren;\n    this.descProcessed = descProcessed;\n    this.done = done;\n  }\n\n  /**\n * Method decides how to traverse and sets the active children based on\n * the loadbalancing, failover values.\n * @param {object} cs\n */\n  async navigate(cs) {\n    cs.sBuf.push(\"(DESCRIPTION_LIST=\");\n    this.activeChildren = NavDescriptionList.setActiveChildren(this.children, this.failover, this.loadBalance);\n    while (this.descProcessed < this.activeChildren.length) {\n      await this.activeChildren[this.descProcessed].navigate(cs);\n      this.descProcessed++;\n    }\n\n  }\n\n  /** set active children based on lb and failover values.\n   * @param children\n   * @param failover\n   * @param loadBalance\n   */\n  static setActiveChildren(children, failover, loadBalance) {\n    let randNumber;\n    const listSize = children.length;\n    let tmpChildren = new Array();\n    const rand = Math.floor(Math.random() * 10);\n    const arr = new Array(listSize).fill(false);\n\n    if (failover) {\n      if (loadBalance) {\n        for (let i = 0; i < listSize; i++) {\n          do {\n            randNumber = Math.abs(Math.floor(Math.random() * 10)) % listSize;\n          } while (arr[randNumber]);\n          arr[randNumber] = true;\n          tmpChildren.push(children[randNumber]);\n        }\n      } else {\n        tmpChildren = children;\n      }\n    } else {          // not failover\n      if (loadBalance) {\n        randNumber = Math.abs(rand) % listSize;\n        tmpChildren.push(children[randNumber]);\n      } else {\n        tmpChildren.push(children[0]);\n      }\n    }\n\n    return (tmpChildren);\n\n  }\n\n\n\n}\nmodule.exports = {NavAddress, NavAddressList, NavDescription, NavDescriptionList};\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { NavAddress, NavAddressList, NavDescription, NavDescriptionList } = require(\"./navNodes.js\");\nconst { createNVPair } = require(\"./nvStrToNvPair.js\");\nconst errors = require(\"../../errors.js\");\n\n/**\n * Class that holds all possible attributes under Description\n */\nclass ConnectDescription {\n  constructor() {\n    this.cOpts = new Array();\n  }\n\n  addConnectOption(opt) {\n    this.cOpts.push(opt);\n  }\n\n  getConnectOptions() {\n    return this.cOpts;\n  }\n\n}\n\n/**\n * Class that holds a list of possible connection options.\n */\nclass ConnStrategy {\n  constructor() {\n    this.reset();\n    this.retryCount = 0;\n    this.currentDescription = null;\n    this.descriptionList = new Array();\n    this.sBuf = new Array();\n  }\n\n  reset() {\n    this.nextOptToTry = 0;\n    this.lastRetryCounter = 0;\n    this.lastRetryConnectDescription = 0;\n    this.reorderDescriptionList = 0;\n  }\n\n  hasMoreOptions() {\n    let cOptsSize = 0;\n\n    for (let i = 0; i < this.descriptionList.length; ++i) {\n      cOptsSize += this.descriptionList[i].getConnectOptions().length;\n    }\n    return (this.nextOptToTry < cOptsSize);\n  }\n\n  newConnectionDescription() {\n    this.currentDescription = new ConnectDescription();\n    return this.currentDescription;\n  }\n\n  getcurrentDescription() {\n    return this.currentDescription;\n  }\n\n  closeDescription() {\n    this.descriptionList.push(this.currentDescription);\n    this.currentDescription = null;\n  }\n  /**\n  * Execute the Connection Options from the array.  When a refuse packet is received from\n  * server this method is called again and the next connect option is tried.\n  */\n  async execute(config) {\n    /* Check for retryCount in the config if no retryCount exists in the description string */\n    if (config != null) {\n      if (this.retryCount == 0 && config.retryCount > 0) {\n        this.retryCount = config.retryCount;\n      }\n    }\n    if (!this.reorderDescriptionList) {\n      this.descriptionList = SOLE_INST_DHCACHE.reorderDescriptionList(this.descriptionList);\n      this.reorderDescriptionList = true;\n    }\n    /* We try the address list at least once and upto (1 + retryCount) times */\n    for (let d = this.lastRetryConnectDescription; d < this.descriptionList.length; d++) {\n      const desc = this.descriptionList[d];\n      let cOpts = new Array();\n      cOpts = desc.getConnectOptions();\n      let delay = desc.delayInMillis;\n      /* check for retryDelay in config if it doesn't exist in description string */\n      if (config != null) {\n        if ((delay == 0 || delay == undefined) && config.retryDelay > 0) {\n          delay = config.retryDelay * 1000;\n        }\n      }\n      for (let i = this.lastRetryCounter; i <= this.retryCount; ++i) {\n        //Conn options must be reordered only when all options are tried\n        // i.e for retry and before the first try.\n        if (this.nextOptToTry == 0) {\n          cOpts = SOLE_INST_DHCACHE.reorderAddresses(cOpts);\n        }\n        while (this.nextOptToTry < cOpts.length) {\n          const copt = cOpts[this.nextOptToTry];\n          this.lastRetryCounter = i;\n          this.lastRetryConnectDescription = d;\n          this.nextOptToTry++;\n          return copt;\n        }\n        this.nextOptToTry = 0;\n        // if we reached here then we are retrying other descriptor\n        if (delay > 0 && i < this.retryCount) {\n          await sleep(delay);\n        }// end of (delay > 0)\n\n      }// end of for(lastRetryCounter..retryCount)\n      this.lastRetryCounter = 0; // reset after one description is completed\n    }\n    // if we get here, all options were tried and none are valid\n    this.nextOptToTry = 1000;\n    this.lastRetryCounter = 1000;\n    throw new Error(\"All options tried\");\n  }\n  // sleep time expects milliseconds\n\n\n}\nfunction sleep(time) {\n  return new Promise((resolve) => setTimeout(resolve, time));\n}\n\n\n/**\n * create different nodes (schemaobject) as per the given input.\n * @param {string} str - input description string\n * @returns {object} - returns a connection strategy object.\n */\nasync function createNode(str) {\n  let nvpair;\n  if (typeof str === 'string')\n    nvpair = createNVPair(str);\n  else\n    nvpair = str; //Already a NVPair\n\n  const arg = nvpair.name.toUpperCase();\n  let navobj = null;\n  switch (arg) {\n    case \"ADDRESS\":\n      navobj = new NavAddress();\n      break;\n    case \"ADDRESS_LIST\":\n      navobj = new NavAddressList();\n      break;\n    case \"DESCRIPTION\":\n      navobj = new NavDescription();\n      break;\n    case \"DESCRIPTION_LIST\":\n      navobj = new NavDescriptionList();\n      break;\n    default:\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_PARAMETERS,\n        `unknown top element ${arg}`);\n  }\n  navobj.initFromNVPair(nvpair);\n  const cs = new ConnStrategy();\n  await navobj.navigate(cs);\n  return cs;\n}\n\n\nclass DownHostsCache {\n\n  constructor() {\n    // Timeout for each item in the cache\n    this.DOWN_HOSTS_TIMEOUT = 600;\n    // Minimum amount of time between each refresh\n    this.MIN_TIME_BETWEEN_REFRESH = 60;\n    // DownHostsCache Map\n    this.downHostsCacheMap = new Map();\n    // Last Refresh Time\n    this.lastRefreshTime = 0;\n  }\n\n  /**\n   * Add an address to the cache\n   *\n   * @param connOption\n   *            address to be cached\n   * @return Map with address as key and time of insertion as value\n   */\n  markDownHost(addr) {\n    return this.downHostsCacheMap.set(addr, Date.now());\n  }\n\n  // Remove elements older than DownHostsTimeout\n  refreshCache() {\n    if (Date.now() - this.MIN_TIME_BETWEEN_REFRESH * 1000 > this.lastRefreshTime) {\n      this.downHostsCacheMap.forEach((value, key) => {\n        const entryTime = value;\n        if (entryTime != null && ((Date.now() - this.DOWN_HOSTS_TIMEOUT * 1000) > entryTime)) {\n          this.downHostsCacheMap.delete(key);\n        }\n      });\n      this.lastRefreshTime = Date.now();\n    }\n  }\n\n  /**\n   * Reorder addresses such that cached elements\n   * occur at the end of the array.\n   */\n  reorderAddresses(cOpts) {\n    this.refreshCache();\n\n    let topIdx = 0, btmIdx = cOpts.length - 1;\n\n    while (topIdx < btmIdx) {\n\n      // increment topIdx if the address is not cached\n      while (topIdx <= btmIdx\n          && !this.isDownHostsCached(cOpts[topIdx]))\n        topIdx++;\n\n      // decrement btmIdx if address is cached\n      while (btmIdx >= topIdx\n          && this.isDownHostsCached(cOpts[btmIdx]))\n        btmIdx--;\n\n      // swap cached with uncached\n      if (topIdx < btmIdx)\n        [cOpts[topIdx], cOpts[btmIdx]] = [cOpts[btmIdx], cOpts[topIdx]];\n\n    }\n    return cOpts;\n  }\n  /**\n   * Return if a desc is cached.\n   * A desc is cached if all the connection options(addresses)\n   * in that description are cached.\n   */\n  isDownDescCached(desc) {\n    const cOpts = desc.getConnectOptions();\n    for (let i = 0; i < cOpts.length; i++) {\n      if (!this.isDownHostsCached(cOpts[i]))\n        return false;\n    }\n    return true;\n  }\n  /**\n   * Reorder description list such that description with all connection options in downcache\n   * is pushed to the end of the description list\n   */\n  reorderDescriptionList(descs) {\n    this.refreshCache();\n\n    let topIdx = 0, btmIdx = descs.length - 1;\n\n    while (topIdx < btmIdx) {\n\n      // increment topIdx if the desc is not cached\n      while (topIdx <= btmIdx\n          && !this.isDownDescCached(descs[topIdx]))\n        topIdx++;\n\n      // decrement btmIdx if desc is cached\n      while (btmIdx >= topIdx\n          && this.isDownDescCached(descs[btmIdx]))\n        btmIdx--;\n\n      // swap cached with uncached\n      if (topIdx < btmIdx) {\n        [descs[topIdx], descs[btmIdx]] = [descs[btmIdx], descs[topIdx]];\n      }\n    }\n    return descs;\n  }\n  // Return if a host is cached\n  isDownHostsCached(copt) {\n    return this.downHostsCacheMap.has(copt.host);\n  }\n}\n// Single instance\nconst SOLE_INST_DHCACHE = new DownHostsCache();\nmodule.exports = { createNode, SOLE_INST_DHCACHE };\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst errors = require(\"../../errors.js\");\n\n// The host information pattern of the EZConnect URL format.\n/*\nUsed (?=) for lookahead and \\\\k<hostnames> for the backreference.Lookahead\nand backreference together prevents catastrophic backtracking.\nTest Case in oracle_private/ezconnectTest.js\n*/\n\nconst HOSTNAMES_PATTERN = new RegExp(\"((?=(?<hostnames>(((\\\\[[A-z0-9:]+\\\\])|([A-z0-9][A-z0-9._-]+))[,]?)+)))\\\\k<hostnames>(:(?<port>\\\\d+)?)?\", 'g');\n\n// The EZConnect pattern without the extended settings part.\nconst EZ_URL_PATTERN = new RegExp(\"^(((?<protocol>[A-z0-9]+):)?//)?\"\n    + \"(?<hostinfo>(\" + HOSTNAMES_PATTERN.source + \"(?=([,]|[;]|[/]|[:]|$))([,]|[;])?)+)\"\n    + \"(/(?<servicename>[A-z0-9][A-z0-9,-.]+)?)\"\n    + \"?(:(?<servermode>dedicated|shared|pooled))\"\n    + \"?(/(?<instance>[A-z0-9][A-z0-9]+))?$\", 'ig');\n\n//'=' separates the connection property name and value.\nconst EXT_DOUBLE_QT = '\"';\n\n// '=' separates the connection property name and value.\nconst EXT_KEY_VAL_SEP = '=';\n\n// '&' separates the connection properties.\nconst EXT_PARAM_SEP = '&';\n\n// The parameters which will be part of the DESCRIPTION node.\nconst DESCRIPTION_PARAMS = [\"ENABLE\", \"FAILOVER\", \"LOAD_BALANCE\",\n  \"RECV_BUF_SIZE\", \"SEND_BUF_SIZE\", \"SDU\",\n  \"SOURCE_ROUTE\", \"RETRY_COUNT\", \"RETRY_DELAY\",\n  \"CONNECT_TIMEOUT\", \"TRANSPORT_CONNECT_TIMEOUT\", \"RECV_TIMEOUT\"];\n/*\n   DESCRIPTION\n    This class takes care resolving the EZConnect format to Long TNS URL format.\n    It also takes care of parsing the connection and url properties set in the url.\n    The format of the EZConnect URL is :\n    [[protocol:]//]host1[,host12;host13][:port1][,host2:port2][/service_name]\n        [:server][/instance_name][?[key1=value1][&key2=value2]...\n\n */\nclass EZConnectResolver {\n  constructor(url) {\n    this.URL_PROPS_ALIAS = this.initializeUrlAlias();\n    this.url = url;\n    this.resolvedUrl = '';\n    this.connectionProps = new Map();\n    this.urlProps = new Map();\n    this.lb = false;\n  }\n\n  /**\n * Returns the resolved long TNS String.\n * @return Resolved TNS URL.\n */\n  getResolvedUrl() {\n    this.parse();\n    return this.resolvedUrl;\n  }\n\n  /**\n   * First parse the extended settings part of the given url.\n   * After parsing the extended settings if the remaining part of the URL is in\n   * EZConnectURL format then resolve it to long TNS url format.\n   */\n  parse() {\n    // First try to parse the extended settings part of the URL.\n    let parsedUrl = this.parseExtendedSettings(this.url);\n    if (this.connectionProps.size === 0 && this.urlProps.size === 0) {\n      // If we have not parsed anything then use the received url as is.\n      parsedUrl = this.url;\n    }\n    // Try to resolve the EZConnectURL to Long TNS URL.\n    this.resolvedUrl = this.resolveToLongURLFormat(parsedUrl);\n  }\n  /**\n  * Translate the given ezconnect url format to Long TNS format.\n  * @param url EZConnect URL\n  * @return Returns resolved TNS url.\n  */\n  resolveToLongURLFormat(url) {\n    // URL is in the following format\n    // [protocol://]host1[,host13][:port1][,host2:port2][/service_name][:server][/instance_name]\n\n    const urlWithoutWhiteSpaces = url.replace(/\\s/g, \"\");\n    let bool = 0;\n    let protocol = null, hostInfo = null, serviceName = null, serverMode = null, instanceName = null;\n    for (const match of urlWithoutWhiteSpaces.matchAll(EZ_URL_PATTERN)) {\n      bool = 1;\n      protocol = match.groups.protocol;\n      hostInfo = match.groups.hostinfo;\n      serviceName = match.groups.servicename;\n      serverMode = match.groups.servermode;\n      instanceName = match.groups.instance;\n    }\n    if (!bool) {\n      // No Processing required as the URL is not in ezconnect format.\n      errors.throwErr(errors.ERR_INVALID_EZCONNECT_SYNTAX, 'input string not in easy connect format', urlWithoutWhiteSpaces);\n    }\n\n    if (protocol == null) {\n      if (!(url.includes(\"//\")))\n        protocol = 'TCP';\n    } else if (protocol.toLowerCase() != 'tcp' && protocol.toLowerCase() != 'tcps') {\n      errors.throwErr(errors.ERR_INVALID_EZCONNECT_SYNTAX, 'Unsupported protocol in thin mode', protocol);\n    }\n    // Try to get the proxy information from URL properties\n    const proxyHost = this.urlProps.get(\"HTTPS_PROXY\");\n    const proxyPort = this.urlProps.get(\"HTTPS_PROXY_PORT\");\n    const addressInfo =\n      this.buildAddressList(hostInfo, protocol, proxyHost, proxyPort);\n\n    const connectionIdPrefix =\n      this.urlProps.get(\"CONNECTION_ID_PREFIX\");\n    // Build the available information in TNS format.\n    const parts = [];\n    if (this.lb)\n      parts.push(\"(LOAD_BALANCE=ON)\");\n    parts.push(this.buildDescriptionParams());\n    parts.push(addressInfo);\n    parts.push(this.buildConnectData(serviceName, serverMode, instanceName,\n      connectionIdPrefix));\n    parts.push(this.buildSecurityInfo(protocol));\n    return `(DESCRIPTION=${parts.join('')})`;\n  }\n\n  /**\n   * Returns the CONNECT_DATA part of DESCRIPTION node of the TNS URL.\n   * @param serviceName the database service name [optional].\n   * @param serverMode dedicated or shared or pooled [optional].\n   * @param instanceName the database instance name [optional].\n   * @param connectionIdPrefix prefix which will be appended to the connection id [optional].\n   * @return CONNECT_DATA as string\n   */\n  buildConnectData(serviceName, serverMode, instanceName, connectionIdPrefix) {\n    const poolConnectionClass = this.urlProps.get(\"POOL_CONNECTION_CLASS\");\n    const poolPurity = this.urlProps.get(\"POOL_PURITY\");\n    const serviceTag = this.urlProps.get(\"SERVICE_TAG\");\n    const poolBoundary = this.urlProps.get(\"POOL_BOUNDARY\");\n\n    const parts = [];\n    if (serviceName)\n      parts.push(`(SERVICE_NAME=${serviceName})`);\n    else\n      parts.push('(SERVICE_NAME=)');\n    if (serverMode)\n      parts.push(`(SERVER=${serverMode})`);\n    if (instanceName)\n      parts.push(`(INSTANCE_NAME=${instanceName})`);\n    if (poolConnectionClass)\n      parts.push(`(POOL_CONNECTION_CLASS=${poolConnectionClass})`);\n    if (poolPurity)\n      parts.push(`(POOL_PURITY=${poolPurity})`);\n    if (serviceTag)\n      parts.push(`(SERVICE_TAG=${serviceTag})`);\n    if (connectionIdPrefix)\n      parts.push(`(CONNECTION_ID_PREFIX=${connectionIdPrefix})`);\n    if (poolBoundary)\n      parts.push(`(POOL_BOUNDARY=${poolBoundary})`);\n    return `(CONNECT_DATA=${parts.join(\"\")})`;\n  }\n\n  /**\n* Builds the address information of the DESCRIPTION node with the given\n* information.\n* @param hostInfo host and port information separated by comma.\n                hosts can be grouped into a ADDRESS_LIST using semi-colon ';'\n* @param protocol either tcp or tcps [optional].\n* @param proxyHost host name of the proxy server [optional].\n* @param proxyPort proxy server port [optional].\n* @return address information of the DESCRIPTION node.\n*/\n  buildAddressList(hostInfo, protocol,\n    proxyHost, proxyPort) {\n    const builder = new Array();\n    let proxyInfo = '';\n    if (proxyHost != null) {\n      if (proxyPort != null) {\n        proxyInfo = `(HTTPS_PROXY=${proxyHost})(HTTPS_PROXY_PORT=${proxyPort})`;\n      } else {\n        proxyInfo = `(HTTPS_PROXY=${proxyHost})`;\n      }\n    }\n\n    if (protocol == null) protocol = 'TCP';\n    let naddr = 0;\n    // ; groups the user into a ADDRESS_LIST\n    const addressLists = hostInfo.split(\";\");\n    for (const addressList of addressLists) {\n      let addressNodeCount = 0;\n      const addressListBuilder = new Array();\n      for (const match of addressList.matchAll(HOSTNAMES_PATTERN)) {\n        const hostnames = (match.groups.hostnames).split(',');\n        let port = match.groups.port;\n        if (port == null) {\n          port = '1521';    //default port\n        }\n        for (const hname of hostnames) {\n          addressListBuilder.push(this.getAddrStr(hname, port, protocol, proxyInfo));\n          addressNodeCount++;\n        }\n      }\n      naddr += addressNodeCount;\n      const parts = [];\n      if (addressLists.length > 1 && addressNodeCount > 1)\n        parts.push('(LOAD_BALANCE=ON)');\n      parts.push(addressListBuilder.join(''));\n      if (addressLists.length > 1)\n        builder.push(`(ADDRESS_LIST=${parts.join('')})`);\n      else\n        builder.push(parts.join(''));\n    }\n\n    if (addressLists.length < 2 && naddr > 1) {\n      this.lb = true;\n    }\n\n    return builder.join('');\n\n  }\n  /**\n* Builds address information using the given hostname, port, protocol and\n* proxyinfo.\n* @param hostName\n* @param port\n* @param protocol\n* @param proxyInfo\n* @return addressInfo\n*/\n  getAddrStr(hostName, port, protocol, proxyInfo) {\n    let host = hostName.trim();\n    // If it is IPV6 format address then remove the enclosing '[' and ']'\n    if (host.startsWith(\"[\") && host.endsWith(\"]\"))\n      host = host.substring(1, host.length - 1);\n    return `(ADDRESS=(PROTOCOL=${protocol})(HOST=${host})(PORT=${port})${proxyInfo})`;\n  }\n  /**\n* Builds the parameters for the DESCRIPTION node using the parsed properties\n* from the URL.\n* @return Description Parameters String.\n*/\n  buildDescriptionParams() {\n    if (this.urlProps.size === 0)\n      return '';\n    const builder = new Array();\n    this.urlProps.forEach(function(v, k) {\n      if (DESCRIPTION_PARAMS.includes(k)) // Add only if it is a DESCRIPTION node parameter\n        builder.push(`(${k}=${v})`);\n    });\n    return builder.join('');\n  }\n\n  /**\n* Builds the security section of the DESCRIPTION node, which contains the information\n* about wallet location, server DN, encryption and checksum options.\n* @return security node of the description as string.\n*/\n  buildSecurityInfo(protocol) {\n    const securityInfo = new Array();\n    if (protocol != null && protocol.toLowerCase() == \"tcps\") {\n      // In EZConnect format if the DN match is not specified the enable it\n      // by default for TCPS protocol.\n      const serverDNMatch = this.urlProps.get(\"SSL_SERVER_DN_MATCH\");\n      const serverCertDN = this.urlProps.get(\"SSL_SERVER_CERT_DN\");\n      const walletDir = this.urlProps.get(\"MY_WALLET_DIRECTORY\");\n      if (serverDNMatch != null)\n        securityInfo.push(`(SSL_SERVER_DN_MATCH=${serverDNMatch})`);\n      if (serverCertDN != null)\n        securityInfo.push(`(SSL_SERVER_CERT_DN=${serverCertDN}})`);\n      if (walletDir != null)\n        securityInfo.push(`(MY_WALLET_DIRECTORY=${walletDir})`);\n    }\n    if (securityInfo.length === 0)\n      return '';\n    return `(SECURITY=${securityInfo.join('')})`;\n  }\n\n  /**\n   * If the URL has extended settings part appended to it, this method takes\n   * care of parsing it.\n   * Parses the Extended Settings and takes appropriate action based on the\n   * settings type.\n   * <URL>?<propertyName1>=<propertyValue1>&<propertyName2>=<propertyValue2>.\n   * @param urlStr Database URL supplied by the application.\n   * @return the parsed URL which does not contain the extended settings part.\n   */\n  parseExtendedSettings(urlStr) {\n    const urlBytes = Array.from(urlStr.trim());\n    const extendedSettingsIndex = this.findExtendedSettingPosition(urlBytes);\n\n    if (extendedSettingsIndex == -1) {\n      return urlStr; // No extended settings configuration found\n    }\n    this.parseExtendedProperties(urlBytes, (extendedSettingsIndex + 1));\n    return urlStr.substring(0, extendedSettingsIndex);\n  }\n  /**\n  * Loops through the chars of the extended settings part of the URL and\n  * parses the connection properties.\n  * @param urlChars URL in char[]\n  * @param extIndex the begin index of the extended settings\n  */\n  parseExtendedProperties(urlChars, extIndex) {\n    let key = null;\n    let value = null;\n    const token = new Array(urlChars.length);\n    let tokenIndx = 0;\n    let indices = '';\n    for (let i = extIndex; i < urlChars.length; i++) {\n      if (urlChars[i].trim() == '') {\n        continue;   //if whitespace char, then ignore it\n      }\n\n      switch (urlChars[i]) {\n        case EXT_DOUBLE_QT:\n          indices = this.parseQuotedString(i, urlChars, tokenIndx, token);\n          tokenIndx = indices[1];\n          i = indices[0];\n          break;\n\n        // Hit a '=' assign the value up to this to param key and\n        // reset the startIndex\n        case EXT_KEY_VAL_SEP:\n          if (key != null) {\n            errors.throwErr(errors.ERR_INVALID_EZCONNECT_SYNTAX, 'unable to parse, invalid syntax', this.url);\n          }\n          key = token.join(\"\").substring(0, tokenIndx).trim();\n          tokenIndx = 0;\n          break;\n\n        // Hit a '&' assign the value up to this to param key and\n        // reset the startIndex\n        case EXT_PARAM_SEP:\n          if (key == null) {\n            errors.throwErr(errors.ERR_INVALID_EZCONNECT_SYNTAX, 'unable to parse, invalid syntax', this.url);\n          }\n          value = token.join(\"\").substring(0, tokenIndx).trim();\n          this.addParam(key, value);\n          key = null;\n          value = null;\n          tokenIndx = 0;\n          break;\n\n        default:\n          token[tokenIndx++] = urlChars[i];\n      }\n    }\n    // We don't have any unassigned key, ignore the read chars.\n    if (key != null) {\n      value = token.join(\"\").substring(0, tokenIndx).trim();\n      this.addParam(key, value);\n    }\n  }\n\n  /**\n   * Parses the quoted string from the given startIndex of the urlChars and\n   * return the length of the parsed quoted string.\n   * @param startIndex index of the starting '\"' in the urlChars\n   * @param urlChars char[] of the url string.\n   * @param tokenIndex starting index in the token char[] to store the result\n   * @param token char[] to store the result\n   * @return int[] int[0] - new index for urlChars, int[1] new index for token\n   */\n  parseQuotedString(startIndex, urlChars, tokenIndex, token) {\n    let i = startIndex + 1; // look for closing '\"' from the next index\n    while (i < urlChars.length) {\n      const curChar = urlChars[i];\n      if (curChar == EXT_DOUBLE_QT) {\n        // Got the \" which ends the quoted block, so break the loop\n        // Return the new indices, caller would resume from this new indices.\n        return [i, tokenIndex];\n      } else {\n        token[tokenIndex++] = curChar;\n      }\n      i++;\n    }\n  }\n\n  /**\n   * Adds the given key and value to the connection properties.\n   * @param key\n   * @param value\n   */\n  addParam(key, value) {\n    const aliasKeyName = key.toLowerCase();\n    const propertyName = this.URL_PROPS_ALIAS.get(aliasKeyName);\n    if (propertyName != null) {\n      // if it is an URL alias then add to URL props\n      this.urlProps.set(propertyName, value);\n    } else {\n      this.connectionProps.set(propertyName, value);\n    }\n  }\n\n  findExtendedSettingPosition(urlBytes) {\n    let urlNodeDepth = 0;\n    for (let i = 0; i < urlBytes.length; i++) {\n      if (urlBytes[i] == '(') urlNodeDepth++;\n      else if (urlBytes[i] == ')') urlNodeDepth--;\n      else if (urlBytes[i] == '?' && urlNodeDepth == 0) return i;\n    }\n    return -1;\n  }\n\n  /**\n   * Initialize a Map with URL parameter alias. key is what we get from the\n   * URL and the value is what we use while creating the TNS URL.\n   * @return url alias map\n   */\n  initializeUrlAlias() {\n    const aliasMap = new Map();\n    aliasMap.set(\"enable\", \"ENABLE\");\n    aliasMap.set(\"failover\", \"FAILOVER\");\n    aliasMap.set(\"load_balance\", \"LOAD_BALANCE\");\n    aliasMap.set(\"recv_buf_size\", \"RECV_BUF_SIZE\");\n    aliasMap.set(\"send_buf_size\", \"SEND_BUF_SIZE\");\n    aliasMap.set(\"sdu\", \"SDU\");\n    aliasMap.set(\"source_route\", \"SOURCE_ROUTE\");\n    aliasMap.set(\"retry_count\", \"RETRY_COUNT\");\n    aliasMap.set(\"retry_delay\", \"RETRY_DELAY\");\n    aliasMap.set(\"https_proxy\", \"HTTPS_PROXY\");\n    aliasMap.set(\"https_proxy_port\", \"HTTPS_PROXY_PORT\");\n    aliasMap.set(\"connect_timeout\", \"CONNECT_TIMEOUT\");\n    aliasMap.set(\"transport_connect_timeout\", \"TRANSPORT_CONNECT_TIMEOUT\");\n    aliasMap.set(\"recv_timeout\", \"RECV_TIMEOUT\");\n    aliasMap.set(\"ssl_server_cert_dn\", \"SSL_SERVER_CERT_DN\");\n    aliasMap.set(\"ssl_server_dn_match\", \"SSL_SERVER_DN_MATCH\");\n    aliasMap.set(\"wallet_location\", \"MY_WALLET_DIRECTORY\");\n    aliasMap.set(\"pool_connection_class\", \"POOL_CONNECTION_CLASS\");\n    aliasMap.set(\"pool_purity\", \"POOL_PURITY\");\n    aliasMap.set(\"service_tag\", \"SERVICE_TAG\");\n    aliasMap.set(\"connection_id_prefix\", \"CONNECTION_ID_PREFIX\");\n    aliasMap.set(\"pool_boundary\", \"POOL_BOUNDARY\");\n    return aliasMap;\n  }\n}module.exports = EZConnectResolver;\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"readline\" has been externalized for browser compatibility. Cannot access \"readline.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst {createNVPair, findValue} = require(\"./nvStrToNvPair.js\");\nconst fs = require('fs');\nconst process = require('process');\nconst readline = require('readline');\nconst errors = require(\"../../errors.js\");\n\n/**\n * Returns File path of the tnsnames.ora if it exists.\n */\nfunction tnsnamesFilePath(configDir) {\n  let filePathVal = null;\n  const tnsAdminVal = process.env.TNS_ADMIN;\n  if (configDir) {\n    filePathVal = configDir + '/tnsnames.ora';\n    if (fs.existsSync(filePathVal)) {\n      return filePathVal;\n    } else {\n      errors.throwErr(errors.ERR_TNS_NAMES_FILE_MISSING, configDir);\n    }\n  } else {\n    if (!tnsAdminVal) {\n      errors.throwErr(errors.ERR_NO_CONFIG_DIR);\n    } else {\n      filePathVal = tnsAdminVal;\n      filePathVal += '/tnsnames.ora';\n      if (!fs.existsSync(filePathVal)) {\n        errors.throwErr(errors.ERR_TNS_NAMES_FILE_MISSING, tnsAdminVal);\n      }\n    }\n    return filePathVal;\n  }\n}\n\nlet prevmtime = 0;\n\nclass NLParamParser {\n  /**\n * Reads the given file line by line and stores the\n * network service names mapped to connect descriptors in the hashtable.\n * @param {string} file_path\n * @returns {Promise}\n */\n  async initializeNlpa(file_path) {\n    const stat = fs.statSync(file_path);\n\n    if (!(stat.mtime - prevmtime)) {\n      /* File has been read */\n      return this.ht;\n    }\n\n    // Creating a readable stream from file\n    // readline module reads line by line\n    // but from a readable stream only.\n    const file = readline.createInterface({\n      input: fs.createReadStream(file_path),\n      output: process.stdout,\n      terminal: false\n    });\n    this.ht = new Map();\n\n    const start = async () =>{\n      let nvElem = \"\";\n      for await (let line of file) {\n        if (line.length == 0) {   // ignore empty lines\n          continue;\n        } else if (line[0] == '#') {  // comment line\n          continue;\n        } else if ((line[0] == ' ') ||    // continued input on new line\n                    (line[0] == '\\t') ||\n                    (line[0] == ')') ||\n                    (line[0] == '(')) {\n          line = line.replace(/\\s+/g, '');\n          line = this.checkNLPforComments(line);\n          if (line.length == 0)\n            continue;\n          else {\n            nvElem = nvElem + line;\n          }\n\n        } else {  // new NV Element starting here\n          if (nvElem.length == 0) {\n\n            line = this.checkNLPforComments(line);\n            nvElem = nvElem + line;\n\n          } else if (nvElem.length != 0) {\n            this.addNLPListElement(nvElem); // Add Parameter to Hashtable\n            nvElem = \"\"; // Clear first, before storing current line\n\n            line = this.checkNLPforComments(line);\n            nvElem = nvElem + line;\n          }\n        }\n      }\n      if (nvElem.length != 0) { // at eof, still one more parameter to read\n        this.addNLPListElement(nvElem);\n        nvElem = \"\";      // clear nvElem buffer after added\n      }\n      prevmtime = stat.mtime;\n      return this.ht;\n    };\n    return await start();\n  }\n\n  /**\n   * Given a string, this method looks if the '#' character is present.\n   * If true, the line is truncated from that point onwards until the end\n   * of the line; else, the original line is returned unchanged.\n   *\n   * @param  str     The String that is going to be tested for inline comments\n   * @return String  The modified String returned\n   */\n  checkNLPforComments(str) {\n    const str1 = new Array(str.length);\n\n    for (let i = 0; i < str.length; i++) {\n      const current_char = str[i];\n      if (current_char == '#') {\n        if (i != 0) {\n          break; // No need to continue. Return the line\n        } else {\n          // Entire line is a comment\n          return \"\";\n        }\n      } else\n        str1.push(current_char);\n    }\n    return str1.join('');\n  }\n  /**\n    * adds name value pairs from the input buffer into the hash table.\n    * @param {string} ibuf\n    */\n  addNLPListElement(ibuf) {\n    const res = ibuf.split(/\\r?\\n/).filter(element => element);\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].charAt(0) != '(') {\n        res[i] = '(' + res[i] + ')';\n      }\n      const nvp = createNVPair(res[i]);\n      const name = nvp.name;\n      const uname = name.toUpperCase();\n      nvp.name = uname;\n      const unames = uname.split(\",\"); //multiple aliases (alias1, alias2, alias3)\n      for (let i = 0; i < unames.length; i++) {\n        this.ht.set(unames[i], nvp);\n      }\n    }\n  }\n\n\n  toString() {\n    let out = \"\";\n    this.ht.forEach((value) => {\n      out = out + value.toString() + \"\\n\";\n    });\n    return out;\n  }\n  /**\n    * if key is address/port then it returns the port value from the\n    * address NVPAIR.\n    * @param {string} key\n    * @returns {string}\n   */\n  findValueOf(key) {\n    const myarr = key.split('/');\n    return (findValue(this.ht.get(myarr[0].toUpperCase()), myarr));\n  }\n\n}\n\nmodule.exports = {\n  NLParamParser,\n  tnsnamesFilePath\n};\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Packet = require(\"./packet.js\");\nconst NTTCP = require(\"./ntTcp.js\");\nconst SessionAtts = require(\"./sessionAtts.js\");\nconst constants = require(\"./constants.js\");\nconst { createNode } = require('./connStrategy.js');\nconst errors = require(\"../../errors.js\");\nconst { findNVPairRecurse, createNVPair, findValue } = require(\"./nvStrToNvPair.js\");\nconst { Buffer } = require('buffer');\nconst EzConnect = require(\"./ezConnectResolver.js\");\nconst { NLParamParser, tnsnamesFilePath } = require(\"./paramParser.js\");\nconst process = require('process');\nconst downHostInstance = require(\"./connStrategy.js\").SOLE_INST_DHCACHE;\n/**\n *\n * @param {string} userConfig\n * @returns serverinfo\n */\n\nasync function getConnectionInfo(userConfig) {\n  const connStr = await resolveConnectStr(userConfig.connectString, userConfig.configDir);\n  const addressNode = await createNode(connStr);\n  let nvpair;\n  if (typeof connStr === 'string')\n    nvpair = createNVPair(connStr);\n  else\n    nvpair = connStr;//Already a NVPair\n\n  const serverVal = findValue(nvpair, [\"DESCRIPTION\", \"CONNECT_DATA\", \"SERVER\"]);\n  const connClass = findValue(nvpair, [\"DESCRIPTION\", \"CONNECT_DATA\", \"POOL_CONNECTION_CLASS\"]);\n  const svcname =   findValue(nvpair, [\"DESCRIPTION\", \"CONNECT_DATA\", \"SERVICE_NAME\"]);\n  const sid =   findValue(nvpair, [\"DESCRIPTION\", \"CONNECT_DATA\", \"SID\"]);\n  const poolPurity = findValue(nvpair, [\"DESCRIPTION\", \"CONNECT_DATA\", \"POOL_PURITY\"]);\n\n  return [serverVal, connClass, svcname, poolPurity, sid, addressNode];\n}\n\n/**\n * Resolve the connect string to a NV format address\n * @param {String} connStr Connect string\n * @returns AddressNode\n */\nconst nlParamParser =  new NLParamParser;\nasync function resolveConnectStr(connectString, configDir) {\n  const connStr = connectString.trim();\n  let resolvedVal = connStr;\n  if ((connStr.indexOf(')') == -1) || (connStr.indexOf('(') != 0)) {\n    if ((connStr.indexOf(':') != -1) || (connStr.indexOf('/') != -1)) {\n      const ezcnObj = new EzConnect(connStr);\n      resolvedVal = ezcnObj.getResolvedUrl();\n      return resolvedVal;\n    } else {\n      //try tns alias\n      const namesFilePath = tnsnamesFilePath(configDir);\n      const p = await nlParamParser.initializeNlpa(namesFilePath);\n      resolvedVal = p.get(connStr.toUpperCase());\n      if (!resolvedVal)\n        errors.throwErr(errors.ERR_TNS_ENTRY_NOT_FOUND, connStr, configDir ? configDir + '/tnsnames.ora' : process.env.TNS_ADMIN + '/tnsnames.ora');\n      if (resolvedVal.rhsType == 1) {\n        const rString = resolvedVal.atom;\n        if ((rString.indexOf(':') != -1) || (rString.indexOf('/') != -1)) {\n          return new EzConnect(rString).getResolvedUrl();\n        }\n      }\n      resolvedVal = resolvedVal.getListElement(0);\n    }\n\n  }\n  return resolvedVal;\n\n}\n\nasync function resolveAddress(connStr, configDir) {\n  const connstr = await resolveConnectStr(connStr, configDir);\n  return createNode(connstr);\n}\n\n/**\n   * Timeout function\n   * @param {Promise} asyncPromise input promise\n   * @param {int} timeVal timeout value\n   * @returns resolved value of input promise\n   */\nfunction timeout(asyncPromise, timeVal, oper, address, connID) {\n  let timer;\n\n  const timeoutPromise = new Promise((resolve, reject) => {\n    // max possible value for 32-bit integer\n    if (timeVal > 2147483647)\n      timeVal = 2147483647;\n\n    timer = setTimeout(() => reject(errors.getErr(errors.ERR_CONNECTION_TIMEDOUT, address.host, address.port, oper, timeVal / 1000, connID)), timeVal);\n  });\n  return Promise.race([asyncPromise, timeoutPromise]).then((result) => {\n    clearTimeout(timer);\n    return result;\n  }).catch((err) => {\n    clearTimeout(timer);\n    throw err;\n  });\n}\n\n/**\n * Network Session. This will be used for communication with the server.\n * @param {object} userConfig Connection options\n */\nclass NetworkSession {\n\n  constructor() {\n    this.connected = false;\n    this.isBreak = false;\n    this.isReset = false;\n    this.breakPosted = false;\n  }\n\n  async getAddress(addressNode, userConfig) {\n    /* Get the next address */\n    const address = await addressNode.execute(userConfig);\n    /* Prepare connection attributes */\n    const uuid = this.sAtts ? this.sAtts.uuid : null;\n    this.sAtts = new SessionAtts(uuid);\n    this.sAtts.setFrom(userConfig);\n    this.sAtts.setFrom(address.desc.params);  /* Resolve attributes from Connect String */\n    await this.sAtts.prepare(address.protocol);\n\n    /* Insert Connection ID */\n    const rootNVPair = createNVPair(address.CNdata.join(\"\"));\n    const cdataNVPair = findNVPairRecurse(rootNVPair, \"CONNECT_DATA\");\n    const connidStr = `(CONNECTION_ID=${this.sAtts.connectionId})`;\n    const childNVPair = createNVPair(connidStr);\n    cdataNVPair.addListElement(childNVPair);\n\n    this.cData = Buffer.from(rootNVPair.toString(), 'ascii');\n    this.cDataNVPair = rootNVPair;\n    this.sAtts.nt.cDataNVPair = rootNVPair;\n\n    return (address);\n  }\n\n  /**\n   * Make the transport level connection\n   */\n  async transportConnect(address) {\n    if (address.protocol.toUpperCase() == 'TCP' && address.httpsProxy) {\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_PARAMETERS, 'https proxy requires protocol as', 'tcps ');\n    }\n    if (address.protocol && (address.protocol.toUpperCase() == 'TCP' || address.protocol.toUpperCase() == 'TCPS')) {\n      this.ntAdapter = new NTTCP(this.sAtts.nt);\n    } else {\n      errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_PARAMETERS, address.protocol + \" protocol not supported\");\n    }\n    await this.ntAdapter.connect(address);\n    this.ntAdapter.startRead();\n    this.sAtts.ntCha = this.ntAdapter.cha;\n    this.sndDatapkt = new Packet.DataPacket(this.sAtts.largeSDU);\n    this.rcvDatapkt = new Packet.DataPacket(this.sAtts.largeSDU);\n  }\n\n  /**\n   * Send the NSPTCN(connect) packet\n   * @param {object} connectPkt Connect Packet\n   */\n  _sendConnect(connectPkt) {\n    this._sendPacket(connectPkt.buf);\n    if (connectPkt.overflow) {\n      this._send(connectPkt.connectData, 0, connectPkt.connectDataLen);\n      this.flush();\n    }\n  }\n\n  /**\n   * Establish network session .Make transport level connection, send NSPTCN(connect packet) and read the response.\n   * @returns NetError.(connection successfully established(NetError.CONNECTED) or reason for failure)\n   */\n  async connect2(address) {\n    /* Sanitise SDU */\n    if (this.sAtts.sdu) {\n      if (this.sAtts.sdu > constants.NSPABSSDULN) {\n        this.sAtts.sdu = constants.NSPABSSDULN;\n      } else if (this.sAtts.sdu < constants.NSPMNSDULN) {\n        this.sAtts.sdu = constants.NSPMNSDULN;\n      }\n    } else {\n      this.sAtts.sdu = constants.NSPDFSDULN;\n    }\n\n    /* Transport connect */\n    if (this.sAtts.transportConnectTimeout) {\n      const asyncPromise = this.transportConnect(address);\n      await timeout(asyncPromise, this.sAtts.transportConnectTimeout, \"transportConnectTimeout\", address, this.sAtts.connectionId);\n    } else {\n      await this.transportConnect(address);\n    }\n\n    /* Send the connect packet */\n    let connectPkt = new Packet.ConnectPacket(this.cData, this.sAtts);\n    this._sendConnect(connectPkt);\n\n    /* Read the response */\n      while (true) {  // eslint-disable-line\n      const packet = await this._recvPacket();\n      if (packet.type === constants.NSPTAC) /* ACCEPT */\n        break;\n      if (packet.type === constants.NSPTRF) { /* REFUSE */\n        if (this.refusePkt.overflow) {\n          await this._recvPacket();\n          this.refusePkt.dataBuf = this.rcvDatapkt.buf.subarray(this.rcvDatapkt.offset, this.rcvDatapkt.len).toString();\n        }\n        const nvpair = createNVPair(this.refusePkt.dataBuf);\n        this.refusePkt = null;\n        const err = findValue(nvpair, [\"DESCRIPTION\", \"ERR\"]);\n        if (err == \"12514\") {\n          errors.throwErr(errors.ERR_INVALID_SERVICE_NAME, this.getOption(constants.SVCNAME), address.host, address.port, this.sAtts.connectionId);\n        } else if (err == \"12505\") {\n          errors.throwErr(errors.ERR_INVALID_SID, this.getOption(constants.SID), address.host, address.port, this.sAtts.connectionId);\n        } else if (err) {\n          errors.throwErr(errors.ERR_CONNECTION_REFUSED, address.host, address.port, this.sAtts.connectionId, \"ORA-\" + err);\n        } else {\n          errors.throwErr(errors.ERR_CONNECTION_REFUSED, address.host, address.port, this.sAtts.connectionId, \"refused\");\n        }\n      } else if (packet.type === constants.NSPTRS) { /* RESEND */\n        if ((packet.flags & constants.NSPFSRN) == constants.NSPFSRN) {\n          await this.ntAdapter.renegTLS();\n          this.ntAdapter.startRead();\n        }\n        this._sendConnect(connectPkt);\n      } else if (packet.type === constants.NSPTRD) { /* REDIRECT */\n        let adrLen, adrStr, redirConnData;\n\n        /* Read and connect to Redirect address */\n        if (this.redirectPkt.overflow) {\n          await this._recvPacket();\n          this.redirectPkt.dataBuf = this.rcvDatapkt.buf.subarray(this.rcvDatapkt.offset, this.rcvDatapkt.len);\n        }\n\n        if (this.redirectPkt.flags & constants.NSPFRDS) {\n          adrLen = this.redirectPkt.dataBuf.indexOf('\\0', 0, 'ascii');\n          adrStr = this.redirectPkt.dataBuf.toString('ascii', 0, adrLen);\n          redirConnData = this.redirectPkt.dataBuf.subarray(adrLen + 1, this.redirectPkt.dataLen);\n        } else {\n          adrStr = this.redirectPkt.dataBuf.toString('ascii');\n          redirConnData = this.cData;\n        }\n\n        const redirAddressNode = await resolveAddress(adrStr);\n        const host = address.hostname;\n        address = await redirAddressNode.execute();\n        if (address.desc)\n          this.sAtts.setFrom(address.desc.params);  /* Add on attributes from redirect connect String */\n        address.originHost = host;\n        this.redirectPkt = null;\n        this.ntAdapter.disconnect(constants.NSFIMM);\n\n        if (this.sAtts.transportConnectTimeout) {\n          const asyncPromise = this.transportConnect(address);\n          await timeout(asyncPromise, this.sAtts.transportConnectTimeout, \"transportConnectTimeout\", address, this.sAtts.connectionId);\n        } else {\n          await this.transportConnect(address);\n        }\n\n        connectPkt = new Packet.ConnectPacket(redirConnData, this.sAtts, constants.NSPFRDR);\n        this.sndDatapkt = new Packet.DataPacket(this.sAtts.largeSDU);\n        this._sendConnect(connectPkt);\n      }\n    }\n\n    /* Accepted  */\n    this.connected = true;\n    this.cData = null;\n    this.sndDatapkt = new Packet.DataPacket(this.sAtts.largeSDU);\n    this.sndDatapkt.createPacket(constants.NSPDADAT); //Currently only used for disconnect\n    this.sndDatapkt.offset = this.sndDatapkt.dataPtr;\n    this.sndDatapkt.len = this.sndDatapkt.bufLen;\n    this.markerPkt = new Packet.MarkerPacket(this.sAtts.largeSDU);\n    this.controlPkt = new Packet.ControlPacket();\n    this.ntAdapter.largeSDU = this.sAtts.largeSDU;\n    this.sAtts.nt.wallet = null;\n    this.sAtts.nt.walletPassword = null;\n    return (true);\n  }\n\n  /**\n   * Try all available addresses for connection establishment\n   */\n  async connect1(address, addressNode, userConfig) {\n    let connected, savedErr;\n    do {\n      try {\n        if (this.sAtts.connectTimeout) {\n          const asyncPromise = this.connect2(address);\n          connected = await timeout(asyncPromise, this.sAtts.connectTimeout, \"connectTimeout\", address, this.sAtts.connectionId);\n        } else {\n          connected = await this.connect2(address);\n        }\n      } catch (err) {\n        if (err.message.startsWith('NJS-510') && !this.ntAdapter.connected) {\n          downHostInstance.markDownHost(address.host, Date.now()); // mark the host as down\n          this.ntAdapter.connected = true; // Pretend as connected\n        }\n        if (this.ntAdapter) {\n          this.ntAdapter.disconnect(constants.NSFIMM);\n          this.ntAdapter = null;\n        }\n        connected = false;\n        savedErr = err;\n        try {\n          address = await this.getAddress(addressNode, userConfig);\n        } catch (err) {\n          break;\n        }\n      }\n    } while (!connected);\n    if (connected) {\n      return;\n    } else {\n      throw (savedErr);\n    }\n  }\n\n  /**\n   * Process packet (Internal)\n   */\n  _processPacket(packet) {\n    switch (packet.type) {\n      case constants.NSPTDA: /* DATA packet */\n        this.rcvDatapkt.fromPacket(packet);\n        break;\n      case constants.NSPTMK: /* MARKER packet */\n        this.markerPkt.fromPacket(packet, this);\n        break;\n      case constants.NSPTCNL: /* CONTROL packet */\n        this.controlPkt.fromPacket(packet);\n        break;\n      case constants.NSPTAC: /* ACCEPT */\n        Packet.AcceptPacket(packet, this.sAtts);\n        if (this.sAtts.version >= constants.TNS_VERSION_MIN_END_OF_RESPONSE\n          && (packet.flags & constants.TNS_ACCEPT_FLAG_HAS_END_OF_REQUEST)) {\n          this.endOfRequestSupport = true;\n        }\n        if (packet.flags & constants.TNS_ACCEPT_FLAG_FAST_AUTH) {\n          this.supportsFastAuth = true;\n        }\n        break;\n      case constants.NSPTRF: /* REFUSE */\n        this.refusePkt = new Packet.RefusePacket(packet);\n        break;\n      case constants.NSPTRS: /* RESEND */\n        break;\n      case constants.NSPTRD: /* REDIRECT */\n        this.redirectPkt = new Packet.RedirectPacket(packet);\n        break;\n      default:\n        errors.throwErr(errors.ERR_CONNECTION_INVALID_PACKET);\n    }\n  }\n\n  /**\n   * Receive packet (Internal)\n   * Control packets are consumed internally and discarded\n   */\n  async _recvPacket() {\n    while (true) {  // eslint-disable-line\n      const packet = await this.ntAdapter.receive();\n      if (!packet)\n        break;\n      this._processPacket(packet);\n      if (packet.type !== constants.NSPTCNL)\n        return packet;\n    }\n  }\n\n  /**\n   * Send data (Internal)\n   */\n  _sendPacket(buf) {\n    this.ntAdapter.send(buf);\n  }\n\n  /**\n   * Break ongoing operation\n   */\n  sendBreak() {\n    if (this.isBreak)\n      return; /* Already in a break */\n\n    if (!this.connected) {\n      this.isBreak = true; /* Not yet connected. Post the break */\n      this.breakPosted = true;\n      return;\n    }\n\n    this.isBreak = true;\n    this.markerPkt.prepare(constants.NSPMKTD1, constants.NIQIMARK);\n    this._sendPacket(this.markerPkt.buf);\n  }\n\n  /**\n   * Reset the connection\n   */\n  async reset() {\n    /* If posted send Break */\n    if (this.breakPosted) {\n      this.markerPkt.prepare(constants.NSPMKTD1, constants.NIQBMARK);\n      this._sendPacket(this.markerPkt.buf);\n      this.breakPosted = false;\n    }\n    /* Send Reset */\n    this.markerPkt.prepare(constants.NSPMKTD1, constants.NIQRMARK);\n    this._sendPacket(this.markerPkt.buf);\n\n    /* Await Reset */\n    while (!this.isReset) {\n      await this._recvPacket();\n    }\n\n    /* reset packet buffers */\n    this.sndDatapkt.dataPtr = this.sndDatapkt.dataLen = constants.NSPDADAT;\n    this.sndDatapkt.offset = this.sndDatapkt.dataPtr;\n    this.sndDatapkt.len = this.sndDatapkt.bufLen;\n\n    this.isBreak = this.isReset = false;\n  }\n\n  /**\n  * Receive packet\n  */\n  async recvPacket() {\n    return await this._recvPacket();\n  }\n\n  syncRecvPacket() {\n    while (this.ntAdapter.packets.length > 0) {\n      const packet = this.ntAdapter.syncReceive();\n      if (!packet)\n        break;\n      this._processPacket(packet);\n      if (packet.type !== constants.NSPTCNL)\n        return packet;\n    }\n  }\n\n  /**\n   * Send data\n   * @param {Buffer} userBuf User provided buffer\n   * @param {*} offset from which to send data\n   * @param {*} len number of bytes to send\n   */\n  _send(userBuf, offset, len) {\n    if (this.isBreak) {\n      return;\n    }\n    let bytesCopied = 0;\n\n    this.sndDatapkt.dataLen = this.sndDatapkt.offset;\n    if (this.sndDatapkt.dataLen < this.sndDatapkt.bufLen || !this.sndDatapkt.bufLen) {\n      bytesCopied = this.sndDatapkt.fillBuf(userBuf, offset, len);\n      len -= bytesCopied;\n      offset += bytesCopied;\n      this.sndDatapkt.offset = this.sndDatapkt.dataLen;\n    }\n\n    while (len) {\n      this._sendPacket(this.sndDatapkt.dataBuf);\n\n      /* If break throw error now */\n      if (this.isBreak) {\n        return;\n      }\n\n      this.sndDatapkt.dataLen = this.sndDatapkt.dataPtr;\n      this.sndDatapkt.offset = this.sndDatapkt.dataPtr;\n      bytesCopied = this.sndDatapkt.fillBuf(userBuf, offset, len);\n      len -= bytesCopied;\n      offset += bytesCopied;\n      this.sndDatapkt.offset = this.sndDatapkt.dataLen;\n    }\n  }\n\n  /**\n   * Flush send buffers\n   */\n  flush() {\n    if (this.isBreak) {\n      return;\n    }\n    this.sndDatapkt.dataLen = this.sndDatapkt.offset;\n    this.sndDatapkt.prepare2Send();\n    this._sendPacket(Buffer.from(this.sndDatapkt.dataBuf));\n    this.sndDatapkt.dataLen = this.sndDatapkt.dataPtr;\n    this.sndDatapkt.offset = this.sndDatapkt.dataPtr;\n  }\n\n  /**\n   * Establish network connection\n  */\n  async connect(userConfig) {\n    const connStr = userConfig.connectString ? userConfig.connectString : userConfig.connectionString;\n    let addressNode;\n    if (userConfig._connInfo) {\n      addressNode = userConfig._connInfo[5];\n      addressNode.reset();\n    } else {\n      addressNode = await resolveAddress(connStr, userConfig.configDir);\n    }\n    let address;\n    try {\n      address = await this.getAddress(addressNode, userConfig);\n    } catch (err) {\n      if (err.message == \"All options tried\") /* Not even one valid Address */\n        errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_PARAMETERS, \"Ensure the ADDRESS parameters have been entered correctly, the most likely incorrect parameter is the host name\");\n      else\n        errors.throwErr(errors.ERR_INVALID_CONNECT_STRING_PARAMETERS, err.message);\n    }\n    await this.connect1(address, addressNode, userConfig);\n  }\n\n  /**\n   * Force Disconnect the stream, primarily used\n   * to disconnect dead/hung connections.\n   */\n  forceDisconnect(err) {\n    if (!this.connected) {\n      return;\n    }\n    this.ntAdapter.stream.destroy(err);\n    this.connected = false;\n  }\n\n  /**\n   * Disconnect\n   * @param {int} type of disconnect\n   */\n  disconnect(type) {\n    if (!this.connected) {\n      return;\n    }\n    if (type != constants.NSFIMM && !this.ntAdapter.err) {\n      /* Send EOF packet */\n      this.sndDatapkt.dataLen = this.sndDatapkt.offset;\n      this.sndDatapkt.prepare2Send(constants.NSPDAFEOF);\n      this._sendPacket(this.sndDatapkt.dataBuf);\n    }\n    this.ntAdapter.disconnect(type);\n    this.ntAdapter = null;\n    this.connected = false;\n  }\n\n  /**\n   * Get connection attributes\n   * @param {int} opcode type of attribute\n   * @returns attribute value\n   */\n  getOption(opcode) {\n    switch (opcode) {\n\n      case constants.NS_MOREDATA: /* Is there more data in read buffers */\n        return (this.ntAdapter.packets.length > 0);\n\n      case constants.SVCNAME: /* Service name */\n        return findValue(this.cDataNVPair, [\"DESCRIPTION\", \"CONNECT_DATA\", \"SERVICE_NAME\"]);\n\n      case constants.SID: /* Service name */\n        return findValue(this.cDataNVPair, [\"DESCRIPTION\", \"CONNECT_DATA\", \"SID\"]);\n\n      case constants.SERVERTYPE: /* Server type */\n        return findValue(this.cDataNVPair, [\"DESCRIPTION\", \"CONNECT_DATA\", \"SERVER\"]);\n\n      case constants.REMOTEADDR: /* Peer address */\n        if (this.ntAdapter) {\n          return this.ntAdapter.getOption(opcode); // Pass through to NT\n        } else {\n          return null;\n        }\n\n      case constants.CONNCLASS: /* Connection Class */\n        return findValue(this.cDataNVPair, [\"DESCRIPTION\", \"CONNECT_DATA\", \"POOL_CONNECTION_CLASS\"]);\n\n      case constants.PURITY: /* Purity */\n        return findValue(this.cDataNVPair, [\"DESCRIPTION\", \"CONNECT_DATA\", \"POOL_PURITY\"]);\n\n      case constants.HEALTHCHECK: /* Is connection healthy */\n        return (this.connected && this.ntAdapter.connected && !this.ntAdapter.err);\n\n      default:\n        errors.throwErr(errors.ERR_INTERNAL, \"getOption not supported for opcode \" + opcode);\n    }\n  }\n\n  /**\n   * receive inband notification\n   * @param {Object} obj Return the notification into user provided object\n   * @returns Error number sent from server, or error on the connection. returns 0 if healthy connection\n   */\n  recvInbandNotif() {\n    let error = 0;\n    if (this.controlPkt.errno) {     /* Control pkt already read */\n      error = this.controlPkt.errno;\n      return (error);\n    } else if (!this.getOption(constants.HEALTHCHECK)) {\n      return errors.ERR_CONNECTION_CLOSED;\n    } else {\n      if (this.getOption(constants.NS_MOREDATA)) { //More data available\n        const packet = this.ntAdapter.syncReceive();\n\n        if (packet.type == constants.NSPTCNL) {\n          this.controlPkt.fromPacket(packet);\n          error = this.controlPkt.errno;\n          return (error);\n        } else {\n          this.ntAdapter.packets.unshift(packet); /* Push packet back */\n          return (0);\n        }\n      } else\n        return (0);\n    }\n  }\n}\n\nmodule.exports = {\n  NetworkSession,\n  resolveAddress,\n  getConnectionInfo\n};\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require('../constants');\nconst errors = require('../errors');\nconst protoConstants = require('./protocol/constants');\n\n/**\n * It is used to cache the metadata about bind information\n * associated with the statement. This will determine if statement needs\n * to use Execute or Re-Execute.\n */\nclass BindInfo {\n  constructor(name, isReturnBind = false) {\n    this.bindName = name;\n    this.isReturnBind = isReturnBind;\n    this.maxSize = 0;\n    this.numElements = 0;\n    this.maxArraySize = 0;\n    this.type = null;\n    this.isArray = false;\n    this.dir = constants.BIND_IN;\n    this.bindVar = null;\n  }\n}\n\n/**\n * Encapsulates the SQL statement run on the connection.\n * It has information like type of stmt, bind infrmation, cursor number, ...\n */\nmodule.exports.BindInfo = BindInfo;\n\nclass Parser {\n  constructor() {\n    this.returningKeywordFound = false;\n    this.pos = 0;\n    this.maxPos = 0;\n    this.sqlData = \"\";\n  }\n\n  /**\n   * Bind variables are identified as follows:\n   *  - Quoted and non-quoted bind names are allowed.\n   *  - Quoted bind names can contain any characters.\n   *  - Non-quoted bind names must begin with an alphabetic character.\n   *  - Non-quoted bind names can only contain alphanumeric characters, the\n   *    underscore, the dollar sign and the pound sign.\n   *  - Non-quoted bind names cannot be Oracle Database Reserved Names (this\n   *    is left to the server to detect and return an appropriate error).\n   */\n  _parseBindName(stmt) {\n    let quotedName = false;\n    let inBind = false;\n    let digitsOnly = false;\n    let startPos = 0;\n    let pos = this.pos + 1;\n    let bindName;\n    let ch;\n\n    while (pos <= this.maxPos) {\n      ch = this.sqlData[pos];\n      if (!inBind) {\n        if (/\\p{space}/u.test(ch)) {\n          pos += 1;\n          continue;\n        } else if (ch === '\"') {\n          quotedName = true;\n        } else if (/\\p{N}/u.test(ch)) {\n          digitsOnly = true;\n        } else if (!/\\p{Alpha}/u.test(ch)) {\n          break;\n        }\n        inBind = true;\n        startPos = pos;\n      } else if (digitsOnly && !(/\\p{N}/u.test(ch))) {\n        this.pos = pos - 1;\n        break;\n      } else if (quotedName && ch === '\"') {\n        this.pos = pos;\n        break;\n      } else if (!digitsOnly && !quotedName\n          && !(/[\\p{L}\\p{N}]/u.test(ch))\n          && !['$', '_', '#'].includes(ch)) {\n        this.pos = pos - 1;\n        break;\n      }\n      pos += 1;\n    }\n\n    if (inBind) {\n      if (quotedName) {\n        bindName = stmt.sql.substring(startPos + 1, pos);\n      } else if (digitsOnly) {\n        bindName = stmt.sql.substring(startPos, pos);\n      } else {\n        bindName = stmt.sql.substring(startPos, pos).toUpperCase();\n      }\n      stmt._addBind(bindName);\n    }\n  }\n\n  /**\n   * Multiple line comments consist of the characters /* followed by all\n   * characters up until * followed by /. This method is called when the first\n   * slash is detected and checks for the subsequent asterisk. If found,\n   * the comment is traversed and the current position is updated; otherwise,\n   * the current position is left untouched.\n   */\n  _parseMultiLineComment() {\n    let inComment = false;\n    let exitingComment = false;\n    let pos = this.pos + 1;\n    let ch;\n    while (pos <= this.maxPos) {\n      ch = this.sqlData[pos];\n      if (!inComment) {\n        if (ch !== '*') {\n          break;\n        }\n        inComment = true;\n      } else if (ch === '*') {\n        exitingComment = true;\n      } else if (exitingComment) {\n        if (ch === '/') {\n          this.pos = pos;\n          break;\n        }\n        exitingComment = false;\n      }\n      pos += 1;\n    }\n  }\n\n  /** Parses a q-string which consists of the characters \"q\" and a single\n   * quote followed by a start separator, any text that does not contain the\n   * end seprator and the end separator and ending quote. The following are\n   * examples that demonstrate this:\n   *   - q'[...]'\n   *   - q'{...}'\n   *   - q'<...>'\n   *   - q'(...)'\n   *   - q'?...?' (where ? is any character)\n   */\n  _parseQstring() {\n    let exitingQstring = false;\n    let inQstring = false;\n    let sep;\n    let ch;\n\n    this.pos += 1;\n\n    while (this.pos <= this.maxPos) {\n      ch = this.sqlData[this.pos];\n      if (!inQstring) {\n        if (ch === '[') {\n          sep = ']';\n        } else if (ch === '{') {\n          sep = '}';\n        } else if (ch === '(') {\n          sep = ')';\n        } else if (ch === '<') {\n          sep = '>';\n        } else {\n          sep = ch;\n        }\n        inQstring = true;\n      } else if (!exitingQstring && ch === sep) {\n        exitingQstring = true;\n      } else if (exitingQstring) {\n        if (ch === \"'\") {\n          break;\n        } else if (ch !== sep) {\n          exitingQstring = false;\n        }\n      }\n      this.pos += 1;\n    }\n  }\n\n  /**\n   * Parses a quoted string with the given separator. All characters until\n   * the separate is detected are discarded.\n   */\n  _parseQuotedString(sep) {\n    let ch;\n    this.pos += 1;\n    while (this.pos <= this.maxPos) {\n      ch = this.sqlData[this.pos];\n      if (ch === sep) {\n        break;\n      }\n      this.pos += 1;\n    }\n  }\n\n  /**\n   * Single line comments consist of two dashes and all characters up to the\n   * next line break (or the end of the data). This method is called when\n   * the first dash is detected and checks for the subsequent dash. If found,\n   * the single line comment is traversed and the current position is updated;\n   * otherwise, the current position is left untouched.\n   */\n  _parseSingleLineComment() {\n    let inComment = false;\n    let pos = this.pos + 1;\n    let ch;\n\n    while (pos <= this.maxPos) {\n      ch = this.sqlData[pos];\n      if (!inComment) {\n        if (ch !== '-') {\n          return;\n        }\n        inComment = true;\n      } else if (ch === '\\n') {\n        break;\n      }\n      pos += 1;\n    }\n    this.pos = pos;\n  }\n\n  /**\n   * Parses the SQL stored in the statement in order to determine the\n   * keyword that identifies the type of SQL being executed as well as a\n   * list of bind variable names. A check is also made for DML returning\n   * statements since the bind variables following the \"INTO\" keyword are\n   * treated differently from other bind variables.\n   */\n  parse(stmt) {\n    let initialKeywordFound = false;\n    let lastWasString = false;\n    let ch, lastCh = '', alphaStartCh = '';\n    let alphaStartPos = 0, alphaLen;\n    let isAlpha, lastWasAlpha = false;\n    let keyword;\n\n    // initialization\n    this.pos = 0;\n    this.maxPos = stmt.sql.length - 1;\n    this.sqlData = stmt.sql;\n\n    // scan all the characters in the string\n    while (this.pos <= this.maxPos) {\n      ch = this.sqlData[this.pos];\n      // look for certain keywords (initial keyword and the ones for\n      // detecting DML returning statements\n      isAlpha = /\\p{L}/u.test(ch);\n      if (isAlpha && !lastWasAlpha) {\n        alphaStartPos = this.pos;\n        alphaStartCh = ch;\n      } else if (!isAlpha && lastWasAlpha) {\n        alphaLen = this.pos - alphaStartPos;\n        if (!initialKeywordFound) {\n          keyword = stmt.sql.substring(alphaStartPos, this.pos).toUpperCase();\n          stmt._determineStatementType(keyword);\n          initialKeywordFound = true;\n          if (stmt.isDdl) {\n            break;\n          }\n        } else if (stmt.isDml && !this.returningKeywordFound\n            && (alphaLen === 9 || alphaLen === 6)\n            && ['r', 'R'].includes(alphaStartCh)) {\n          keyword = stmt.sql.substring(alphaStartPos, this.pos).toUpperCase();\n          if (['RETURNING', 'RETURN'].includes(keyword)) {\n            this.returningKeywordFound = true;\n          }\n        } else if (this.returningKeywordFound && alphaLen === 4\n            && ['i', 'I'].includes(alphaStartCh)) {\n          keyword = stmt.sql.substring(alphaStartPos, this.pos).toUpperCase();\n          if (keyword === 'INTO') {\n            stmt.isReturning = true;\n          }\n        }\n      }\n\n      // need to keep track of whether the last token parsed was a string\n      // (excluding whitespace) as if the last token parsed was a string\n      // a following colon is not a bind variable but a part of the JSON\n      // constant syntax\n      if (ch === \"'\") {\n        lastWasString = true;\n        if (['q', 'Q'].includes(lastCh)) {\n          this._parseQstring();\n        } else {\n          this._parseQuotedString(ch);\n        }\n      } else if (!(/\\p{space}/u.test(ch))) {\n        if (ch === '-') {\n          this._parseSingleLineComment();\n        } else if (ch === '/') {\n          this._parseMultiLineComment();\n        } else if (ch === '\"') {\n          this._parseQuotedString(ch);\n        } else if (ch === ':' && !lastWasString) {\n          this._parseBindName(stmt);\n        }\n        lastWasString = false;\n      }\n\n      this.pos += 1;\n      lastWasAlpha = isAlpha;\n      lastCh = ch;\n    }\n\n    // if only a single word is found in sql, e.g. in case of commit/rollback\n    if (!initialKeywordFound) {\n      stmt._determineStatementType(stmt.sql.toUpperCase());\n    }\n  }\n}\n\nclass Statement {\n  constructor() {\n    this.sql = \"\";\n    this.sqlBytes = [];\n    this.sqlLength = 0;\n    this.cursorId = 0;\n    this.requiresDefine = false;\n    this.isQuery = false;\n    this.isPlSql = false;\n    this.isDml = false;\n    this.isDdl = false;\n    this.isReturning = false;\n    this.bindInfoList = [];\n    this.queryVars = [];\n    this.bindInfoDict = new Map();\n    this.requiresFullExecute = false;\n    this.noPrefetch = false;\n    this.returnToCache = false;\n    this.numColumns = 0;\n    this.lastRowIndex;\n    this.lastRowid;\n    this.moreRowsToFetch = true;\n    this.inUse = false;\n    this.bufferRowIndex = 0;\n    this.bufferRowCount = 0;\n    this.pendingClear = false;\n    this.statementType = constants.STMT_TYPE_UNKNOWN;\n  }\n\n  //---------------------------------------------------------------------------\n  // _copy()\n  //\n  // Copying existing statement into new statement object required by drcp\n  //---------------------------------------------------------------------------\n  _copy() {\n    const copiedStatement = new Statement();\n    copiedStatement.sql = this.sql;\n    copiedStatement.sqlBytes = this.sqlBytes;\n    copiedStatement.sqlLength = this.sqlLength;\n    copiedStatement.isQuery = this.isQuery;\n    copiedStatement.isPlSql = this.isPlSql;\n    copiedStatement.isDml = this.isDml;\n    copiedStatement.isDdl = this.isDdl;\n    copiedStatement.isReturning = this.isReturning;\n    copiedStatement.bindInfoList = [];\n    for (const bindInfo of this.bindInfoList) {\n      const newBindInfo = new BindInfo(bindInfo.bindName, bindInfo.isReturnBind);\n      copiedStatement.bindInfoList.push(newBindInfo);\n    }\n    const bindInfoDict = copiedStatement.bindInfoDict = new Map();\n    for (const bindInfo of copiedStatement.bindInfoList) {\n      if (bindInfoDict.has(bindInfo.bindName)) {\n        bindInfoDict.get(bindInfo.bindName).push(bindInfo);\n      } else {\n        bindInfoDict.set(bindInfo.bindName, [bindInfo]);\n      }\n    }\n    copiedStatement.returnToCache = false;\n    return copiedStatement;\n  }\n\n  //---------------------------------------------------------------------------\n  // _determineStatementType(sql)\n  //\n  // Determine the type of the SQL statement by examining the first keyword\n  // found in the statement\n  //---------------------------------------------------------------------------\n  _determineStatementType(sqlKeyword) {\n    switch (sqlKeyword) {\n      case 'DECLARE':\n        this.isPlSql = true;\n        this.statementType = constants.STMT_TYPE_DECLARE;\n        break;\n      case 'CALL':\n        this.isPlSql = true;\n        this.statementType = constants.STMT_TYPE_CALL;\n        break;\n      case 'BEGIN':\n        this.isPlSql = true;\n        this.statementType = constants.STMT_TYPE_BEGIN;\n        break;\n      case 'SELECT':\n        this.isQuery = true;\n        this.statementType = constants.STMT_TYPE_SELECT;\n        break;\n      case 'WITH':\n        this.isQuery = true;\n        break;\n      case 'INSERT':\n        this.isDml = true;\n        this.statementType = constants.STMT_TYPE_INSERT;\n        break;\n      case 'UPDATE':\n        this.isDml = true;\n        this.statementType = constants.STMT_TYPE_UPDATE;\n        break;\n      case 'DELETE':\n        this.isDml = true;\n        this.statementType = constants.STMT_TYPE_DELETE;\n        break;\n      case 'MERGE':\n        this.isDml = true;\n        this.statementType = constants.STMT_TYPE_MERGE;\n        break;\n      case 'ALTER':\n        this.isDdl = true;\n        this.statementType = constants.STMT_TYPE_ALTER;\n        break;\n      case 'CREATE':\n        this.isDdl = true;\n        this.statementType = constants.STMT_TYPE_CREATE;\n        break;\n      case 'DROP':\n        this.isDdl = true;\n        this.statementType = constants.STMT_TYPE_DROP;\n        break;\n      case 'ANALYZE':\n      case 'AUDIT':\n      case 'COMMENT':\n      case 'GRANT':\n      case 'REVOKE':\n      case 'TRUNCATE':\n        this.isDdl = true;\n        break;\n      case 'COMMIT':\n        this.statementType = constants.STMT_TYPE_COMMIT;\n        break;\n      case 'ROLLBACK':\n        this.statementType = constants.STMT_TYPE_ROLLBACK;\n        break;\n      default:\n        this.statementType = constants.STMT_TYPE_UNKNOWN;\n        break;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // prepare(sql)\n  //\n  // Prepare the SQL for execution by determining the list of bind names\n  // that are found within it. The length of the SQL text is also calculated\n  // at this time.\n  //---------------------------------------------------------------------------\n  _prepare(sql) {\n    this.sql = sql;\n    this.sqlBytes = Buffer.from(this.sql, 'utf8');\n    this.sqlLength = this.sqlBytes.length;\n    const parser = new Parser();\n    parser.parse(this);\n  }\n\n  //---------------------------------------------------------------------------\n  // _addBinds(sql)\n  //\n  // Add bind information to the statement by examining the passed SQL for\n  // bind variable names.\n  //---------------------------------------------------------------------------\n  _addBind(name) {\n    if (!this.isPlSql || !this.bindInfoDict.has(name)) {\n      const info = new BindInfo(name, this.isReturning);\n      this.bindInfoList.push(info);\n      if (this.bindInfoDict.has(info.bindName)) {\n        if (this.isReturning) {\n          const origInfo = this.bindInfoDict.get(info.bindName)[0];\n          if (!origInfo.isReturnBind) {\n            errors.throwErr(errors.ERR_DML_RETURNING_DUP_BINDS, name);\n          }\n        }\n        this.bindInfoDict.get(info.bindName).push(info);\n      } else {\n        this.bindInfoDict.set(info.bindName, [info]);\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _setVariable(sql)\n  //\n  // Set the variable on the bind information and copy across metadata that\n  // will be used for binding. If the bind metadata has changed, mark the\n  // statement as requiring a full execute. In addition, binding a REF\n  // cursor also requires a full execute.\n  //---------------------------------------------------------------------------\n  _setVariable(bindInfo, variable) {\n    if (variable.type._oraTypeNum === protoConstants.TNS_DATA_TYPE_CURSOR) {\n      this.requiresFullExecute = true;\n    }\n    if (variable.maxSize !== bindInfo.maxSize\n        || variable.dir !== bindInfo.dir\n        || variable.isArray !== bindInfo.isArray\n        || variable.values.length > bindInfo.numElements\n        || variable.type != bindInfo.type\n        || variable.maxArraySize != bindInfo.maxArraySize) {\n      bindInfo.isArray = variable.isArray;\n      bindInfo.numElements = variable.values.length;\n      bindInfo.maxSize = variable.maxSize;\n      bindInfo.type = variable.type;\n      bindInfo.dir = variable.dir;\n      bindInfo.maxArraySize = variable.maxArraySize;\n      this.requiresFullExecute = true;\n    }\n\n    bindInfo.bindVar = variable;\n  }\n\n  //---------------------------------------------------------------------------\n  // _clearAllState\n  //\n  // clear all state associated with the cursor\n  //---------------------------------------------------------------------------\n  _clearAllState() {\n    this.cursorId = 0;\n    this.requiresDefine = false;\n    this.noPrefetch = false;\n    this.requiresFullExecute = false;\n    this.queryVars = [];\n    this.numQueryVars = 0;\n    this.bufferRowCount = 0;\n    this.bufferRowIndex = 0;\n  }\n\n  //---------------------------------------------------------------------------\n  // _clearState\n  //\n  // clear some state associated with the cursor\n  //---------------------------------------------------------------------------\n  _clearState() {\n    this.cursorId = 0;\n    this.requiresDefine = false;\n    this.noPrefetch = false;\n    this.requiresFullExecute = false;\n  }\n}\n\nmodule.exports.Statement = Statement;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst crypto = require('crypto');\n\nlet algorithm = 'aes-256-cbc';\nconst _appendBuffer = Buffer.from([0x00, 0x01]);\n\n/**\n * A single Instance which handles all Encrypt, Decrypt,\n * hash related to password verifiers.\n */\nclass EncryptDecrypt {\n\n  // Key length is dependent on the algorithm. In this case for aes192, it is\n  // 24 bytes (192 bits).\n  _decrypt(key, val) {\n    const iv = Buffer.alloc(16, 0); // Initialization vector, same is used in server\n    const decipher = crypto.createDecipheriv(algorithm, key, iv);\n    decipher.setAutoPadding(false);\n    let decrypted = decipher.update(val);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    return decrypted;\n  }\n\n  _encrypt(key, val, padding) {\n    const block_size = 16;\n    const iv = Buffer.alloc(block_size, 0);\n    const n = block_size - (val.length % block_size);\n    const nv = Buffer.alloc(n, n);\n    if (n > 0) {\n      if (padding) {\n        val += Buffer.alloc(n);\n      } else {\n        val = Buffer.concat([val, nv]);\n      }\n    }\n    const cipher = crypto.createCipheriv(algorithm, key, iv);\n    let encrypted = cipher.update(val);\n    encrypted = Buffer.concat([encrypted, cipher.final()]);\n    if (!padding) {\n      encrypted = encrypted.slice(0, val.length);\n    }\n    val.fill(0);\n    return encrypted;\n  }\n\n  // Encrypt password and newPassword using comboKey\n  _setEncryptedPasswordBuffers(passwordBytes, newPasswordBytes, comboKey, authObj) {\n    const salt = Buffer.alloc(16);\n    crypto.randomFillSync(salt, 0, 16);\n    const temp = Buffer.concat([salt, passwordBytes]);\n    authObj.encodedPassword = this._encrypt(comboKey, temp);\n    temp.fill(0);\n    authObj.encodedPassword = authObj.encodedPassword.slice().toString('hex').toUpperCase();\n\n    if (newPasswordBytes) {\n      const newPasswordWithSalt = Buffer.concat([salt, newPasswordBytes]);\n      authObj.encodedNewPassword = this._encrypt(comboKey, newPasswordWithSalt);\n      newPasswordWithSalt.fill(0);\n      authObj.encodedNewPassword = authObj.encodedNewPassword.slice().toString('hex').toUpperCase();\n    }\n\n    // reset Buffers\n    passwordBytes.fill(0);\n    if (newPasswordBytes) {\n      newPasswordBytes.fill(0);\n    }\n  }\n\n  /**\n   * updates authObject with required data.\n   *\n   * @param {object} sessionData The key/value pairs returned from OSESS key rpc\n   * @param {string} password    Current Password of user\n   * @param {string} newPassword New password to be updated\n   * @param {boolean} verifier11G Verifier type 11g or not(12c)\n   */\n  updateVerifierData(sessionData, password, newPassword, verifier11G, authObj) {\n    let keyLen = 32;\n    let hashAlg = 'sha512';\n\n    const verifierData = Buffer.from(sessionData['AUTH_VFR_DATA'], 'hex');\n    const encodedServerKey = Buffer.from(sessionData['AUTH_SESSKEY'], 'hex');\n    let iterations = Number(sessionData['AUTH_PBKDF2_VGEN_COUNT']);\n    const passwordBytes = Buffer.from(password, 'utf8');\n    let passwordHash;\n    let passwordKey;\n\n    if (verifier11G) {\n      algorithm = 'aes-192-cbc';\n      keyLen = 24;\n      hashAlg = 'sha1';\n      const h = crypto.createHash(hashAlg);\n      h.update(passwordBytes);\n      h.update(verifierData);\n      const ph = h.digest();\n      passwordHash = Buffer.alloc(ph.length + 4);\n      ph.copy(passwordHash, 0, 0, ph.length);\n    } else {\n      algorithm = 'aes-256-cbc';\n      const temp = Buffer.from('AUTH_PBKDF2_SPEEDY_KEY', 'utf8');\n      const salt = Buffer.concat([verifierData, temp]);\n      passwordKey = crypto.pbkdf2Sync(passwordBytes, salt, iterations, 64, 'sha512');\n      const h = crypto.createHash(hashAlg);\n      h.update(passwordKey);\n      h.update(verifierData);\n      passwordHash = h.digest().slice(0, keyLen);\n    }\n\n    let newPasswordBytes;\n    if (newPassword) {\n      newPasswordBytes = Buffer.from(newPassword, 'utf8');\n    }\n    const sessionKeyParta = this._decrypt(passwordHash, encodedServerKey);\n    const sessionKeyPartb = Buffer.alloc(sessionKeyParta.length);\n    crypto.randomFillSync(sessionKeyPartb);\n    const encodedClientKey = this._encrypt(passwordHash, sessionKeyPartb);\n\n    if (sessionKeyParta.length === 48) {\n      authObj.sessionKey = encodedClientKey.slice().toString('hex').toUpperCase().slice(0, 96);\n      const buf = Buffer.alloc(24);\n      for (let i = 16; i <= 40; i++) {\n        buf[i - 16] = sessionKeyParta[i] ^ sessionKeyPartb[i];\n      }\n      const part1 = crypto.createHash(\"md5\").update(buf.subarray(0, 16)).digest();\n      const part2 = crypto.createHash(\"md5\").update(buf.subarray(16)).digest();\n      authObj.comboKey = Buffer.concat([part1, part2]).slice(0, keyLen);\n    } else {\n      authObj.sessionKey = encodedClientKey.slice().toString('hex').toUpperCase().slice(0, 64);\n      const mixingSalt = Buffer.from(sessionData['AUTH_PBKDF2_CSK_SALT'], 'hex');\n      iterations = Number(sessionData['AUTH_PBKDF2_SDER_COUNT']);\n      const partABKey = Buffer.concat([sessionKeyPartb.slice(0, keyLen), sessionKeyParta.slice(0, keyLen)]);\n      const partABKeyStr = partABKey.toString('hex').toUpperCase();\n      const partABKeyBuffer = Buffer.from(partABKeyStr, 'utf8');\n      authObj.comboKey = crypto.pbkdf2Sync(partABKeyBuffer, mixingSalt,\n        iterations, keyLen, 'sha512');\n    }\n\n    const salt = Buffer.alloc(16);\n    if (!verifier11G) {\n      crypto.randomFillSync(salt, 0, 16);\n      const temp = Buffer.concat([salt, passwordKey]);\n      authObj.speedyKey = this._encrypt(authObj.comboKey, temp);\n      authObj.speedyKey = authObj.speedyKey.slice(0, 80).toString('hex').toUpperCase();\n    }\n    this._setEncryptedPasswordBuffers(passwordBytes, newPasswordBytes, authObj.comboKey, authObj);\n  }\n\n  getEncryptedJSWPData(sessionKey, jdwpData) {\n    let buf = this._encrypt(sessionKey, jdwpData, true);\n\n    // Add a \"01\" at the end of the hex encrypted data to indicate the\n    // use of AES encryption\n    buf = buf.slice().toString('hex').toUpperCase();\n    buf = Buffer.concat([buf, _appendBuffer]);\n    return buf;\n  }\n\n  updatePasswordsWithComboKey(password, newPassword, comboKey, authObj) {\n    const passwordBytes = Buffer.from(password, 'utf8');\n    let newPasswordBytes;\n    if (newPassword) {\n      newPasswordBytes = Buffer.from(newPassword, 'utf8');\n    }\n    this._setEncryptedPasswordBuffers(passwordBytes, newPasswordBytes, comboKey, authObj);\n  }\n}\n\nconst encryptDecryptInst = new EncryptDecrypt();\nmodule.exports = encryptDecryptInst;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst constants = require(\"../constants.js\");\nconst errors = require(\"../../../errors.js\");\nconst process = require(\"process\");\nconst ED = require(\"../encryptDecrypt.js\");\nconst Message = require(\"./base.js\");\nconst util = require(\"../../util.js\");\nconst cInfo = util.CLIENT_INFO;\nconst crypto = require('crypto');\n\n/**\n * Executes OSESSKEY and OAUTH RPC functions\n *\n * @class AuthMessage\n * @extends {Message}\n */\nclass AuthMessage extends Message {\n  /**\n   * Represents the data required for OAUTH and OSESSKEY rpc.\n   *\n   * @param {object} conn Connection object\n   * @param {object} config Dynamic Configuration like change password config after connection is established\n   */\n  constructor(conn, config) {\n    super(conn);\n    this.functionCode = constants.TNS_FUNC_AUTH_PHASE_ONE;\n    this.messageType = constants.TNS_MSG_TYPE_FUNCTION;\n    this.sessionData = {};\n    this.conn = conn;\n    this.sessionKey = \"\";\n    this.encodedPassword = \"\";\n    this.changePassword = false;\n    Object.defineProperty(this, 'password', {\n      enumerable: false,\n      value: config.password,\n    });\n    this.username = config.user;\n    if (this.username === undefined) {\n      this.username = \"\";\n    } else {\n      // trim leading and trailing spaces\n      this.username = this.username.trim();\n    }\n    this.schemaUser = '';\n    this.proxyUser = '';\n    this.proxyStatus = -1;\n    if (this.username.length !== 0) {\n      this.proxyStatusObj = util.checkProxyUserValidity(this.username);\n      if (this.proxyStatusObj.status === 0) {\n        this.proxyStatus = 0;\n        this.proxyUser = this.proxyStatusObj.proxyUser;\n        this.schemaUser = this.proxyStatusObj.schemaUser;\n        this.username = this.proxyUser;\n      }\n    }\n    this.newPassword = config.newPassword;\n    if (config.changePassword) {\n      // ChangePassword issued after login would use the same comboKey\n      // used in initial Login. We issue only OAUTH.\n      this.changePassword = true;\n      this.functionCode = constants.TNS_FUNC_AUTH_PHASE_TWO;\n    }\n    if (this.username) {\n      this.userByteLen = Buffer.byteLength(this.username); // Get utf8 encoded number of bytes\n    } else {\n      this.userByteLen = 0;\n    }\n    this.token = config.token;\n    if (this.token)\n      this.functionCode = constants.TNS_FUNC_AUTH_PHASE_TWO;\n    this.privateKey = config.privateKey;\n    if (this.privateKey) {\n      this.privateKey = util.normalizePrivateKey(this.privateKey);\n    }\n    this.serviceName = this.conn.serviceName;\n    this.remoteAddress = this.conn.remoteAddress;\n    this.setAuthMode(config);\n  }\n\n  setAuthMode(config) {\n    if (!this.newPassword) {\n      this.authMode = constants.TNS_AUTH_MODE_LOGON;\n    }\n    if (config.privilege & constants.SYSDBA) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSDBA;\n    }\n    if (config.privilege & constants.SYSOPER) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSOPER;\n    }\n    if (config.privilege & constants.SYSASM) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSASM;\n    }\n    if (config.privilege & constants.SYSBKP) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSBKP;\n    }\n    if (config.privilege & constants.SYSDG) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSDGD;\n    }\n    if (config.privilege & constants.SYSKM) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSKMT;\n    }\n    if (config.privilege & constants.SYSRAC) {\n      this.authMode |= constants.TNS_AUTH_MODE_SYSRAC;\n    }\n    if (this.privateKey) {\n      this.authMode |= constants.TNS_AUTH_MODE_IAM_TOKEN;\n    }\n    if (this.newPassword) {\n      this.authMode |= constants.TNS_AUTH_MODE_CHANGE_PASSWORD;\n    }\n    if (!this.token) {\n      this.authMode |= constants.TNS_AUTH_MODE_WITH_PASSWORD;\n    }\n  }\n\n  getAlterTimezoneStatement() {\n    let sign, tzRepr;\n    if (process.env.ORA_SDTZ) {\n      tzRepr = process.env.ORA_SDTZ;\n    } else {\n      const date = new Date();\n      const timezoneMinutes = date.getTimezoneOffset();\n      let tzHour = Math.trunc(timezoneMinutes / 60);\n      const tzMinutes = Math.abs((timezoneMinutes - tzHour * 60) % 60);\n      if (tzHour < 0) {\n        sign = '+';  // getTimezoneOffset() = localtime - timeUTC\n        tzHour = -tzHour;\n      } else {\n        sign = '-';\n      }\n      tzHour = tzHour.toLocaleString('en-US', {minimumIntegerDigits: 2});\n      tzRepr = `${sign}${tzHour}:${tzMinutes}`;\n    }\n    return `ALTER SESSION SET TIME_ZONE ='${tzRepr}'\\x00`;\n  }\n\n  encode(buf) {\n    let verifier11G = false;\n    this.writeFunctionHeader(buf);\n    if (this.userByteLen > 0) {\n      buf.writeUInt8(1);\n    } else {\n      buf.writeUInt8(0);\n    }\n    buf.writeUB4(this.userByteLen);\n    buf.writeUB4(this.authMode);\n\n    if (this.functionCode === constants.TNS_FUNC_AUTH_PHASE_ONE) {\n      buf.writeUInt8(1);\n      buf.writeUB4(5);\n      buf.writeUInt8(0);\n      buf.writeUInt8(1);\n      if (this.userByteLen > 0) {\n        buf.writeBytesWithLength(Buffer.from(this.username));\n      }\n      buf.writeKeyValue(\"AUTH_TERMINAL\", cInfo.terminal);\n      buf.writeKeyValue(\"AUTH_PROGRAM_NM\", cInfo.program);\n      buf.writeKeyValue(\"AUTH_MACHINE\", cInfo.hostName);\n      buf.writeKeyValue(\"AUTH_PID\", cInfo.pid);\n      buf.writeKeyValue(\"AUTH_SID\", cInfo.userName);\n    } else {\n      let numPairs = 0;\n\n      if (this.changePassword) {\n        ED.updatePasswordsWithComboKey(this.password, this.newPassword, this.conn.comboKey, this);\n        numPairs = 2;\n      } else {\n        numPairs = 4;\n        if (this.token) {\n          numPairs += 1;\n        } else {\n          numPairs += 2;\n          if (this.verifierType === constants.TNS_VERIFIER_TYPE_11G_1 ||\n          this.verifierType === constants.TNS_VERIFIER_TYPE_11G_2) {\n            verifier11G = true;\n          } else if (this.verifierType !== constants.TNS_VERIFIER_TYPE_12C) {\n            errors.throwErr(errors.ERR_UNSUPPORTED_VERIFIER_TYPE,\n              this.verifierType.toString(16));\n          } else {\n            numPairs += 1;\n          }\n          ED.updateVerifierData(this.sessionData, this.password, this.newPassword, verifier11G, this);\n\n          // The comboKey is cached inside the conn which is used\n          // for changePassword issued on the connection\n          this.conn.comboKey = this.comboKey;\n          if (this.newPassword) {\n            numPairs += 1;\n          }\n        }\n\n        if (this.privateKey) {\n          numPairs += 2;\n        }\n        if (this.conn.connectionClass) {\n          numPairs += 1;\n        }\n        if (this.conn.purity) {\n          numPairs += 1;\n        }\n        if (this.conn.jdwpData) {\n          this.encryptedJDWPData = ED.getEncryptedJSWPData(this.sessionKey, this.conn.jdwpData);\n          numPairs += 1;\n        }\n        if (this.schemaUser.length !== 0) {\n          numPairs += 1;\n        }\n      }\n\n      buf.writeUInt8(1);\n      buf.writeUB4(numPairs);\n      buf.writeUInt8(1);\n      buf.writeUInt8(1);\n      if (this.userByteLen > 0)\n        buf.writeBytesWithLength(Buffer.from(this.username));\n      if (this.token) {\n        buf.writeKeyValue(\"AUTH_TOKEN\", this.token);\n      } else {\n        if (!this.changePassword) {\n          buf.writeKeyValue(\"AUTH_SESSKEY\", this.sessionKey, 1);\n          if (!verifier11G) {\n            buf.writeKeyValue(\"AUTH_PBKDF2_SPEEDY_KEY\", this.speedyKey);\n          }\n        }\n      }\n      if (!this.changePassword) {\n        buf.writeKeyValue(\"SESSION_CLIENT_CHARSET\", \"873\");\n        buf.writeKeyValue(\"SESSION_CLIENT_DRIVER_NAME\", constants.DRIVER_NAME);\n        buf.writeKeyValue(\"SESSION_CLIENT_VERSION\",\n          constants.CLIENT_VERSION.toString());\n        buf.writeKeyValue(\"AUTH_ALTER_SESSION\", this.getAlterTimezoneStatement(), 1);\n      }\n      if (this.encodedPassword) {\n        buf.writeKeyValue(\"AUTH_PASSWORD\", this.encodedPassword);\n      }\n      if (this.proxyStatus === 0) {\n        buf.writeKeyValue(\"PROXY_CLIENT_NAME\", this.schemaUser);\n      }\n      if (this.encodedNewPassword) {\n        buf.writeKeyValue(\"AUTH_NEWPASSWORD\", this.encodedNewPassword);\n      }\n      if (this.conn.connectionClass) {\n        buf.writeKeyValue(\"AUTH_KPPL_CONN_CLASS\", this.conn.connectionClass);\n      }\n      if (this.conn.purity) {\n        buf.writeKeyValue(\"AUTH_KPPL_PURITY\", '' + this.conn.purity);\n      }\n      if (this.privateKey) {\n        const currentDate = new Date();\n        const currentDateFormatted = currentDate.toGMTString();\n\n        const header = \"date: \" + currentDateFormatted + \"\\n\" +\n          \"(request-target): \" + this.serviceName  + \"\\n\" +\n          \"host: \" + this.remoteAddress;\n\n        const signature = crypto.createSign('RSA-SHA256')\n          .update(header)\n          .sign(this.privateKey, 'base64');\n\n        buf.writeKeyValue(\"AUTH_HEADER\", header);\n        buf.writeKeyValue(\"AUTH_SIGNATURE\", signature);\n      }\n      if (this.conn.jdwpData) {\n        buf.writeKeyValue(\"AUTH_ORA_DEBUG_JDWP\", this.encryptedJDWPData);\n      }\n\n    }\n  }\n\n  processReturnParameter(buf) {\n    const numParams = buf.readUB2();\n    for (let i = 0; i < numParams;i++) {\n      buf.skipUB4();\n      const key = buf.readStr(constants.CSFRM_IMPLICIT);\n      let value = \"\";\n      const numBytes = buf.readUB4();\n      if (numBytes > 0) {\n        value = buf.readStr(constants.CSFRM_IMPLICIT);\n      }\n      const flag = buf.readUB4();\n      if (key === \"AUTH_VFR_DATA\") {\n        this.verifierType = flag;\n      }\n      this.sessionData[key] = value;\n\n    }\n    if (this.functionCode === constants.TNS_FUNC_AUTH_PHASE_ONE) {\n      this.functionCode = constants.TNS_FUNC_AUTH_PHASE_TWO;\n    } else {\n      let releaseNum;\n      let updateNum;\n      let portReleaseNum;\n      let portUpdateNum;\n\n      this.conn.dbDomain = this.sessionData['AUTH_SC_DB_DOMAIN'];\n      this.conn.dbName = this.sessionData['AUTH_SC_DBUNIQUE_NAME'];\n      this.conn.maxOpenCursors = Number(this.sessionData['AUTH_MAX_OPEN_CURSORS'] || 0);\n      this.conn.serviceName = this.sessionData['AUTH_SC_SERVICE_NAME'];\n      this.conn.instanceName = this.sessionData['AUTH_INSTANCENAME'];\n      const fullVersionNum = Number(this.sessionData['AUTH_VERSION_NO']);\n      const versionNum = (fullVersionNum >> 24) & 0xFF;\n      this.conn.warning = this.warning;\n      if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_18_1_EXT_1) {\n        releaseNum = (fullVersionNum >> 16) & 0xFF;\n        updateNum = (fullVersionNum >> 12) & 0x0F;\n        portReleaseNum = (fullVersionNum >> 4) & 0xFF;\n        portUpdateNum = fullVersionNum & 0x0F;\n      } else {\n        releaseNum = (fullVersionNum >> 20) & 0x0F;\n        updateNum = (fullVersionNum >> 12) & 0xFF;\n        portReleaseNum = (fullVersionNum >> 8) & 0x0F;\n        portUpdateNum = fullVersionNum & 0xFF;\n      }\n      this.conn.serverVersionString = versionNum + '.' + releaseNum + '.' + updateNum + '.' + portReleaseNum + '.' + portUpdateNum;\n      this.conn.serverVersion = versionNum * 100000000 + releaseNum * 1000000 + updateNum * 10000 + portReleaseNum * 100 + portUpdateNum * 1;\n    }\n  }\n\n}\n\nmodule.exports = AuthMessage;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Message = require(\"./base.js\");\nconst constants = require(\"../constants.js\");\n\n/**\n * Executes Commit RPC\n *\n * @class CommitMessage\n * @extends {Message}\n */\nclass CommitMessage extends Message {\n\n  constructor(connImpl) {\n    super(connImpl);\n    this.functionCode = constants.TNS_FUNC_COMMIT;\n  }\n\n  //-------------------------------------------------------------------------\n  // encode()\n  //\n  // Write the RPC to perform commit operation in the database\n  //-------------------------------------------------------------------------\n  encode(pkt) {\n    this.writeFunctionHeader(pkt);\n  }\n\n}\n\nmodule.exports = CommitMessage;\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require(\"../constants.js\");\nconst Message = require(\"./base.js\");\n\n/**\n * Does Datatype Negotiation\n *\n * @class DataTypeMessage\n * @extends {Message}\n *\n */\nclass DataTypeMessage extends Message {\n\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_DATA_TYPES) {\n      while (true) {        // eslint-disable-line\n        const dataType = buf.readUInt16BE();\n        if (dataType === 0)\n          break;\n        const convDataType = buf.readUInt16BE();\n        if (convDataType !== 0)\n          buf.skipBytes(4);\n      }\n      this.endOfResponse = !this.connection.nscon.endOfRequestSupport;\n    } else {\n      super.processMessage(buf, messageType);\n    }\n  }\n\n  encode(buf) {\n    buf.writeUInt8(constants.TNS_MSG_TYPE_DATA_TYPES);\n    buf.writeUInt16LE(constants.TNS_CHARSET_UTF8);\n    buf.writeUInt16LE(constants.TNS_CHARSET_UTF8);\n    buf.writeUInt8(constants.TNS_ENCODING_MULTI_BYTE |\n      constants.TNS_ENCODING_CONV_LENGTH);\n    buf.writeBytesWithLength(buf.caps.compileCaps);\n    buf.writeBytesWithLength(buf.caps.runtimeCaps);\n    for (const val of dataTypes) {\n      buf.writeUInt16BE(val[0]);\n      buf.writeUInt16BE(val[1]);\n      buf.writeUInt16BE(val[2]);\n      buf.writeUInt16BE(0);\n    }\n    buf.writeUInt16BE(0);\n  }\n\n}\n\nconst dataTypes = [\n  [constants.TNS_DATA_TYPE_VARCHAR, constants.TNS_DATA_TYPE_VARCHAR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_NUMBER, constants.TNS_DATA_TYPE_NUMBER, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_LONG, constants.TNS_DATA_TYPE_LONG, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DATE, constants.TNS_DATA_TYPE_DATE, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_RAW, constants.TNS_DATA_TYPE_RAW, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_LONG_RAW, constants.TNS_DATA_TYPE_LONG_RAW, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_UB2, constants.TNS_DATA_TYPE_UB2, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_UB4, constants.TNS_DATA_TYPE_UB4, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SB1, constants.TNS_DATA_TYPE_SB1, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_SB2, constants.TNS_DATA_TYPE_SB2, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SB4, constants.TNS_DATA_TYPE_SB4, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SWORD, constants.TNS_DATA_TYPE_SWORD, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_UWORD, constants.TNS_DATA_TYPE_UWORD, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PTRB, constants.TNS_DATA_TYPE_PTRB, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PTRW, constants.TNS_DATA_TYPE_PTRW, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TIDDEF, constants.TNS_DATA_TYPE_TIDDEF, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ROWID, constants.TNS_DATA_TYPE_ROWID, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AMS, constants.TNS_DATA_TYPE_AMS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_BRN, constants.TNS_DATA_TYPE_BRN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_CWD, constants.TNS_DATA_TYPE_CWD, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OAC122, constants.TNS_DATA_TYPE_OAC122, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OER8, constants.TNS_DATA_TYPE_OER8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_FUN, constants.TNS_DATA_TYPE_FUN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AUA, constants.TNS_DATA_TYPE_AUA, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RXH7, constants.TNS_DATA_TYPE_RXH7, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_NA6, constants.TNS_DATA_TYPE_NA6, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_BRP, constants.TNS_DATA_TYPE_BRP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_BRV, constants.TNS_DATA_TYPE_BRV, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KVA, constants.TNS_DATA_TYPE_KVA, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_CLS, constants.TNS_DATA_TYPE_CLS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_CUI, constants.TNS_DATA_TYPE_CUI, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DFN, constants.TNS_DATA_TYPE_DFN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DQR, constants.TNS_DATA_TYPE_DQR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSC, constants.TNS_DATA_TYPE_DSC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_EXE, constants.TNS_DATA_TYPE_EXE, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_FCH, constants.TNS_DATA_TYPE_FCH, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_GBV, constants.TNS_DATA_TYPE_GBV, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_GEM, constants.TNS_DATA_TYPE_GEM, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_GIV, constants.TNS_DATA_TYPE_GIV, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OKG, constants.TNS_DATA_TYPE_OKG, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_HMI, constants.TNS_DATA_TYPE_HMI, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_INO, constants.TNS_DATA_TYPE_INO, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_LNF, constants.TNS_DATA_TYPE_LNF, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ONT, constants.TNS_DATA_TYPE_ONT, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OPE, constants.TNS_DATA_TYPE_OPE, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OSQ, constants.TNS_DATA_TYPE_OSQ, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SFE, constants.TNS_DATA_TYPE_SFE, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SPF, constants.TNS_DATA_TYPE_SPF, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_VSN, constants.TNS_DATA_TYPE_VSN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_UD7, constants.TNS_DATA_TYPE_UD7, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSA, constants.TNS_DATA_TYPE_DSA, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PIN, constants.TNS_DATA_TYPE_PIN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PFN, constants.TNS_DATA_TYPE_PFN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PPT, constants.TNS_DATA_TYPE_PPT, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_STO, constants.TNS_DATA_TYPE_STO, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ARC, constants.TNS_DATA_TYPE_ARC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_MRS, constants.TNS_DATA_TYPE_MRS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_MRT, constants.TNS_DATA_TYPE_MRT, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_MRG, constants.TNS_DATA_TYPE_MRG, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_MRR, constants.TNS_DATA_TYPE_MRR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_MRC, constants.TNS_DATA_TYPE_MRC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_VER, constants.TNS_DATA_TYPE_VER, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_LON2, constants.TNS_DATA_TYPE_LON2, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_INO2, constants.TNS_DATA_TYPE_INO2, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ALL, constants.TNS_DATA_TYPE_ALL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_UDB, constants.TNS_DATA_TYPE_UDB, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AQI, constants.TNS_DATA_TYPE_AQI, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ULB, constants.TNS_DATA_TYPE_ULB, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ULD, constants.TNS_DATA_TYPE_ULD, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SID, constants.TNS_DATA_TYPE_SID, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_NA7, constants.TNS_DATA_TYPE_NA7, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AL7, constants.TNS_DATA_TYPE_AL7, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_K2RPC, constants.TNS_DATA_TYPE_K2RPC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XDP, constants.TNS_DATA_TYPE_XDP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OKO8, constants.TNS_DATA_TYPE_OKO8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_UD12, constants.TNS_DATA_TYPE_UD12, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AL8, constants.TNS_DATA_TYPE_AL8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_LFOP, constants.TNS_DATA_TYPE_LFOP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_FCRT, constants.TNS_DATA_TYPE_FCRT, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DNY, constants.TNS_DATA_TYPE_DNY, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OPR, constants.TNS_DATA_TYPE_OPR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PLS, constants.TNS_DATA_TYPE_PLS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XID, constants.TNS_DATA_TYPE_XID, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TXN, constants.TNS_DATA_TYPE_TXN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DCB, constants.TNS_DATA_TYPE_DCB, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_CCA, constants.TNS_DATA_TYPE_CCA, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_WRN, constants.TNS_DATA_TYPE_WRN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TLH, constants.TNS_DATA_TYPE_TLH, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TOH, constants.TNS_DATA_TYPE_TOH, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_FOI, constants.TNS_DATA_TYPE_FOI, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SID2, constants.TNS_DATA_TYPE_SID2, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TCH, constants.TNS_DATA_TYPE_TCH, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PII, constants.TNS_DATA_TYPE_PII, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PFI, constants.TNS_DATA_TYPE_PFI, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PPU, constants.TNS_DATA_TYPE_PPU, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PTE, constants.TNS_DATA_TYPE_PTE, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RXH8, constants.TNS_DATA_TYPE_RXH8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_N12, constants.TNS_DATA_TYPE_N12, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AUTH, constants.TNS_DATA_TYPE_AUTH, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KVAL, constants.TNS_DATA_TYPE_KVAL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_FGI, constants.TNS_DATA_TYPE_FGI, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSY, constants.TNS_DATA_TYPE_DSY, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYR8, constants.TNS_DATA_TYPE_DSYR8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYH8, constants.TNS_DATA_TYPE_DSYH8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYL, constants.TNS_DATA_TYPE_DSYL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYT8, constants.TNS_DATA_TYPE_DSYT8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYV8, constants.TNS_DATA_TYPE_DSYV8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYP, constants.TNS_DATA_TYPE_DSYP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYF, constants.TNS_DATA_TYPE_DSYF, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYK, constants.TNS_DATA_TYPE_DSYK, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYY, constants.TNS_DATA_TYPE_DSYY, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYQ, constants.TNS_DATA_TYPE_DSYQ, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYC, constants.TNS_DATA_TYPE_DSYC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYA, constants.TNS_DATA_TYPE_DSYA, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OT8, constants.TNS_DATA_TYPE_OT8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYTY, constants.TNS_DATA_TYPE_DSYTY, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AQE, constants.TNS_DATA_TYPE_AQE, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KV, constants.TNS_DATA_TYPE_KV, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AQD, constants.TNS_DATA_TYPE_AQD, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AQ8, constants.TNS_DATA_TYPE_AQ8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RFS, constants.TNS_DATA_TYPE_RFS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RXH10, constants.TNS_DATA_TYPE_RXH10, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPN, constants.TNS_DATA_TYPE_KPN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPDNR, constants.TNS_DATA_TYPE_KPDNR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYD, constants.TNS_DATA_TYPE_DSYD, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYS, constants.TNS_DATA_TYPE_DSYS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYR, constants.TNS_DATA_TYPE_DSYR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYH, constants.TNS_DATA_TYPE_DSYH, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYT, constants.TNS_DATA_TYPE_DSYT, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DSYV, constants.TNS_DATA_TYPE_DSYV, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AQM, constants.TNS_DATA_TYPE_AQM, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OER11, constants.TNS_DATA_TYPE_OER11, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AQL, constants.TNS_DATA_TYPE_AQL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OTC, constants.TNS_DATA_TYPE_OTC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KFNO, constants.TNS_DATA_TYPE_KFNO, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KFNP, constants.TNS_DATA_TYPE_KFNP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KGT8, constants.TNS_DATA_TYPE_KGT8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RASB4, constants.TNS_DATA_TYPE_RASB4, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RAUB2, constants.TNS_DATA_TYPE_RAUB2, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RAUB1, constants.TNS_DATA_TYPE_RAUB1, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RATXT, constants.TNS_DATA_TYPE_RATXT, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RSSB4, constants.TNS_DATA_TYPE_RSSB4, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RSUB2, constants.TNS_DATA_TYPE_RSUB2, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RSUB1, constants.TNS_DATA_TYPE_RSUB1, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RSTXT, constants.TNS_DATA_TYPE_RSTXT, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RIDL, constants.TNS_DATA_TYPE_RIDL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_GLRDD, constants.TNS_DATA_TYPE_GLRDD, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_GLRDG, constants.TNS_DATA_TYPE_GLRDG, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_GLRDC, constants.TNS_DATA_TYPE_GLRDC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OKO, constants.TNS_DATA_TYPE_OKO, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DPP, constants.TNS_DATA_TYPE_DPP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DPLS, constants.TNS_DATA_TYPE_DPLS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DPMOP, constants.TNS_DATA_TYPE_DPMOP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_STAT, constants.TNS_DATA_TYPE_STAT, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RFX, constants.TNS_DATA_TYPE_RFX, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_FAL, constants.TNS_DATA_TYPE_FAL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_CKV, constants.TNS_DATA_TYPE_CKV, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DRCX, constants.TNS_DATA_TYPE_DRCX, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KGH, constants.TNS_DATA_TYPE_KGH, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AQO, constants.TNS_DATA_TYPE_AQO, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OKGT, constants.TNS_DATA_TYPE_OKGT, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPFC, constants.TNS_DATA_TYPE_KPFC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_FE2, constants.TNS_DATA_TYPE_FE2, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SPFP, constants.TNS_DATA_TYPE_SPFP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DPULS, constants.TNS_DATA_TYPE_DPULS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AQA, constants.TNS_DATA_TYPE_AQA, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPBF, constants.TNS_DATA_TYPE_KPBF, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TSM, constants.TNS_DATA_TYPE_TSM, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_MSS, constants.TNS_DATA_TYPE_MSS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPC, constants.TNS_DATA_TYPE_KPC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_CRS, constants.TNS_DATA_TYPE_CRS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KKS, constants.TNS_DATA_TYPE_KKS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KSP, constants.TNS_DATA_TYPE_KSP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KSPTOP, constants.TNS_DATA_TYPE_KSPTOP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KSPVAL, constants.TNS_DATA_TYPE_KSPVAL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PSS, constants.TNS_DATA_TYPE_PSS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_NLS, constants.TNS_DATA_TYPE_NLS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ALS, constants.TNS_DATA_TYPE_ALS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KSDEVTVAL, constants.TNS_DATA_TYPE_KSDEVTVAL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KSDEVTTOP, constants.TNS_DATA_TYPE_KSDEVTTOP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPSPP, constants.TNS_DATA_TYPE_KPSPP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KOL, constants.TNS_DATA_TYPE_KOL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_LST, constants.TNS_DATA_TYPE_LST, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ACX, constants.TNS_DATA_TYPE_ACX, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SCS, constants.TNS_DATA_TYPE_SCS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RXH, constants.TNS_DATA_TYPE_RXH, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPDNS, constants.TNS_DATA_TYPE_KPDNS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPDCN, constants.TNS_DATA_TYPE_KPDCN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPNNS, constants.TNS_DATA_TYPE_KPNNS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPNCN, constants.TNS_DATA_TYPE_KPNCN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPS, constants.TNS_DATA_TYPE_KPS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_APINF, constants.TNS_DATA_TYPE_APINF, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TEN, constants.TNS_DATA_TYPE_TEN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSSCS, constants.TNS_DATA_TYPE_XSSCS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSSSO, constants.TNS_DATA_TYPE_XSSSO, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSSAO, constants.TNS_DATA_TYPE_XSSAO, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KSRPC, constants.TNS_DATA_TYPE_KSRPC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KVL, constants.TNS_DATA_TYPE_KVL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSSDEF, constants.TNS_DATA_TYPE_XSSDEF, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PDQCINV, constants.TNS_DATA_TYPE_PDQCINV, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PDQIDC, constants.TNS_DATA_TYPE_PDQIDC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPDQCSTA, constants.TNS_DATA_TYPE_KPDQCSTA, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPRS, constants.TNS_DATA_TYPE_KPRS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPDQIDC, constants.TNS_DATA_TYPE_KPDQIDC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RTSTRM, constants.TNS_DATA_TYPE_RTSTRM, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SESSGET, constants.TNS_DATA_TYPE_SESSGET, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SESSREL, constants.TNS_DATA_TYPE_SESSREL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SESSRET, constants.TNS_DATA_TYPE_SESSRET, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SCN6, constants.TNS_DATA_TYPE_SCN6, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KECPA, constants.TNS_DATA_TYPE_KECPA, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KECPP, constants.TNS_DATA_TYPE_KECPP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SXA, constants.TNS_DATA_TYPE_SXA, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KVARR, constants.TNS_DATA_TYPE_KVARR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPNGN, constants.TNS_DATA_TYPE_KPNGN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_BINARY_INTEGER, constants.TNS_DATA_TYPE_NUMBER, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_FLOAT, constants.TNS_DATA_TYPE_NUMBER, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_STR, constants.TNS_DATA_TYPE_VARCHAR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_VNU, constants.TNS_DATA_TYPE_NUMBER, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_PDN, constants.TNS_DATA_TYPE_NUMBER, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_VCS, constants.TNS_DATA_TYPE_VARCHAR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_VBI, constants.TNS_DATA_TYPE_VARCHAR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OAC9, constants.TNS_DATA_TYPE_OAC9, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_UIN, constants.TNS_DATA_TYPE_NUMBER, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_SLS, constants.TNS_DATA_TYPE_NUMBER, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_LVC, constants.TNS_DATA_TYPE_VARCHAR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_LVB, constants.TNS_DATA_TYPE_RAW, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_CHAR, constants.TNS_DATA_TYPE_CHAR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AVC, constants.TNS_DATA_TYPE_CHAR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_BINARY_FLOAT, constants.TNS_DATA_TYPE_BINARY_FLOAT,\n    constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_BINARY_DOUBLE, constants.TNS_DATA_TYPE_BINARY_DOUBLE,\n    constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_CURSOR, constants.TNS_DATA_TYPE_CURSOR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RDD, constants.TNS_DATA_TYPE_ROWID, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OSL, constants.TNS_DATA_TYPE_OSL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_EXT_NAMED, constants.TNS_DATA_TYPE_INT_NAMED, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_INT_NAMED, constants.TNS_DATA_TYPE_INT_NAMED, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_EXT_REF, constants.TNS_DATA_TYPE_INT_REF, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_INT_REF, constants.TNS_DATA_TYPE_INT_REF, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_CLOB, constants.TNS_DATA_TYPE_CLOB, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_BLOB, constants.TNS_DATA_TYPE_BLOB, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_BFILE, constants.TNS_DATA_TYPE_BFILE, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_CFILE, constants.TNS_DATA_TYPE_CFILE, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_RSET, constants.TNS_DATA_TYPE_CURSOR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_JSON, constants.TNS_DATA_TYPE_JSON, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DJSON, constants.TNS_DATA_TYPE_DJSON, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_CLV, constants.TNS_DATA_TYPE_CLV, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DTR, constants.TNS_DATA_TYPE_NUMBER, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_DUN, constants.TNS_DATA_TYPE_NUMBER, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_DOP, constants.TNS_DATA_TYPE_NUMBER, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_VST, constants.TNS_DATA_TYPE_VARCHAR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ODT, constants.TNS_DATA_TYPE_DATE, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_DOL, constants.TNS_DATA_TYPE_NUMBER, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_TIME, constants.TNS_DATA_TYPE_TIME, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TIME_TZ, constants.TNS_DATA_TYPE_TIME_TZ, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TIMESTAMP, constants.TNS_DATA_TYPE_TIMESTAMP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TIMESTAMP_TZ, constants.TNS_DATA_TYPE_TIMESTAMP_TZ,\n    constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_INTERVAL_YM, constants.TNS_DATA_TYPE_INTERVAL_YM,\n    constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_INTERVAL_DS, constants.TNS_DATA_TYPE_INTERVAL_DS,\n    constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_EDATE, constants.TNS_DATA_TYPE_DATE, constants.TNS_TYPE_REP_ORACLE],\n  [constants.TNS_DATA_TYPE_ETIME, constants.TNS_DATA_TYPE_ETIME, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ETTZ, constants.TNS_DATA_TYPE_ETTZ, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ESTAMP, constants.TNS_DATA_TYPE_ESTAMP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ESTZ, constants.TNS_DATA_TYPE_ESTZ, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_EIYM, constants.TNS_DATA_TYPE_EIYM, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_EIDS, constants.TNS_DATA_TYPE_EIDS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DCLOB, constants.TNS_DATA_TYPE_CLOB, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DBLOB, constants.TNS_DATA_TYPE_BLOB, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_DBFILE, constants.TNS_DATA_TYPE_BFILE, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_UROWID, constants.TNS_DATA_TYPE_UROWID, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TIMESTAMP_LTZ, constants.TNS_DATA_TYPE_TIMESTAMP_LTZ,\n    constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_ESITZ, constants.TNS_DATA_TYPE_TIMESTAMP_LTZ, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_UB8, constants.TNS_DATA_TYPE_UB8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_PNTY, constants.TNS_DATA_TYPE_INT_NAMED, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_BOOLEAN, constants.TNS_DATA_TYPE_BOOLEAN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSNSOP, constants.TNS_DATA_TYPE_XSNSOP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSATTR, constants.TNS_DATA_TYPE_XSATTR, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSNS, constants.TNS_DATA_TYPE_XSNS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_UB1ARRAY, constants.TNS_DATA_TYPE_UB1ARRAY, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SESSSTATE, constants.TNS_DATA_TYPE_SESSSTATE, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AC_REPLAY, constants.TNS_DATA_TYPE_AC_REPLAY, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AC_CONT, constants.TNS_DATA_TYPE_AC_CONT, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_IMPLRES, constants.TNS_DATA_TYPE_IMPLRES, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OER19, constants.TNS_DATA_TYPE_OER19, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TXT, constants.TNS_DATA_TYPE_TXT, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSSESSNS, constants.TNS_DATA_TYPE_XSSESSNS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSATTOP, constants.TNS_DATA_TYPE_XSATTOP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSCREOP, constants.TNS_DATA_TYPE_XSCREOP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSDETOP, constants.TNS_DATA_TYPE_XSDETOP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSDESOP, constants.TNS_DATA_TYPE_XSDESOP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSSETSP, constants.TNS_DATA_TYPE_XSSETSP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSSIDP, constants.TNS_DATA_TYPE_XSSIDP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSPRIN, constants.TNS_DATA_TYPE_XSPRIN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSKVL, constants.TNS_DATA_TYPE_XSKVL, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSSSDEF2, constants.TNS_DATA_TYPE_XSSSDEF2, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSNSOP2, constants.TNS_DATA_TYPE_XSNSOP2, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_XSNS2, constants.TNS_DATA_TYPE_XSNS2, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPDNREQ, constants.TNS_DATA_TYPE_KPDNREQ, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPDNRNF, constants.TNS_DATA_TYPE_KPDNRNF, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPNGNC, constants.TNS_DATA_TYPE_KPNGNC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPNRI, constants.TNS_DATA_TYPE_KPNRI, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AQENQ, constants.TNS_DATA_TYPE_AQENQ, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AQDEQ, constants.TNS_DATA_TYPE_AQDEQ, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_AQJMS, constants.TNS_DATA_TYPE_AQJMS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPDNRPAY, constants.TNS_DATA_TYPE_KPDNRPAY, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPDNRACK, constants.TNS_DATA_TYPE_KPDNRACK, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPDNRMP, constants.TNS_DATA_TYPE_KPDNRMP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_KPDNRDQ, constants.TNS_DATA_TYPE_KPDNRDQ, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SCN, constants.TNS_DATA_TYPE_SCN, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_SCN8, constants.TNS_DATA_TYPE_SCN8, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_CHUNKINFO, constants.TNS_DATA_TYPE_CHUNKINFO, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_UD21, constants.TNS_DATA_TYPE_UD21, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_UDS, constants.TNS_DATA_TYPE_UDS, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_TNP, constants.TNS_DATA_TYPE_TNP, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OER, constants.TNS_DATA_TYPE_OER, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_OAC, constants.TNS_DATA_TYPE_OAC, constants.TNS_TYPE_REP_UNIVERSAL],\n  [constants.TNS_DATA_TYPE_VECTOR, constants.TNS_DATA_TYPE_VECTOR, constants.TNS_TYPE_REP_UNIVERSAL]\n];\n\nmodule.exports = DataTypeMessage;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Message = require(\"./base.js\");\nconst constants = require(\"../constants.js\");\n\n/**\n * Executes Logoff RPC\n *\n * @class LogOffMessage\n * @extends {Message}\n *\n */\nclass LogOffMessage extends Message {\n\n  constructor(connImpl) {\n    super(connImpl);\n    this.functionCode = constants.TNS_FUNC_LOGOFF;\n  }\n\n  encode(buf) {\n    this.writePiggybacks(buf);\n    this.writeFunctionHeader(buf);\n  }\n\n}\n\nmodule.exports = LogOffMessage;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Message = require(\"./base.js\");\nconst constants = require(\"../constants.js\");\n\n/**\n * Executes a Ping RPC function\n *\n * @class PingMessage\n * @extends {Message}\n */\nclass PingMessage extends Message {\n\n  constructor(connImpl) {\n    super(connImpl);\n    this.functionCode = constants.TNS_FUNC_PING;\n  }\n\n  //-------------------------------------------------------------------------\n  // encode()\n  //\n  // Write the RPC to Ping the database\n  //-------------------------------------------------------------------------\n  encode(buf) {\n    this.writeFunctionHeader(buf);\n  }\n\n}\n\nmodule.exports = PingMessage;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require(\"../constants.js\");\nconst Message = require(\"./base.js\");\n\n/**\n * Executes a Protocol Negotiation RPC function\n *\n * @class ProtocolMessage\n * @extends {Message}\n */\nclass ProtocolMessage extends Message {\n\n  /**\n   * Serializes the ProtocolMessage function arguments\n   *\n   * @param {object} buf input arguments\n   */\n  encode(buf) {\n    buf.writeUInt8(constants.TNS_MSG_TYPE_PROTOCOL);\n    buf.writeUInt8(6);                          // protocol version (8.1+)\n    buf.writeUInt8(0);                          // \"array\" terminator\n    buf.writeStr(\"node-oracledb\");              // unique name for driver\n    buf.writeUInt8(0);\n  }\n\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_PROTOCOL) {\n      this.processProtocolInfo(buf);\n      this.endOfResponse = !this.connection.nscon.endOfRequestSupport;\n    } else {\n      super.processMessage(buf, messageType);\n    }\n  }\n\n  processProtocolInfo(buf) {\n    this.serverVersion = buf.readUInt8();\n    buf.skipUB1();\n    this.serverBanner = buf.readNullTerminatedBytes(48);\n    buf.caps.charSetID = buf.readUInt16LE();\n    this.serverFlags = buf.readUInt8();\n    const num_elem = buf.readUInt16LE();\n    if (num_elem > 0) {                       // skip elements\n      buf.skipBytes(num_elem * 5);\n    }\n    const fdoLen = buf.readUInt16BE();\n    const fdo = buf.readBytes(fdoLen);\n    const ix = 6 + fdo[5] + fdo[6];\n    buf.caps.nCharsetId = (fdo[ix + 3] << 8) + fdo[ix + 4];\n    const serverCompileCaps = buf.readBytesWithLength();\n    if (serverCompileCaps) {\n      this.serverCompileCaps = Buffer.from(serverCompileCaps);\n      buf.caps.adjustForServerCompileCaps(this.serverCompileCaps, this.connection.nscon);\n\n      // Set the maximum OSON field name size\n      if (buf.caps.ttcFieldVersion >= constants.TNS_CCAP_FIELD_VERSION_23_1) {\n        this.connection._osonMaxFieldNameSize = 65535;\n      } else {\n        this.connection._osonMaxFieldNameSize = 255;\n      }\n    }\n    const serverRunTimeCaps = buf.readBytesWithLength();\n    if (serverRunTimeCaps) {\n      this.serverRunTimeCaps = Buffer.from(serverRunTimeCaps);\n      buf.caps.adjustForServerRuntimeCaps(this.serverRunTimeCaps);\n    }\n  }\n\n}\n\nmodule.exports = ProtocolMessage;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Message = require(\"./base.js\");\nconst constants = require(\"../constants.js\");\n\n/**\n * Executes Rollback RPC\n *\n * @class RollbackeMessage\n * @extends {Message}\n */\nclass RollbackMessage extends Message {\n\n  constructor(connImpl) {\n    super(connImpl);\n    this.functionCode = constants.TNS_FUNC_ROLLBACK;\n  }\n\n  //-------------------------------------------------------------------------\n  // encode()\n  //\n  // Write the RPC to perform Rollback operation in the database\n  //-------------------------------------------------------------------------\n  encode(buf) {\n    this.writeFunctionHeader(buf);\n  }\n\n}\n\nmodule.exports = RollbackMessage;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst Message = require(\"./base.js\");\nconst constants = require(\"../constants.js\");\n\n/**\n * Executes Session Release RPC\n *\n * @class SessionReleaseMessage\n * @extends {Message}\n */\nclass SessionReleaseMessage extends Message {\n\n  constructor(connImpl) {\n    super(connImpl);\n    this.functionCode = constants.TNS_FUNC_SESSION_RELEASE;\n    this.messageType = constants.TNS_MSG_TYPE_ONEWAY_FN;\n    this.sessReleaseMode = 0;\n  }\n\n  encode(buf) {\n    this.writeFunctionHeader(buf);\n    buf.writeUInt8(0); // pointer (tag name)\n    buf.writeUInt8(0); // tag name length\n    buf.writeUB4(this.sessReleaseMode);\n  }\n\n  decode() {\n    // pass:\n  }\n\n}\n\nmodule.exports = SessionReleaseMessage;\n", "// Copyright (c) 2023, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require(\"../constants.js\");\nconst Message = require(\"./base.js\");\n\n/**\n * Executes a Fast Negotiation RPC function.\n * It sends Protocol Negotiation, Datatype Negotiation\n * and OSESS Key RPC in single round trip.\n *\n * @class FastAuthMessage\n * @extends {Message}\n */\nclass FastAuthMessage extends Message {\n\n  /**\n   * Serializes the FastAuthMessage function arguments\n   *\n   * @param {object} buf input arguments\n   */\n  encode(buf) {\n    buf.writeUInt8(constants.TNS_MSG_TYPE_FAST_AUTH);\n    buf.writeUInt8(1); // Fast Auth version\n    buf.writeUInt8(constants.TNS_SERVER_CONVERTS_CHARS); // flag 1\n    buf.writeUInt8(0); // flag 2\n    this.protocolMessage.encode(buf);\n    buf.writeUInt16BE(0); // server charset (unused)\n    buf.writeUInt8(0); // server charset flag (unused)\n    buf.writeUInt16BE(0); // server ncharset (unused)\n    buf.caps.ttcFieldVersion = constants.TNS_CCAP_FIELD_VERSION_19_1_EXT_1;\n    buf.writeUInt8(buf.caps.ttcFieldVersion);\n    this.dataTypeMessage.encode(buf);\n    this.authMessage.encode(buf);\n    buf.caps.ttcFieldVersion = constants.TNS_CCAP_FIELD_VERSION_MAX;\n  }\n\n  processMessage(buf, messageType) {\n    if (messageType === constants.TNS_MSG_TYPE_RENEGOTIATE) {\n      this.reNegotiate = true;\n    } else if (messageType === constants.TNS_MSG_TYPE_PROTOCOL) {\n      this.protocolMessage.processMessage(buf, messageType);\n    } else if (messageType === constants.TNS_MSG_TYPE_DATA_TYPES) {\n      this.dataTypeMessage.processMessage(buf, messageType);\n    } else {\n      this.authMessage.processMessage(buf, messageType);\n      this.endOfResponse = this.authMessage.endOfResponse;\n    }\n  }\n\n}\n\nmodule.exports = FastAuthMessage;\n", "// Copyright (c) 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst AuthMessage = require('./auth.js');\nconst CommitMessage = require('./commit.js');\nconst DataTypeMessage = require('./dataType.js');\nconst ExecuteMessage = require('./execute.js');\nconst FetchMessage = require('./fetch.js');\nconst LobOpMessage = require('./lobOp.js');\nconst LogOffMessage = require('./logOff.js');\nconst PingMessage = require('./ping.js');\nconst ProtocolMessage = require('./protocol.js');\nconst RollbackMessage = require('./rollback.js');\nconst SessionReleaseMessage = require('./sessionRelease.js');\nconst FastAuthMessage = require('./fastAuth.js');\n\nmodule.exports = {\n  AuthMessage,\n  CommitMessage,\n  FastAuthMessage,\n  DataTypeMessage,\n  ExecuteMessage,\n  FetchMessage,\n  LobOpMessage,\n  LogOffMessage,\n  PingMessage,\n  ProtocolMessage,\n  RollbackMessage,\n  SessionReleaseMessage\n};\n", "// Copyright (c) 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Node file defining the StatementCache class used to manage cached statements\n//-----------------------------------------------------------------------------\n\nconst errors = require(\"../errors.js\");\nconst { Statement } = require(\"./statement\");\n\nclass StatementCache {\n  constructor(maxSize) {\n    this._cachedStatements = new Map();\n    this._maxSize = maxSize;\n    this._cursorsToClose = new Set();\n    this._openCursors = new Set();\n  }\n\n  //---------------------------------------------------------------------------\n  // _addCursorToClose()\n  //\n  // Add the statement's cursor to the list of cursors that need to be closed.\n  //---------------------------------------------------------------------------\n  _addCursorToClose(statement) {\n    if (this._cursorsToClose.has(statement.cursorId)) {\n      const reason = `attempt to close cursor ${statement.cursorId} twice`;\n      errors.throwErr(errors.ERR_INTERNAL, reason);\n    }\n    if (statement.cursorId != 0) {\n      this._cursorsToClose.add(statement.cursorId);\n    }\n    this._openCursors.delete(statement);\n  }\n\n  //---------------------------------------------------------------------------\n  // _adjustCache()\n  // Adjust the cache so that no more than the maximum number of statements\n  // are cached by removing least recently used statements\n  //---------------------------------------------------------------------------\n  _adjustCache() {\n    while (this._cachedStatements.size > this._maxSize) {\n      const sql = this._cachedStatements.keys().next().value;\n      const stmt = this._cachedStatements.get(sql);\n      this._cachedStatements.delete(sql);\n      if (stmt.inUse) {\n        stmt.returnToCache = false;\n      } else if (stmt.cursorId !== 0) {\n        this._addCursorToClose(stmt);\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  //clearCursors() {\n  // Clears the list of open cursors and removes the list of cursors that\n  // need to be closed. This is required when a DRCP session change has\n  // taken place as the cursor ID values are invalidated.\n  //---------------------------------------------------------------------------\n  clearCursors() {\n    const newOpenCursors = new Set();\n    for (const stmt of this._openCursors) {\n      if (stmt.inUse || stmt.returnToCache) {\n        stmt.pendingClear = true;\n        newOpenCursors.add(stmt);\n      }\n      stmt._clearState();\n    }\n    this._openCursors = newOpenCursors;\n    this._cursorsToClose.clear();\n  }\n\n  //---------------------------------------------------------------------------\n  //clearPendingState() {\n  // Clears state for statment with pending clear flag set and not in use.\n  // This will clear all state for open cursors.\n  // Called after rows processing is completed.\n  //---------------------------------------------------------------------------\n  clearPendingStatus() {\n    for (const stmt of this._openCursors) {\n      if (stmt.pendingClear && !stmt.inUse) {\n        stmt._clearAllState();\n        stmt.pendingClear = false;\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // get_statement()\n  // Get a statement from the statement cache, or prepare a new statement\n  // for use. If a statement is already in use or the statement is not\n  // supposed to be cached, a copy will be made (and not returned to the\n  // cache).\n  //---------------------------------------------------------------------------\n  getStatement(sql, cacheStatement = false, forceNew = false) {\n    let stmt = null;\n    if (sql) {\n      stmt = this._cachedStatements.get(sql);\n    }\n    if (!stmt) {\n      stmt = new Statement();\n      if (sql) {\n        stmt._prepare(sql);\n      }\n      if (cacheStatement && !stmt.isDdl && this._maxSize > 0) {\n        stmt.returnToCache = true;\n        this._cachedStatements.set(sql, stmt);\n        this._adjustCache();\n      }\n      this._openCursors.add(stmt);\n    } else if (forceNew || stmt.inUse) {\n      if (!cacheStatement) {\n        this._addCursorToClose(stmt);\n        this._cachedStatements.delete(sql);\n      }\n      stmt = stmt._copy();\n      this._openCursors.add(stmt);\n    } else if (!cacheStatement) {\n      this._cachedStatements.delete(sql);\n      stmt.returnToCache = false;\n    } else {\n      this._cachedStatements.delete(sql);\n      this._cachedStatements.set(sql, stmt);\n    }\n    this._openCursors.add(stmt);\n    stmt.inUse = true;\n    return stmt;\n  }\n\n  clearCursor(statement) {\n    this._addCursorToClose(statement);\n    statement.cursorId = 0;\n  }\n\n  //---------------------------------------------------------------------------\n  // returnStatement()\n  // Return the statement to the statement cache, if applicable. If the\n  // statement must not be returned to the statement cache, add the cursor\n  // id to the list of cursor ids to close on the next round trip to the\n  // database. Clear all bind variables and fetch variables in order to\n  // ensure that unnecessary references are not retained.\n  //---------------------------------------------------------------------------\n  returnStatement(statement) {\n    if (statement.bindInfoList) {\n      statement.bindInfoList.forEach(bindInfo => {\n        bindInfo.bindVar = null;\n      });\n    }\n    if (statement.queryVars) {\n      statement.queryVars.forEach(queryVar => {\n        queryVar.values.fill(null);\n      });\n    }\n    if (statement.returnToCache) {\n      statement.inUse = false;\n    } else {\n      this._addCursorToClose(statement);\n    }\n    // clear all state for statement which is having flag set and not in use\n    this.clearPendingStatus();\n  }\n\n  //---------------------------------------------------------------------------\n  // writeCursorsToClose()\n  // Write the list of cursors to close to the buffer.\n  //---------------------------------------------------------------------------\n  writeCursorsToClose(buf) {\n    buf.writeUB4(this._cursorsToClose.size);\n    for (const cursorNum of this._cursorsToClose.keys()) {\n      buf.writeUB4(cursorNum);\n    }\n    this._cursorsToClose.clear();\n  }\n}\n\nmodule.exports = StatementCache;\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst ConnectionImpl = require('../impl/connection.js');\nconst ThinResultSetImpl = require('./resultSet.js');\nconst ThinLobImpl  = require(\"./lob.js\");\nconst Protocol = require(\"./protocol/protocol.js\");\nconst { BaseBuffer } = require('../impl/datahandlers/buffer.js');\nconst {NetworkSession: nsi} = require(\"./sqlnet/networkSession.js\");\nconst { Statement } = require(\"./statement\");\nconst thinUtil = require('./util');\nconst sqlNetConstants = require('./sqlnet/constants.js');\nconst constants = require('./protocol/constants.js');\nconst process = require('process');\nconst types = require('../types.js');\nconst errors = require(\"../errors.js\");\nconst messages = require('./protocol/messages');\nconst StatementCache = require('./statementCache.js');\n\nconst finalizationRegistry = new global.FinalizationRegistry((heldValue) => {\n  heldValue.disconnect();\n});\n\nclass TDSBuffer extends BaseBuffer {\n}\n\nclass ThinConnectionImpl extends ConnectionImpl {\n\n  /**\n   * Terminates the connection\n   *\n   * @return {Promise}\n   */\n  async close() {\n    try {\n      if (this._protocol.txnInProgress) {\n        await this.rollback();\n      }\n      if (this._drcpEnabled) {\n        await this._sessRelease();\n        this._drcpEstablishSession = true;\n      }\n      if (this._pool && !this._dropSess) {\n        await this._pool.release(this);\n      } else {\n        if (!this._drcpEnabled) {\n          const message = new messages.LogOffMessage(this);\n          await this._protocol._processMessage(message);\n        }\n        this.nscon.disconnect();\n      }\n    } catch (err) {\n      // immediate close of open socket on failure\n      // exception won't be thrown to user\n      this.nscon.disconnect(sqlNetConstants.NSFIMM);\n    }\n  }\n\n  async _sessRelease() {\n    const message = new messages.SessionReleaseMessage(this);\n    if (!this.isPooled()) {\n      message.sessReleaseMode = constants.DRCP_DEAUTHENTICATE;\n    }\n    await this._protocol._processMessage(message);\n  }\n\n  //---------------------------------------------------------------------------\n  // _getElementTypeObj()\n  //\n  // Get the element type's object type. This is needed when processing\n  // collections with an object as the element type since this information is\n  // not available in the TDS.\n  //---------------------------------------------------------------------------\n  async _getElementTypeObj(info) {\n    const binds = [\n      {\n        name: \"owner\",\n        type: types.DB_TYPE_VARCHAR,\n        dir: constants.BIND_IN,\n        maxSize: 128,\n        values: [info.schema]\n      },\n      {\n        name: \"name\",\n        type: types.DB_TYPE_VARCHAR,\n        dir: constants.BIND_IN,\n        maxSize: 128,\n        values: [info.name]\n      },\n      {\n        name: \"package_name\",\n        type: types.DB_TYPE_VARCHAR,\n        dir: constants.BIND_IN,\n        maxSize: 128,\n        values: [info.packageName]\n      }\n    ];\n    let sql;\n    if (info.packageName) {\n      sql = `\n        select\n            elem_type_owner,\n            elem_type_name,\n            elem_type_package\n        from all_plsql_coll_types\n        where owner = :owner\n          and type_name = :name\n          and package_name = :package_name`;\n    } else {\n      binds.pop();\n      sql = `\n        select\n            elem_type_owner,\n            elem_type_name\n        from all_coll_types\n        where owner = :owner\n          and type_name = :name`;\n    }\n    const options = {\n      connection: { _impl: this },\n      prefetchRows: 2\n    };\n    const result = await this.execute(sql, 1, binds, options, false);\n    const rows = await result.resultSet.getRows(1, options);\n    await result.resultSet.close();\n    const row = rows[0];\n    info.elementTypeClass = this._getDbObjectType(row[0], row[1], row[2]);\n    if (info.elementTypeClass.partial) {\n      this._partialDbObjectTypes.push(info.elementTypeClass);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _execute()\n  //\n  // Calls the RPC that executes a SQL statement and returns the results.\n  //---------------------------------------------------------------------------\n  async _execute(statement, numIters, binds, options, executeManyFlag) {\n\n    // perform binds\n    const numBinds = statement.bindInfoList.length;\n    const numVars = binds.length;\n    if (numBinds !== numVars && (numVars === 0 || !binds[0].name)) {\n      errors.throwErr(errors.ERR_WRONG_NUMBER_OF_POSITIONAL_BINDS, numBinds, numVars);\n    }\n    for (let i = 0; i < binds.length; i++) {\n      await this._bind(statement, binds[i], i + 1);\n    }\n    if (statement.isPlSql && (options.batchErrors || options.dmlRowCounts)) {\n      errors.throwErr(errors.ERR_EXEC_MODE_ONLY_FOR_DML);\n    }\n\n    // send database request\n    const message = new messages.ExecuteMessage(this, statement, options);\n    message.numExecs = numIters;\n    message.arrayDmlRowCounts = options.dmlRowCounts;\n    message.batchErrors = options.batchErrors;\n\n    // if a PL/SQL statement requires a full execute, perform only a single\n    // iteration in order to allow the determination of input/output binds\n    // to be completed; after that, an execution of the remaining iterations\n    // can be performed.\n    if (statement.isPlSql && (statement.cursorId === 0 ||\n      statement.requiresFullExecute)) {\n      message.numExecs = 1;\n      message.noImplicitRelease = true;\n      await this._protocol._processMessage(message);\n      statement.requiresFullExecute = false;\n      message.numExecs = numIters - 1;\n      message.offset = 1;\n      message.noImplicitRelease = false;\n    }\n    if (message.numExecs > 0) {\n      await this._protocol._processMessage(message);\n      statement.requiresFullExecute = false;\n    }\n\n    // if a define is required, send an additional request to the database\n    if (statement.requiresDefine && statement.sql) {\n      statement.requiresFullExecute = true;\n      await this._protocol._processMessage(message);\n      statement.requiresFullExecute = false;\n      statement.requiresDefine = false;\n    }\n\n    // process results\n    const result = {};\n    if (message.warning) {\n      result.warning = message.warning;\n    }\n    if (statement.numQueryVars > 0) {\n      result.resultSet = message.resultSet;\n    } else {\n      statement.bufferRowIndex = 0;\n      const outBinds = thinUtil.getOutBinds(statement, numIters,\n        executeManyFlag);\n      if (outBinds) {\n        result.outBinds = outBinds;\n      }\n      if (executeManyFlag) {\n        if (!statement.isPlSql) {\n          result.rowsAffected = statement.rowCount;\n          delete statement.rowCount;\n        }\n        if (options.dmlRowCounts) {\n          result.dmlRowCounts = options.dmlRowCounts;\n        }\n        if (options.batchErrors) {\n          result.batchErrors = options.batchErrors;\n        }\n      } else {\n        if (statement.isPlSql && options.implicitResultSet) {\n          result.implicitResults = options.implicitResultSet;\n        }\n        if (statement.lastRowid) {\n          result.lastRowid = statement.lastRowid;\n          delete statement.lastRowid;\n        }\n        if (statement.isPlSql) {\n          if (statement.rowCount) {\n            result.rowsAffected = statement.rowCount;\n          }\n        } else {\n          result.rowsAffected = statement.rowCount || 0;\n        }\n        if (statement.rowCount) {\n          delete statement.rowCount;\n        }\n      }\n      this._returnStatement(statement);\n    }\n\n    return result;\n  }\n\n  //---------------------------------------------------------------------------\n  // _parseTDSAttr()\n  //\n  // Returns the DB type and fills metadata from the TDS buffer.\n  //---------------------------------------------------------------------------\n  _parseTDSAttr(buf, metaData) {\n    let oraTypeNum, csfrm, attrType;\n\n    // skip until a type code that is of interest\n    for (;;) {\n      attrType = buf.readUInt8();\n      if (attrType === constants.TNS_OBJ_TDS_TYPE_EMBED_ADT_INFO) {\n        buf.skipBytes(1); // flags\n      } else if (attrType !== constants.TNS_OBJ_TDS_TYPE_SUBTYPE_MARKER) {\n        break;\n      }\n    }\n\n    // process the type code.\n    switch (attrType) {\n      case constants.TNS_OBJ_TDS_TYPE_NUMBER:\n        metaData.precision = buf.readInt8();\n        metaData.scale = buf.readInt8();\n        return types.DB_TYPE_NUMBER;\n      case constants.TNS_OBJ_TDS_TYPE_FLOAT:\n        metaData.precision = buf.readInt8();\n        return types.DB_TYPE_NUMBER;\n      case constants.TNS_OBJ_TDS_TYPE_VARCHAR:\n      case constants.TNS_OBJ_TDS_TYPE_CHAR:\n        metaData.maxSize = buf.readUInt16BE(); // maximum length\n        oraTypeNum = (attrType === constants.TNS_OBJ_TDS_TYPE_VARCHAR) ?\n          constants.TNS_DATA_TYPE_VARCHAR : constants.TNS_DATA_TYPE_CHAR;\n        csfrm = buf.readUInt8();\n        csfrm = csfrm & 0x7f;\n        buf.skipBytes(2); // character set\n        return types.getTypeByOraTypeNum(oraTypeNum, csfrm);\n      case constants.TNS_OBJ_TDS_TYPE_RAW:\n        metaData.maxSize = buf.readUInt16BE(); // maximum length\n        return types.DB_TYPE_RAW;\n      case constants.TNS_OBJ_TDS_TYPE_BINARY_FLOAT:\n        return types.DB_TYPE_BINARY_FLOAT;\n      case constants.TNS_OBJ_TDS_TYPE_BINARY_DOUBLE:\n        return types.DB_TYPE_BINARY_DOUBLE;\n      case constants.TNS_OBJ_TDS_TYPE_DATE:\n        return types.DB_TYPE_DATE;\n      case constants.TNS_OBJ_TDS_TYPE_TIMESTAMP:\n        buf.skipBytes(1); // precision\n        return types.DB_TYPE_TIMESTAMP;\n      case constants.TNS_OBJ_TDS_TYPE_TIMESTAMP_LTZ:\n        buf.skipBytes(1); // precision\n        return types.DB_TYPE_TIMESTAMP_LTZ;\n      case constants.TNS_OBJ_TDS_TYPE_TIMESTAMP_TZ:\n        buf.skipBytes(1); // precision\n        return types.DB_TYPE_TIMESTAMP_TZ;\n      case constants.TNS_OBJ_TDS_TYPE_BOOLEAN:\n        return types.DB_TYPE_BOOLEAN;\n      case constants.TNS_OBJ_TDS_TYPE_CLOB:\n        return types.DB_TYPE_CLOB;\n      case constants.TNS_OBJ_TDS_TYPE_BLOB:\n        return types.DB_TYPE_BLOB;\n      case constants.TNS_OBJ_TDS_TYPE_OBJ:\n        buf.skipBytes(5);\n        return types.DB_TYPE_OBJECT;\n      case constants.TNS_OBJ_TDS_TYPE_START_EMBED_ADT:\n        // loop until end type, TNS_OBJ_TDS_TYPE_END_EMBED_ADT\n        // is received.\n        while (this._parseTDSAttr(buf, {}) !== 0) {\n          continue;\n        }\n        return types.DB_TYPE_OBJECT;\n      case constants.TNS_OBJ_TDS_TYPE_END_EMBED_ADT:\n        return 0;\n      default:\n        errors.throwErr(errors.ERR_TDS_TYPE_NOT_SUPPORTED, attrType);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _parseTDS()\n  //\n  // Parses the TDS (type descriptor segment) for the type.\n  //---------------------------------------------------------------------------\n  async _parseTDS(tds, info) {\n    // parse initial TDS bytes\n    const buf = new TDSBuffer(tds);\n    buf.skipBytes(4);                   // end offset\n    buf.skipBytes(2);                   // version op code and version\n    buf.skipBytes(2);                   // unknown\n\n    // if the number of attributes exceeds 1, the type cannot refer to a\n    // collection, so nothing further needs to be done\n    const numAttrs = buf.readUInt16BE();\n\n    // continue parsing TDS bytes to discover if type refers to a collection\n    buf.skipBytes(1);                   // TDS attributes?\n    buf.skipBytes(1);                   // start ADT op code\n    buf.skipBytes(2);                   // ADT number (always zero)\n    buf.skipBytes(4);                   // offset to index table\n\n    // check to see if type refers to a collection (only one attribute is\n    // present in that case).\n    info.isCollection = false;\n    if (numAttrs === 1) {\n      const pos = buf.pos;\n      const attrType = buf.readUInt8();\n      if (attrType === constants.TNS_OBJ_TDS_TYPE_COLL) {\n        info.isCollection = true;\n      } else {\n        buf.pos = pos;\n      }\n    }\n\n    // Handle collections\n    if (info.isCollection) {\n      // continue parsing TDS to determine element type\n      const elementPos = buf.readUInt32BE();\n      info.maxNumElements = buf.readUInt32BE();\n      info.collectionType = buf.readUInt8();\n      if (info.collectionType === constants.TNS_OBJ_PLSQL_INDEX_TABLE) {\n        info.collectionFlags = constants.TNS_OBJ_HAS_INDEXES;\n      }\n      buf.pos = elementPos;\n      info.elementTypeInfo = {};\n      info.elementType = this._parseTDSAttr(buf, info.elementTypeInfo);\n      if (info.elementType === types.DB_TYPE_OBJECT) {\n        await this._getElementTypeObj(info);\n      }\n    } else {\n      if (info.attributes) { // skip for XML type as it has no attributes.\n        for (const attr of info.attributes) {\n          this._parseTDSAttr(buf, attr);\n        }\n      }\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _populateDbObjectTypeInfo()\n  //\n  // Poplates type information given the name of the type.\n  //---------------------------------------------------------------------------\n  async _populateDbObjectTypeInfo(name) {\n\n    // get type information from the database\n    const sql = `\n      declare\n          t_Instantiable              varchar2(3);\n          t_SuperTypeOwner            varchar2(128);\n          t_SuperTypeName             varchar2(128);\n          t_SubTypeRefCursor          sys_refcursor;\n          t_Pos                       pls_integer;\n      begin\n          :ret_val := dbms_pickler.get_type_shape(:full_name, :oid,\n              :version, :tds, t_Instantiable, t_SuperTypeOwner,\n              t_SuperTypeName, :attrs_rc, t_SubTypeRefCursor);\n          :package_name := null;\n          if substr(:full_name, length(:full_name) - 7) = '%ROWTYPE' then\n              t_Pos := instr(:full_name, '.');\n              :schema := substr(:full_name, 1, t_Pos - 1);\n              :name := substr(:full_name, t_Pos + 1);\n          else\n              begin\n                  select owner, type_name\n                  into :schema, :name\n                  from all_types\n                  where type_oid = :oid;\n              exception\n              when no_data_found then\n                  begin\n                      select owner, package_name, type_name\n                      into :schema, :package_name, :name\n                      from all_plsql_types\n                      where type_oid = :oid;\n                  exception\n                  when no_data_found then\n                      null;\n                  end;\n              end;\n          end if;\n      end;`;\n    const binds = [\n      {\n        name: \"full_name\",\n        type: types.DB_TYPE_VARCHAR,\n        dir: constants.BIND_INOUT,\n        maxSize: 500,\n        values: [name]\n      },\n      {\n        name: \"ret_val\",\n        type: types.DB_TYPE_BINARY_INTEGER,\n        dir: constants.BIND_OUT,\n        values: []\n      },\n      {\n        name: \"oid\",\n        type: types.DB_TYPE_RAW,\n        maxSize: 16,\n        dir: constants.BIND_OUT,\n        values: []\n      },\n      {\n        name: \"version\",\n        type: types.DB_TYPE_BINARY_INTEGER,\n        dir: constants.BIND_OUT,\n        values: []\n      },\n      {\n        name: \"tds\",\n        type: types.DB_TYPE_RAW,\n        maxSize: 2000,\n        dir: constants.BIND_OUT,\n        values: []\n      },\n      {\n        name: \"attrs_rc\",\n        type: types.DB_TYPE_CURSOR,\n        dir: constants.BIND_OUT,\n        values: []\n      },\n      {\n        name: \"package_name\",\n        type: types.DB_TYPE_VARCHAR,\n        maxSize: 128,\n        dir: constants.BIND_OUT,\n        values: []\n      },\n      {\n        name: \"schema\",\n        type: types.DB_TYPE_VARCHAR,\n        maxSize: 128,\n        dir: constants.BIND_OUT,\n        values: []\n      },\n      {\n        name: \"name\",\n        type: types.DB_TYPE_VARCHAR,\n        maxSize: 128,\n        dir: constants.BIND_OUT,\n        values: []\n      }\n    ];\n    const options = {\n      connection: { _impl: this },\n      nullifyInvalidCursor: true\n    };\n    const result = await this.execute(sql, 1, binds, options, false);\n    if (result.outBinds.ret_val !== 0) {\n      errors.throwErr(errors.ERR_INVALID_OBJECT_TYPE_NAME, name);\n    }\n\n    // check cache; if already present, nothing more to do!\n    const info = this._getDbObjectType(result.outBinds.schema,\n      result.outBinds.name, result.outBinds.package_name, result.outBinds.oid);\n    if (!info.partial)\n      return info;\n\n    // process TDS and attributes cursor\n    info.version = result.outBinds.version;\n    const attrRows = await result.outBinds.attrs_rc.getRows(1000, {});\n    if (attrRows.length > 0) {\n      // Its an object not a collection.\n      info.attributes = [];\n      for (const row of attrRows) {\n        const attr = { name: row[1] };\n        if (row[4]) {\n          attr.type = types.DB_TYPE_OBJECT;\n          attr.typeClass = this._getDbObjectType(row[4], row[3], row[5], row[6]);\n          if (attr.typeClass.partial) {\n            this._partialDbObjectTypes.push(attr.typeClass);\n          }\n        } else {\n          attr.type = types.getTypeByColumnTypeName(row[3]);\n        }\n        info.attributes.push(attr);\n      }\n    }\n\n    await this._parseTDS(result.outBinds.tds, info);\n    info.partial = false;\n    return info;\n\n  }\n\n  //---------------------------------------------------------------------------\n  // _populatePartialDbObjectTypes()\n  //\n  // Populates partial types that were discovered earlier. Since populating an\n  // object type might result in additional object types being discovered,\n  // object types are popped from the partial types list until the list is\n  // empty.\n  //---------------------------------------------------------------------------\n  async _populatePartialDbObjectTypes() {\n    while (this._partialDbObjectTypes.length > 0) {\n      const info = this._partialDbObjectTypes.pop();\n      let suffix = \"%ROWTYPE\";\n      let name = info.name;\n      if (name.endsWith(suffix)) {\n        name = name.substring(0, name.length - suffix.length);\n      } else {\n        suffix = \"\";\n      }\n      let fullName;\n      if (info.packageName) {\n        fullName = `\"${info.schema}\".\"${info.packageName}\".\"${name}\"${suffix}`;\n      } else {\n        fullName = `\"${info.schema}\".\"${name}\"${suffix}`;\n      }\n      await this._populateDbObjectTypeInfo(fullName);\n    }\n  }\n\n  async commit() {\n    const message = new messages.CommitMessage(this);\n    await this._protocol._processMessage(message);\n  }\n\n  async breakExecution() {\n    await this._protocol.breakMessage();\n  }\n\n  isHealthy() {\n    try {\n      if (this.nscon.recvInbandNotif() === 0)\n        return true;\n      return false;\n    } catch {\n      return false;\n    }\n  }\n\n  isPooled() {\n    return (this._pool) ? true : false;\n  }\n\n  /**\n   *\n   * @param {object} params  Configuration of the connection\n   *\n   * @return {Promise}\n   */\n  async connect(params) {\n    if (!params.connectString) {\n      errors.throwErr(errors.ERR_EMPTY_CONNECT_STRING);\n    }\n    thinUtil.checkCredentials(params);\n\n    this.sessionID = 0;\n    this.serialNum = 0;\n    this.autoCommit = false;\n    this.serverVersion = \"\";\n    this.statementCache = null;\n    this.currentSchema = \"\";\n    this.invokeSessionCallback = true;\n    this.statementCacheSize = params.stmtCacheSize;\n    this._currentSchemaModified = false;\n    this._tempLobsToClose = [];\n    this._tempLobsTotalSize = 0;\n    this._drcpEstablishSession = false;\n    this._cclass = null;\n    this._clientIdentifier = \"\";\n    this._clientIdentifierModified = false;\n    this._action = \"\";\n    this._actionModified = false;\n    this._dbOp = \"\";\n    this._dbOpModified = false;\n    this._clientInfo = \"\";\n    this._clientInfoModified = false;\n    this._module = \"\";\n    this._moduleModified = false;\n    this._drcpEnabled = false;\n    this.serviceName = '';\n    this.remoteAddress = '';\n    this.comboKey = null; // used in changePassword API\n\n    this.nscon = new nsi();\n    finalizationRegistry.register(this, this.nscon);\n    await this.nscon.connect(params);\n\n    let serverType;\n    if (this.isPooled()) {\n      serverType = params._connInfo[0];\n      this.serviceName = params._connInfo[2];\n      this.purity = params._connInfo[3] | constants.PURITY_DEFAULT;\n      this.sid = params._connInfo[4];\n    } else {\n      serverType = this.nscon.getOption(sqlNetConstants.SERVERTYPE);\n      this.serviceName = this.nscon.getOption(sqlNetConstants.SVCNAME);\n      this.sid = this.nscon.getOption(sqlNetConstants.SID);\n      this.purity = this.nscon.getOption(sqlNetConstants.PURITY) | constants.PURITY_DEFAULT;\n    }\n    if (serverType) {\n      this._drcpEnabled = serverType.toLowerCase() === 'pooled';\n    }\n    this.remoteAddress = this.nscon.getOption(sqlNetConstants.REMOTEADDR);\n    this.connectionClass = params.connectionClass;\n\n    /*\n     * if drcp is used, use purity = NEW as the default purity for\n     * standalone connections and purity = SELF for connections that belong\n     * to a pool\n     */\n    if (this.purity === constants.PURITY_DEFAULT && this._drcpEnabled) {\n      if (this.isPooled()) {\n        this.purity = constants.PURITY_SELF;\n      } else {\n        this.purity = constants.PURITY_NEW;\n      }\n    }\n\n    this._protocol = new Protocol(this);\n\n    // check if the protocol version supported by the database is high\n    // enough; if not, reject the connection immediately\n    if (this._protocol.caps.protocolVersion < constants.TNS_VERSION_MIN_ACCEPTED) {\n      errors.throwErr(errors.ERR_SERVER_VERSION_NOT_SUPPORTED);\n    }\n\n    try {\n      const protocolMessage = new messages.ProtocolMessage(this);\n      const dataTypeMessage = new messages.DataTypeMessage(this);\n      const authMessage = new messages.AuthMessage(this, params);\n      if (this.nscon.supportsFastAuth) {\n        const fastAuthMessage = new messages.FastAuthMessage(this);\n        fastAuthMessage.protocolMessage = protocolMessage;\n        fastAuthMessage.dataTypeMessage = dataTypeMessage;\n        fastAuthMessage.authMessage = authMessage;\n        await this._protocol._processMessage(fastAuthMessage);\n        if (fastAuthMessage.reNegotiate) {\n          // Fast Authentication failed.\n          await this._protocol._processMessage(dataTypeMessage);\n          await this._protocol._processMessage(authMessage);\n        }\n      } else {\n        await this._protocol._processMessage(protocolMessage);\n        await this._protocol._processMessage(dataTypeMessage);\n        await this._protocol._processMessage(authMessage);\n      }\n      if (!params.token) { // non-token Authentication\n        await this._protocol._processMessage(authMessage); // OAUTH\n      }\n    } catch (err) {\n      this.nscon.disconnect();\n      throw err;\n    }\n\n    this.statementCache = new StatementCache(this.statementCacheSize);\n    // maintain a list of partially populated database object types\n    this._partialDbObjectTypes = [];\n\n    if (params.debugJDWP) {\n      this.jdwpData = Buffer.from(params.debugJDWP);\n    } else if (process.env.ORA_DEBUG_JDWP) {\n      this.jdwpData = Buffer.from(process.env.ORA_DEBUG_JDWP);\n    }\n    this._protocol.connInProgress = false;\n  }\n\n  //---------------------------------------------------------------------------\n  // Return the statement to the statement cache, if applicable\n  //---------------------------------------------------------------------------\n  _returnStatement(statement) {\n    this.statementCache.returnStatement(statement);\n  }\n\n  //---------------------------------------------------------------------------\n  // Parses the sql statement and puts it into cache if keepInStmtCache\n  // option is true\n  //---------------------------------------------------------------------------\n  _prepare(sql, options) {\n    const statement = this._getStatement(sql, options.keepInStmtCache);\n    statement.bufferRowIndex = 0;\n    statement.bufferRowCount = 0;\n    statement.lastRowIndex = 0;\n    statement.moreRowsToFetch = true;\n    return statement;\n  }\n\n  //---------------------------------------------------------------------------\n  // Binds the values by user to the statement object\n  //---------------------------------------------------------------------------\n  async _bind(stmt, variable, pos = 0) {\n    const bindInfoDict = stmt.bindInfoDict;\n    const bindInfoList = stmt.bindInfoList;\n\n    /*\n     * For PL/SQL blocks, if the size of a string or bytes object exceeds\n     * 32,767 bytes it is converted to a BLOB/CLOB; and conversion\n     * needs to be established as well to return the string in the way that\n     * the user expects to get it\n     */\n    if (stmt.isPlSql && variable.maxSize > 32767) {\n      if (variable.type === types.DB_TYPE_RAW ||\n          variable.type === types.DB_TYPE_LONG_RAW) {\n        variable.type = types.DB_TYPE_BLOB;\n      } else if (variable.type._csfrm === constants.CSFRM_NCHAR)  {\n        variable.type = types.DB_TYPE_NCLOB;\n      } else {\n        variable.type = types.DB_TYPE_CLOB;\n      }\n      const maxSize = variable.maxSize;\n      delete variable.maxSize;\n      variable.outConverter = async function(val) {\n        if (val === null) {\n          return null;\n        }\n        const data = await val.getData();\n        const len = val._length;\n        if (data && len > maxSize) {\n          errors.throwErr(errors.ERR_INSUFFICIENT_BUFFER_FOR_BINDS);\n        }\n        return data;\n      };\n    }\n\n    if (variable.type === types.DB_TYPE_CLOB ||\n        variable.type === types.DB_TYPE_NCLOB ||\n        variable.type === types.DB_TYPE_BLOB) {\n      for (const [index, val] of variable.values.entries()) {\n        if (!(val instanceof ThinLobImpl)) {\n          if (val && val.length > 0) {\n            const lobImpl = new ThinLobImpl();\n            await lobImpl.create(this, variable.type);\n            await lobImpl.write(1, val);\n            variable.values[index] = lobImpl;\n          } else {\n            variable.values[index] = null;\n          }\n        }\n      }\n    }\n\n    if (variable.name) {\n      let normalizedName;\n      if (variable.name.startsWith('\"') && variable.name.endsWith('\"')) {\n        normalizedName = variable.name.substring(1, variable.name.length - 1);\n      } else {\n        normalizedName = variable.name.toUpperCase();\n      }\n      if (normalizedName.startsWith(':')) {\n        normalizedName = variable.name.substring(1);\n      }\n      if (!bindInfoDict.has(normalizedName)) {\n        errors.throwErr(errors.ERR_INVALID_BIND_NAME, normalizedName);\n      }\n      bindInfoDict.get(normalizedName).forEach((bindInfo) => {\n        stmt._setVariable(bindInfo, variable);\n      });\n    } else {\n      const bindInfo = bindInfoList[pos - 1];\n      stmt._setVariable(bindInfo, variable);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // _createResultSet()\n  //\n  // Creates a result set and performs any necessary initialization.\n  //---------------------------------------------------------------------------\n  _createResultSet(options, statement) {\n    const resultSet = new ThinResultSetImpl();\n    if (!statement) {\n      statement = new Statement();\n    }\n    resultSet._resultSetNew(this, statement, options);\n    if (statement.queryVars.length > 0) {\n      const metadata = thinUtil.getMetadataMany(statement.queryVars);\n      resultSet._setup(options, metadata);\n    }\n    return resultSet;\n  }\n\n  //---------------------------------------------------------------------------\n  // getDbObjectClass()\n  //\n  // Returns a database object class given its name.\n  //---------------------------------------------------------------------------\n  async getDbObjectClass(name) {\n    const info = await this._populateDbObjectTypeInfo(name);\n    await this._populatePartialDbObjectTypes();\n    return info;\n  }\n\n  //---------------------------------------------------------------------------\n  // getStatementInfo()\n  //\n  // Parses the SQL statement and returns information about the statement.\n  //---------------------------------------------------------------------------\n  async getStatementInfo(sql) {\n    const options = {};\n    const result = {};\n    const statement = this._prepare(sql, options);\n    options.connection = this;\n    try {\n      if (!statement.isDdl) {\n        const message = new messages.ExecuteMessage(this, statement, options);\n        message.parseOnly = true;\n        await this._protocol._processMessage(message);\n      }\n      if (statement.numQueryVars > 0) {\n        result.metaData = thinUtil.getMetadataMany(statement.queryVars);\n      }\n      result.bindNames = Array.from(statement.bindInfoDict.keys());\n      result.statementType = statement.statementType;\n      return result;\n    } finally {\n      this._returnStatement(statement);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // execute()\n  //\n  // Calls the RPC that executes a SQL statement and returns the results.\n  //---------------------------------------------------------------------------\n  async execute(sql, numIters, binds, options, executeManyFlag) {\n    const statement = this._prepare(sql, options);\n    try {\n      return await this._execute(statement, numIters, binds, options,\n        executeManyFlag);\n    } catch (err) {\n      this._returnStatement(statement);\n      throw err;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // Get the statement object from the statement cache for the SQL if it exists\n  // else prepare a new statement object for the SQL. If a statement is already\n  // in use a copy will be made and returned (and will not be returned to the\n  // cache). If a statement is being executed for the first time after releasing\n  // a DRCP session, a copy will also be made (and will not be returned to the\n  // cache) since it is unknown at this point whether the original session or a\n  // new session is going to be used.\n  //---------------------------------------------------------------------------\n  _getStatement(sql, cacheStatement = false) {\n    return this.statementCache.getStatement(sql, cacheStatement,\n      this._drcpEstablishSession);\n  }\n\n  //---------------------------------------------------------------------------\n  // Calls the ping RPC for Oracle Database\n  //---------------------------------------------------------------------------\n  async ping() {\n    const message = new messages.PingMessage(this);\n    await this._protocol._processMessage(message);\n  }\n\n  //---------------------------------------------------------------------------\n  // Calls the Rollback RPC for Oracle Database\n  //---------------------------------------------------------------------------\n  async rollback() {\n    const message = new messages.RollbackMessage(this);\n    await this._protocol._processMessage(message);\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns the Oracle Server version\n  //---------------------------------------------------------------------------\n  getOracleServerVersion() {\n    return this.serverVersion;\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns the Oracle Server version string\n  //---------------------------------------------------------------------------\n  getOracleServerVersionString() {\n    return this.serverVersionString;\n  }\n\n  setCurrentSchema(schema) {\n    this._currentSchemaModified = true;\n    this.currentSchema = schema;\n  }\n\n  getCurrentSchema() {\n    return this.currentSchema;\n  }\n\n  setClientId(clientId) {\n    this._clientIdentifierModified = true;\n    this._clientIdentifier = clientId;\n  }\n\n  setDbOp(dbOp) {\n    this._dbOpModified = true;\n    this._dbOp = dbOp;\n  }\n\n  setClientInfo(clientInfo) {\n    this._clientInfoModified = true;\n    this._clientInfo = clientInfo;\n  }\n\n  setModule(module) {\n    this._moduleModified = true;\n    this._module = module;\n\n    /*\n     * setting the module by itself results in an error so always force\n     * action to be set as well (which eliminates this error)\n     */\n    this._actionModified = true;\n  }\n\n  setAction(action) {\n    this._actionModified = true;\n    this._action = action;\n  }\n\n  async changePassword(user, password, newPassword) {\n    const config = {\n      user: user,\n      newPassword: newPassword,\n      password: password,\n      changePassword: true\n    };\n    const message = new messages.AuthMessage(this, config);\n    await this._protocol._processMessage(message);    // OAUTH\n  }\n\n  async createLob(dbType) {\n    const lobImpl = new ThinLobImpl();\n    await lobImpl.create(this, dbType);\n    return lobImpl;\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns the statement cache size for the statement cache maintained by\n  // the connection object\n  //---------------------------------------------------------------------------\n  getStmtCacheSize() {\n    return this.statementCache._maxSize;\n  }\n\n  setCallTimeout(timeout) {\n    this._protocol.callTimeout = timeout;\n  }\n\n  getCallTimeout() {\n    return this._protocol.callTimeout;\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns getTag. Actual tag returned by db must be a string.\n  //---------------------------------------------------------------------------\n  getTag() {\n    return '';\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns the Oracle Database instance name associated with the connection.\n  //---------------------------------------------------------------------------\n  getInstanceName() {\n    return this.instanceName;\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns the Oracle Database domain name associated with the connection.\n  //---------------------------------------------------------------------------\n  getDbDomain() {\n    return this.dbDomain;\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns the Oracle Database name associated with the connection.\n  //---------------------------------------------------------------------------\n  getDbName() {\n    return this.dbName;\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns maximum number of cursors that can be opened in one session.\n  //---------------------------------------------------------------------------\n  getMaxOpenCursors() {\n    return this.maxOpenCursors;\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns the Oracle Database service name associated with the connection.\n  //---------------------------------------------------------------------------\n  getServiceName() {\n    return this.serviceName;\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns boolean based on this._protocol.txnInProgress value.\n  //---------------------------------------------------------------------------\n  getTransactionInProgress() {\n    return this._protocol.txnInProgress;\n  }\n\n  //---------------------------------------------------------------------------\n  // Returns the warning object.\n  //---------------------------------------------------------------------------\n  getWarning() {\n    return this.warning;\n  }\n}\nmodule.exports = ThinConnectionImpl;\n", "// Copyright (c) 2022, 2024, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst PoolImpl = require('../impl/pool.js');\nconst ThinConnectionImpl = require('./connection.js');\nconst protocolUtil = require('./protocol/utils.js');\nconst errors = require('../errors.js');\nconst settings = require('../settings.js');\nconst util = require('../util.js');\nconst thinUtil = require('./util.js');\nconst {getConnectionInfo} = require('./sqlnet/networkSession.js');\nconst crypto = require('crypto');\nconst EventEmitter = require('events');\nconst Timers = require('timers');\n\nclass ThinPoolImpl extends PoolImpl {\n\n  _init(params) {\n    if (!params.homogeneous) {\n      errors.throwErr(errors.ERR_NOT_IMPLEMENTED, 'Heterogeneous Pooling');\n    }\n    thinUtil.checkCredentials(params);\n\n    this._availableObjects = [];\n    this._name = 'node-thin';\n    this._poolMin = params.poolMin;\n    this._poolMax = params.poolMax;\n    this._poolIncrement = params.poolIncrement;\n    this._poolTimeout = params.poolTimeout;\n    this._poolPingInterval = params.poolPingInterval;\n    this._poolPingTimeout = params.poolPingTimeout;\n    this._stmtCacheSize = params.stmtCacheSize;\n\n    // The user Config filterd from common layer is cached except\n    // sensitive data as sensitive data is obfuscated in the pool\n    // and de-obfuscated as necessary.\n    this._userConfig = params;\n    this._freeConnectionList = [];\n    this._usedConnectionList = new Set();\n    this._password = params.password;\n    this._walletPassword = params.walletPassword;\n    this._obfuscatedPassword = [];\n    this._obfuscatedWalletPassword = [];\n    this._token = params.token;\n    this._obfuscatedToken = [];\n    this._privateKey = params.privateKey;\n    this._obfuscatedPrivateKey = [];\n    this._schedulerJob = null;\n    this._poolCloseWaiter = null;\n    this._pendingRequests = [];\n\n    // password obfuscation\n    if (this._password !== undefined) {\n      const obj = protocolUtil.setObfuscatedValue(this._password);\n      this._password = obj.value;\n      this._obfuscatedPassword = obj.obfuscatedValue;\n      this._userConfig.password = null;\n    }\n    // wallet password obfuscation\n    if (this._walletPassword !== undefined) {\n      const obj = protocolUtil.setObfuscatedValue(this._walletPassword);\n      this._walletPassword = obj.value;\n      this._obfuscatedWalletPassword = obj.obfuscatedValue;\n      this._userConfig.walletPassword = null;\n    }\n    // token obfuscation\n    if (this._token !== undefined) {\n      const obj = protocolUtil.setObfuscatedValue(this._token);\n      this._token = obj.value;\n      this._obfuscatedToken = obj.obfuscatedValue;\n      this._userConfig.token = null;\n    }\n    // privateKey obfuscation\n    if (this._privateKey !== undefined) {\n      const obj = protocolUtil.setObfuscatedValue(this._privateKey);\n      this._privateKey = obj.value;\n      this._obfuscatedPrivateKey = obj.obfuscatedValue;\n      this._userConfig.privateKey = null;\n    }\n    this._accessTokenFn = params.accessTokenFn;\n    this._accessTokenConfig = params.accessTokenConfig;\n    this._isDRCPEnabled = false;\n    this._implicitPool = null;\n    this.eventEmitter = new EventEmitter();\n    // listener to remove dead or idle connections\n    this.eventEmitter.on('_removePoolConnection', async (connImpl) => {\n      await this._destroy(connImpl);\n    });\n  }\n\n  //---------------------------------------------------------------------------\n  // create pool with specified parameters and miminum number of connections as\n  // specified by poolMin\n  //---------------------------------------------------------------------------\n  async create(params) {\n    this._init(params);\n    this._userConfig._connInfo =\n      await getConnectionInfo(params);\n    this._isDRCPEnabled =\n      String(this._userConfig._connInfo[0]).toLowerCase() === 'pooled';\n    // generate connection class when none is provided by user\n    if (this._isDRCPEnabled && settings.connectionClass === '') {\n      this._generateConnectionClass();\n    }\n\n    // create a background task. It will create minimum connections in the pool\n    // and expand the pool as required.\n    this.bgThreadFunc();\n  }\n\n  //---------------------------------------------------------------------------\n  // set new token and private key in pool\n  //---------------------------------------------------------------------------\n  setAccessToken(params) {\n    if (params.token) {\n      this._token = params.token;\n      const objToken = protocolUtil.setObfuscatedValue(this._token);\n      this._token = objToken.value;\n      this._obfuscatedToken = objToken.obfuscatedValue;\n    }\n    if (params.privateKey) {\n      this._privateKey = params.privateKey;\n      const objKey = protocolUtil.setObfuscatedValue(this._privateKey);\n      this._privateKey = objKey.value;\n      this._obfuscatedPrivateKey = objKey.obfuscatedValue;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // credentials are obfuscated and stored in an object(userConfig) during\n  // pool creation. _getConnAttrs() method is used to deobfuscate encrypted\n  // credentials for creating new connections\n  //---------------------------------------------------------------------------\n  async _getConnAttrs() {\n    let accessToken;\n    const clonedAttrs = Object.assign({}, this._userConfig);\n    // deobfuscate password\n    if (clonedAttrs.password === null) {\n      clonedAttrs.password = protocolUtil.getDeobfuscatedValue(this._password,\n        this._obfuscatedPassword);\n    }\n\n    // deobfuscate wallet password\n    if (clonedAttrs.walletPassword === null) {\n      clonedAttrs.walletPassword =\n        protocolUtil.getDeobfuscatedValue(this._walletPassword,\n          this._obfuscatedWalletPassword);\n    }\n\n    // deobfuscate token and private key\n    // check for token expiry\n    if (clonedAttrs.token === null) {\n      clonedAttrs.token =\n        protocolUtil.getDeobfuscatedValue(this._token, this._obfuscatedToken);\n      if (util.isTokenExpired(clonedAttrs.token)) {\n        if (typeof this._accessTokenFn === 'function') {\n          accessToken = await this._accessTokenFn(true, this._accessTokenConfig);\n          if (typeof accessToken === 'string') {\n            clonedAttrs.token = accessToken;\n            if (util.isTokenExpired(clonedAttrs.token)) {\n              // OAuth2 token is expired\n              errors.throwErr(errors.ERR_TOKEN_HAS_EXPIRED);\n            } else {\n              // update pool with OAuth2 token\n              const obj = protocolUtil.setObfuscatedValue(clonedAttrs.token);\n              this._token = obj.value;\n              this._obfuscatedToken = obj.obfuscatedValue;\n            }\n          } else if (typeof accessToken === 'object') {\n            clonedAttrs.token = accessToken.token;\n            clonedAttrs.privateKey = accessToken.privateKey;\n            if (util.isTokenExpired(clonedAttrs.token)) {\n              // IAM token is expired\n              errors.throwErr(errors.ERR_TOKEN_HAS_EXPIRED);\n            } else {\n              // update pool with IAM token and private key\n              const objToken = protocolUtil.setObfuscatedValue(clonedAttrs.token);\n              this._token = objToken.value;\n              this._obfuscatedToken = objToken.obfuscatedValue;\n              const objKey = protocolUtil.setObfuscatedValue(clonedAttrs.privateKey);\n              this._privateKey = objKey.value;\n              this._obfuscatedPrivateKey = objKey.obfuscatedValue;\n            }\n          }\n        } else {\n          errors.throwErr(errors.ERR_TOKEN_HAS_EXPIRED);\n        }\n      }\n    }\n    if (clonedAttrs.privateKey === null) {\n      clonedAttrs.privateKey =\n        protocolUtil.getDeobfuscatedValue(this._privateKey,\n          this._obfuscatedPrivateKey);\n    }\n    return clonedAttrs;\n  }\n\n  //---------------------------------------------------------------------------\n  // return available connection if present in pool else\n  // create new connection and return it\n  //---------------------------------------------------------------------------\n  async getConnection() {\n    return await this.acquire();\n  }\n\n  //---------------------------------------------------------------------------\n  // destroy connection when pool close operation is called\n  //---------------------------------------------------------------------------\n  async _destroy(connection) {\n    if (connection.nscon.ntAdapter.connected) {\n      connection._dropSess = true;\n      await connection.close();\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // close pool by destroying available connections\n  //---------------------------------------------------------------------------\n  async close() {\n\n    // wait till background task for pool expansion is finished; if it is not\n    // currently running, wake it up!\n    await new Promise((resolve) => {\n      this._poolCloseWaiter = resolve;\n      if (this.bgWaiter) {\n        this.bgWaiter();\n      }\n    });\n\n    // clear scheduled job\n    if (this._schedulerJob) {\n      clearTimeout(this._schedulerJob);\n      this._schedulerJob = null;\n    }\n\n    // destroy all free connections\n    for (const conn of this._freeConnectionList) {\n      await this._destroy(conn);\n    }\n\n    // destroy all used connections\n    for (const conn of this._usedConnectionList) {\n      await this._destroy(conn);\n    }\n\n    this.eventEmitter.removeAllListeners();\n  }\n\n  //---------------------------------------------------------------------------\n  // returns poolMax from configuration\n  //---------------------------------------------------------------------------\n  getPoolMax() {\n    return this._poolMax;\n  }\n\n  //---------------------------------------------------------------------------\n  // returns poolMin from configuration\n  //---------------------------------------------------------------------------\n  getPoolMin() {\n    return this._poolMin;\n  }\n\n  //---------------------------------------------------------------------------\n  // get number of used connection\n  //---------------------------------------------------------------------------\n  getConnectionsInUse() {\n    return this._usedConnectionList.size;\n  }\n\n  //---------------------------------------------------------------------------\n  // get number of free connection\n  //---------------------------------------------------------------------------\n  getConnectionsOpen() {\n    return this._freeConnectionList.length + this._usedConnectionList.size;\n  }\n\n  //---------------------------------------------------------------------------\n  // returns poolIncrement from configuration\n  //---------------------------------------------------------------------------\n  getPoolIncrement() {\n    return this._poolIncrement;\n  }\n\n  //---------------------------------------------------------------------------\n  // returns maximum number of connections allowed per shard in the pool\n  //---------------------------------------------------------------------------\n  getPoolMaxPerShard() {\n    return;\n  }\n\n  //---------------------------------------------------------------------------\n  // returns the pool ping interval (seconds)\n  //---------------------------------------------------------------------------\n  getPoolPingInterval() {\n    return this._poolPingInterval;\n  }\n\n  //---------------------------------------------------------------------------\n  // returns the pool ping Timeout (milliseconds)\n  //---------------------------------------------------------------------------\n  getPoolPingTimeout() {\n    return this._poolPingTimeout;\n  }\n\n  //---------------------------------------------------------------------------\n  // returns the pool timeout\n  //---------------------------------------------------------------------------\n  getPoolTimeout() {\n    return this._poolTimeout;\n  }\n\n  //---------------------------------------------------------------------------\n  // returns whether the SODA metadata cache is enabled or not\n  //---------------------------------------------------------------------------\n  getSodaMetaDataCache() {\n    return;\n  }\n\n  //---------------------------------------------------------------------------\n  // returns the statement cache size associate with the pool\n  //---------------------------------------------------------------------------\n  getStmtCacheSize() {\n    return this._stmtCacheSize;\n  }\n\n  //---------------------------------------------------------------------------\n  // _setScheduler()\n  //\n  // set scheduler to scan and remove idle connections\n  //---------------------------------------------------------------------------\n  _setScheduler() {\n    if (!this._schedulerJob && this._poolTimeout > 0 &&\n        this._freeConnectionList.length > 0 &&\n        (this._freeConnectionList.length + this._usedConnectionList.size >\n        this._poolMin)) {\n      this._schedulerJob = setTimeout(() => {\n        this._scanIdleConnection();\n      }, this._poolTimeout * 1000);\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // scanIdleConnection()\n  //\n  // scan connection list and removes idle connections from pool\n  //---------------------------------------------------------------------------\n  _scanIdleConnection() {\n    while ((this._usedConnectionList.size + this._freeConnectionList.length) >\n        this._poolMin && this._freeConnectionList.length > 0) {\n      const conn = this._freeConnectionList[0];\n      if (Date.now() - conn._lastTimeUsed < this._poolTimeout * 1000) {\n        break;\n      }\n\n      this.eventEmitter.emit('_removePoolConnection', conn);\n      this._freeConnectionList.shift();\n    }\n\n    this._schedulerJob = null;\n    this._setScheduler();\n  }\n\n  //---------------------------------------------------------------------------\n  // _getNumConnsToCreate()\n  //\n  // get number of connections need to be created\n  //---------------------------------------------------------------------------\n  _getNumConnsToCreate() {\n    const usedConns = this._freeConnectionList.length + this._usedConnectionList.size;\n    // less connections in the pool than poolMin? restore to poolMin\n    if (usedConns < this._poolMin) {\n      return this._poolMin - usedConns;\n    // connections need to be created? create up to poolIncrement without exceeding poolMax\n    } else if (this._pendingRequests.length > 0) {\n      return Math.min(this._poolIncrement, this._poolMax - usedConns);\n    // no pending requests and we are already at poolMin so nothing to do!\n    } else {\n      return 0;\n    }\n  }\n\n  //---------------------------------------------------------------------------\n  // bgThreadFunc()\n  //\n  // method which runs in a background thread and is used to create connections.\n  // When first started, it creates poolMin connections. After that, it creates\n  // poolIncrement connections up to the value of poolMax when needed.\n  // The thread terminates automatically when the pool is closed.\n  //---------------------------------------------------------------------------\n  async bgThreadFunc() {\n\n    // continue until a close request is received\n    while (!this._poolCloseWaiter) {\n      // eliminate connections that exceed the poolMax (this should only happen\n      // after a reconfiguration has taken place where the maximum number of\n      // connections is reduced)\n      let numToDestroy = this._poolMax - this.getConnectionsOpen();\n      while (numToDestroy > 0 && this._freeConnectionList.length > 0) {\n        const connToBeRemoved = this._freeConnectionList.shift();\n        this.eventEmitter.emit('_removePoolConnection', connToBeRemoved);\n        numToDestroy--;\n      }\n\n      const numToCreate = this._getNumConnsToCreate();\n      // connection creation is going on serially and not concurrently\n      for (let i = 0; i < numToCreate; i++) {\n        try {\n          // get deobfuscated value\n          const config = await this._getConnAttrs();\n          const conn = new ThinConnectionImpl();\n          conn._pool = this;\n          await conn.connect(config);\n          conn._newSession = true;\n          conn._dropSess = false;\n          conn._lastTimeUsed = Date.now();\n          this._freeConnectionList.push(conn);\n        } catch (err) {\n          this._bgErr = err;\n        }\n\n        if (this._poolIncrement > 1 && (this._poolMax - this._usedConnectionList.size\n            - this._freeConnectionList.length) > 1) {\n          this._setScheduler();\n        }\n\n        // resolve pending request\n        if (this._pendingRequests.length > 0) {\n          const payload = this._pendingRequests.shift();\n          payload.resolve();\n        }\n\n        // give an opportunity for other \"threads\" to do their work.\n        await new Promise((resolve) => Timers.setImmediate(resolve));\n\n        // break loop when pool is closing\n        if (this._poolCloseWaiter) {\n          break;\n        }\n      }\n\n      // when pool is closing, break from while loop\n      if (this._poolCloseWaiter) {\n        break;\n      }\n\n      // if no pending requests, wait for pending requests to appear!\n      if (this._pendingRequests.length == 0 || this._bgErr) {\n        await new Promise((resolve) => {\n          this.bgWaiter = resolve;\n        });\n        this.bgWaiter = null;\n      }\n    }\n\n    // notify the closer that the close can actually take place\n    this._poolCloseWaiter();\n  }\n\n  //---------------------------------------------------------------------------\n  // acquire()\n  //\n  // acquire a connection from connection pool\n  //---------------------------------------------------------------------------\n  async acquire() {\n\n    // return first connection from the free list that passes health checks\n    while (this._freeConnectionList.length > 0) {\n      const conn = this._freeConnectionList.pop();\n\n      // if connection is unhealthy, drop it from the pool\n      if (!conn.isHealthy()) {\n        this.eventEmitter.emit('_removePoolConnection', conn);\n        continue;\n      }\n\n      // perform a ping, if necessary; a ping interval less than 0 disables\n      // pings; a ping interval of 0 forces a ping for each use of the\n      // connection and a value greater than 0 will be performed if the\n      // connection has not been used for that period of time; if the ping is\n      // unsuccessful, drop the connection from the pool\n      let requiresPing = false;\n      if (this._poolPingInterval === 0) {\n        requiresPing = true;\n      } else if (this._poolPingInterval > 0) {\n        const elapsed = Date.now() - conn._lastTimeUsed;\n        if (elapsed > this._poolPingInterval * 1000)\n          requiresPing = true;\n      }\n      if (requiresPing) {\n        let pingTimer;\n        try {\n          if (this._poolPingTimeout) {\n            pingTimer = setTimeout(() => {\n              // force disconnect causes ping task to unblock\n              // and return.\n              conn.nscon.forceDisconnect();\n            }, this._poolPingTimeout);\n          }\n          await conn.ping();\n        } catch {\n          conn.nscon.forceDisconnect();\n          continue;\n        } finally {\n          clearTimeout(pingTimer);\n        }\n      }\n\n      // connection has passed health checks, return it immediately\n      this._usedConnectionList.add(conn);\n      return conn;\n\n    }\n\n    // no free connections exist at this point; if less than poolMin\n    // connections exist, grow the pool to poolMin again; otherwise, increase\n    // the pool by poolIncrement up to poolMax. We are deferring this\n    // to the background thread function!\n    await new Promise((resolve) => {\n      this._pendingRequests.push({resolve: resolve});\n      if (this.bgWaiter) {\n        // this wakes up the function to do some more work\n        this.bgWaiter();\n      }\n    });\n\n    if (this._bgErr) {\n      const err = this._bgErr;\n      this._bgErr = null;\n\n      // if an error has occurred in the background thread we clear it and then,\n      // if there are more pending requests we request the background thread\n      // function to try again.\n      if (this._pendingRequests.length > 0 && this.bgWaiter) {\n        this.bgWaiter();\n      }\n      throw err;\n    }\n    // return a connection from the ones that were just built\n    const conn = this._freeConnectionList.pop();\n    this._usedConnectionList.add(conn);\n    return conn;\n  }\n\n  // release connection to connection pool\n  release(conn) {\n    conn.warning = undefined;\n    this._usedConnectionList.delete(conn);\n    if (conn.nscon.connected) {\n      conn._lastTimeUsed = Date.now();\n      conn._newSession = false;\n      if ((this._freeConnectionList.length + this._usedConnectionList.size)\n        < this._poolMax) {\n        this._freeConnectionList.push(conn);\n      } else {\n        this.eventEmitter.emit('_removePoolConnection', conn);\n      }\n    }\n\n    this._setScheduler();\n  }\n\n  //---------------------------------------------------------------------------\n  // _generateConnectionClass()\n  //\n  // generate connection class for drcp if none is provided by user\n  //---------------------------------------------------------------------------\n  _generateConnectionClass() {\n    this._userConfig.connectionClass = crypto.randomBytes(16).toString('base64');\n    this._userConfig.connectionClass = \"NJS:\" + this._userConfig.connectionClass;\n  }\n\n  //---------------------------------------------------------------------------\n  // reconfigure()\n  //\n  // Reconfigures the pool with new parameters\n  //---------------------------------------------------------------------------\n  reconfigure(params) {\n    if (params.poolIncrement !== undefined) {\n      this._poolIncrement = params.poolIncrement;\n    }\n\n    if (params.poolTimeout !== undefined &&\n      this._poolTimeout !== params.poolTimeout) {\n      this._poolTimeout = params.poolTimeout;\n      // clear scheduled job\n      if (this._schedulerJob) {\n        clearTimeout(this._schedulerJob);\n        this._schedulerJob = null;\n      }\n    }\n\n    if (params.poolPingInterval !== undefined) {\n      this._poolPingInterval = params.poolPingInterval;\n    }\n\n    if (params.stmtCacheSize !== undefined) {\n      this._stmtCacheSize = params.stmtCacheSize;\n    }\n\n    if (params.poolMax !== undefined) {\n      this._poolMax = params.poolMax;\n    }\n\n    if (params.poolMin !== undefined) {\n      this._poolMin = params.poolMin;\n    }\n\n    if (this.bgWaiter) {\n      this.bgWaiter();\n    }\n  }\n}\n\nmodule.exports = ThinPoolImpl;\n", "// Copyright (c) 2022, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst ThinConnectionImpl = require('./connection.js');\nconst ThinResultSetImpl = require('./resultSet.js');\nconst ThinPoolImpl = require('./pool.js');\nconst ThinLobImpl = require('./lob.js');\nconst { ThinDbObjectImpl } = require('./dbObject.js');\n\nconst impl = require('../impl');\nimpl.ConnectionImpl = ThinConnectionImpl;\nimpl.ResultSetImpl = ThinResultSetImpl;\nimpl.PoolImpl = ThinPoolImpl;\nimpl.LobImpl = ThinLobImpl;\nimpl.DbObjectImpl = ThinDbObjectImpl;\n", "// Copyright (c) 2015, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\n'use strict';\n\nconst constants = require('./constants.js');\nconst nodbUtil = require('./util.js');\nconst errors = require('./errors.js');\nconst types = require('./types.js');\nconst impl = require('./impl');\nconst process = require('process');\nconst util = require('util');\n\n// This version of node-oracledb works with Node.js 14.6 or later.\n// Note: the checked version is the minimum required for Node-API\n// compatibility.  When new Node.js versions are released, older Node.js\n// versions are dropped from the node-oracledb test plan.\n//\n// Keep this code in sync with package/install.js\nconst vs = process.version.substring(1).split(\".\").map(Number);\nerrors.assert(vs[0] > 14 || (vs[0] === 14 && vs[1] >= 6),\n  errors.ERR_NODE_TOO_OLD, nodbUtil.PACKAGE_JSON_VERSION, \"14.6\");\n\nconst AqDeqOptions = require('./aqDeqOptions.js');\nconst AqEnqOptions = require('./aqEnqOptions.js');\nconst AqMessage = require('./aqMessage.js');\nconst AqQueue = require('./aqQueue.js');\nconst future = require('./future.js');\nconst BaseDbObject = require('./dbObject.js');\nconst Connection = require('./connection.js');\nconst Lob = require('./lob.js');\nconst Pool = require('./pool.js');\nconst PoolStatistics = require('./poolStatistics.js');\nconst ResultSet = require('./resultset.js');\nconst settings = require('./settings.js');\nconst SodaDatabase = require('./sodaDatabase.js');\nconst SodaCollection = require('./sodaCollection.js');\nconst SodaDocCursor = require('./sodaDocCursor.js');\nconst SodaDocument = require('./sodaDocument.js');\nconst SodaOperation = require('./sodaOperation.js');\n\nconst poolCache = {};\nconst tempUsedPoolAliases = {};\nconst defaultPoolAlias = 'default';\n\n// save arguments for call to initOracleClient()\nlet _initOracleClientArgs;\n\n// Load the Oracledb binary\nfunction _initCLib(options) {\n  /*global __non_webpack_require__*/  // quieten eslint\n  const requireBinary = (typeof __non_webpack_require__ === 'function') ? __non_webpack_require__ : require; // See Issue 1156\n  const binaryLocations = [\n    '../' + nodbUtil.RELEASE_DIR + '/' + nodbUtil.BINARY_FILE,  // pre-built binary\n    '../' + nodbUtil.RELEASE_DIR + '/' + nodbUtil.BUILD_FILE,   // binary built from source\n    '../build/Debug/' + nodbUtil.BUILD_FILE,                    // debug binary\n    // Paths for Webpack.\n    // Note: to use node-oracledb Thick mode, you will need a Webpack copy plugin to\n    // copy 'node_modules/oracledb/build/' to the output directory,\n    // see https://github.com/oracle/node-oracledb/issues/1156\n    // If you want to use only node-oracledb Thin mode, a copy plugin is not needed.\n    './node_modules/oracledb/' + nodbUtil.RELEASE_DIR + '/' + nodbUtil.BINARY_FILE,\n    './node_modules/oracledb/' + nodbUtil.RELEASE_DIR + '/' + nodbUtil.BUILD_FILE\n  ];\n\n  if (options.binaryDir !== undefined) {\n    binaryLocations.splice(0, 0, options.binaryDir + '/' + nodbUtil.BINARY_FILE,\n      options.binaryDir + '/' + nodbUtil.BUILD_FILE);\n  }\n  let oracledbCLib;\n  for (let i = 0; i < binaryLocations.length; i++) {\n    try {\n      oracledbCLib = requireBinary(binaryLocations[i]);\n      break;\n    } catch (err) {\n      if (err.code !== 'MODULE_NOT_FOUND' || i == binaryLocations.length - 1) {\n        let nodeInfo;\n        if (err.code === 'MODULE_NOT_FOUND') {\n          // A binary was not found in any of the search directories.\n          // Note this message may not be accurate for Webpack users since Webpack changes __dirname\n          nodeInfo = `\\n  Looked for ${binaryLocations.map(x => require('path').resolve(__dirname, x)).join(', ')}\\n  ${nodbUtil.getInstallURL()}\\n`;\n        } else {\n          nodeInfo = `\\n  Node.js require('oracledb') error was:\\n  ${err.message}\\n  ${nodbUtil.getInstallHelp()}\\n`;\n        }\n        errors.throwErr(errors.ERR_CANNOT_LOAD_BINARY, nodeInfo);\n      }\n    }\n  }\n  return oracledbCLib;\n}\n\n// top-level functions\n\nfunction _initializeThinDriver() {\n  require('./thin');\n}\n\n//-----------------------------------------------------------------------------\n// _verifyOptions()\n//\n// Verify that the values passed by the user for connection and pool creation\n// options are acceptable. Performs any transformations that are necessary.\n//-----------------------------------------------------------------------------\nasync function _verifyOptions(options, inCreatePool) {\n\n  // define normalized options (value returned to caller)\n  const outOptions = {};\n\n  // only one of \"user\" and \"username\" may be specified (and must be strings)\n  if (options.user !== undefined) {\n    errors.assertParamPropValue(typeof options.user === 'string', 1, \"user\");\n    outOptions.user = options.user;\n  }\n  if (options.username !== undefined) {\n    errors.assert(outOptions.user === undefined, errors.ERR_DBL_USER);\n    errors.assertParamPropValue(typeof options.username === 'string', 1,\n      \"username\");\n    outOptions.user = options.username;\n  }\n\n  // password must be a string\n  if (options.password !== undefined) {\n    errors.assertParamPropValue(typeof options.password === 'string', 1,\n      \"password\");\n    outOptions.password = options.password;\n  }\n\n  // only one of \"connectString\" and \"connectionString\" may be specified (and\n  // must be strings)\n  if (options.connectString !== undefined) {\n    errors.assertParamPropValue(typeof options.connectString === 'string', 1,\n      \"connectString\");\n    outOptions.connectString = options.connectString;\n  }\n  if (options.connectionString !== undefined) {\n    errors.assert(outOptions.connectString === undefined,\n      errors.ERR_DBL_CONNECT_STRING);\n    errors.assertParamPropValue(typeof options.connectionString === 'string',\n      1, \"connectionString\");\n    outOptions.connectString = options.connectionString;\n  }\n\n  // wallet password must be string\n  if (options.walletPassword !== undefined) {\n    errors.assertParamPropValue(typeof options.walletPassword === 'string', 1,\n      \"walletPassword\");\n    outOptions.walletPassword = options.walletPassword;\n  }\n\n  //wallet location must be a string\n  if (options.walletLocation !== undefined) {\n    errors.assertParamPropValue(typeof options.walletLocation === 'string', 1,\n      \"walletLocation\");\n    outOptions.walletLocation = options.walletLocation;\n  }\n\n  // edition must be a string\n  if (options.edition !== undefined) {\n    errors.assertParamPropValue(typeof options.edition === 'string', 1,\n      \"edition\");\n    outOptions.edition = options.edition;\n  }\n\n  // stmtCacheSize must be an integer (>= 0)\n  if (options.stmtCacheSize !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.stmtCacheSize) &&\n      options.stmtCacheSize >= 0, 1, \"stmtCacheSize\");\n    outOptions.stmtCacheSize = options.stmtCacheSize;\n  }\n\n  // externalAuth must be a boolean\n  outOptions.externalAuth = settings.externalAuth;\n  if (options.externalAuth !== undefined) {\n    errors.assertParamPropValue(typeof options.externalAuth === 'boolean', 1,\n      \"externalAuth\");\n    outOptions.externalAuth = options.externalAuth;\n  }\n\n  // events must be a boolean\n  if (options.events !== undefined) {\n    errors.assertParamPropValue(typeof options.events === 'boolean', 1,\n      \"events\");\n    outOptions.events = options.events;\n  }\n\n  // poolAlias must be a string\n  if (options.poolAlias !== undefined) {\n    errors.assertParamPropValue(typeof options.poolAlias === 'string' &&\n      options.poolAlias.length > 0, 1, \"poolAlias\");\n    outOptions.poolAlias = options.poolAlias;\n  }\n\n  // configDir must be a string\n  if (options.configDir !== undefined) {\n    errors.assertParamPropValue(typeof options.configDir === 'string',\n      1, \"configDir\");\n    outOptions.configDir = options.configDir;\n  }\n\n  // sslServerServerCertDN must be a string\n  if (options.sslServerCertDN !== undefined) {\n    errors.assertParamPropValue(typeof options.sslServerCertDN === 'string',\n      1, \"sslServerCertDN\");\n    outOptions.sslServerCertDN = options.sslServerCertDN;\n  }\n\n  // sslServerServerDNMatch must be a boolean\n  if (options.sslServerDNMatch !== undefined) {\n    errors.assertParamPropValue(typeof options.sslServerDNMatch === 'boolean',\n      1, \"sslServerDNMatch\");\n    outOptions.sslServerDNMatch = options.sslServerDNMatch;\n  }\n\n  // sslAllowWeakDNMatch must be a boolean\n  if (options.sslAllowWeakDNMatch !== undefined) {\n    errors.assertParamPropValue(typeof options.sslAllowWeakDNMatch === 'boolean',\n      1, \"sslAllowWeakDNMatch\");\n    outOptions.sslAllowWeakDNMatch = options.sslAllowWeakDNMatch;\n  }\n  // httpsProxy must be a string\n  if (options.httpsProxy !== undefined) {\n    errors.assertParamPropValue(typeof options.httpsProxy === 'string',\n      1, \"httpsProxy\");\n    outOptions.httpsProxy = options.httpsProxy;\n  }\n\n  // httpsProxyPort must be an integer (>= 0)\n  if (options.httpsProxyPort !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.httpsProxyPort) &&\n      options.httpsProxyPort >= 0, 1, \"httpsProxyPort\");\n    outOptions.httpsProxyPort = options.httpsProxyPort;\n  }\n\n  //retryCount must be an integer (>=0)\n  if (options.retryCount !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.retryCount) &&\n    options.retryCount >= 0, 1, \"retryCount\");\n    outOptions.retryCount = options.retryCount;\n  }\n\n  //retryDelay must be an integer (>=0)\n  if (options.retryDelay !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.retryDelay) &&\n      options.retryDelay >= 0, 1, \"retryDelay\");\n    outOptions.retryDelay = options.retryDelay;\n  }\n\n  // connectTimeout must be an integer (>= 0)\n  if (options.connectTimeout !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.connectTimeout) &&\n    options.connectTimeout >= 0, 1, \"connectTimeout\");\n    outOptions.connectTimeout = options.connectTimeout;\n  }\n\n  // transportConnectTimeout must be an integer (>= 0)\n  if (options.transportConnectTimeout !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.transportConnectTimeout) &&\n    options.transportConnectTimeout >= 0, 1, \"transportConnectTimeout\");\n    outOptions.transportConnectTimeout = options.transportConnectTimeout;\n  }\n\n  // expireTime must be an integer (>= 0)\n  if (options.expireTime !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.expireTime) &&\n    options.expireTime >= 0, 1, \"expireTime\");\n    outOptions.expireTime = options.expireTime;\n\n  }\n\n  // sdu must be an integer (> 0)\n  if (options.sdu !== undefined) {\n    errors.assertParamPropValue(Number.isInteger(options.sdu) &&\n    options.sdu > 0, 1, \"sdu\");\n    outOptions.sdu = options.sdu;\n  }\n\n  // connectionIdPrefix must be a string\n  if (options.connectionIdPrefix !== undefined) {\n    errors.assertParamPropValue(typeof options.connectionIdPrefix === 'string',\n      1, \"connectionIdPrefix\");\n    outOptions.connectionIdPrefix = options.connectionIdPrefix;\n  }\n\n  // privilege must be one of a set of named constants\n  if (options.privilege !== undefined) {\n    errors.assertParamPropValue(nodbUtil.isPrivilege(options.privilege), 1,\n      \"privilege\");\n    outOptions.privilege = options.privilege;\n  }\n\n  // check pool specific options\n  if (inCreatePool) {\n\n    // poolMax must be an integer > 0\n    if (options.poolMax !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolMax) &&\n        options.poolMax > 0, 1, \"poolMax\");\n      outOptions.poolMax = options.poolMax;\n    }\n\n    // poolMaxPerShard must be an integer >= 0\n    if (options.poolMaxPerShard !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolMaxPerShard) &&\n        options.poolMaxPerShard >= 0, 1, \"poolMaxPerShard\");\n      outOptions.poolMaxPerShard = options.poolMaxPerShard;\n    }\n\n    // poolMin must be an integer >= 0\n    if (options.poolMin !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolMin) &&\n        options.poolMin >= 0, 1, \"poolMin\");\n      outOptions.poolMin = options.poolMin;\n    }\n\n    // poolIncrement must be an integer >= 0\n    if (options.poolIncrement !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolIncrement) &&\n        options.poolIncrement >= 0, 1, \"poolIncrement\");\n      outOptions.poolIncrement = options.poolIncrement;\n    }\n\n    // poolTimeout must be an integer >= 0\n    if (options.poolTimeout !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolTimeout) &&\n        options.poolTimeout >= 0, 1, \"poolTimeout\");\n      outOptions.poolTimeout = options.poolTimeout;\n    }\n\n    // poolPingInterval must be an integer\n    if (options.poolPingInterval !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolPingInterval) &&\n        options.poolPingInterval >= -2147483648 &&\n        options.poolPingInterval <= 2147483647, 1, \"poolPingInterval\");\n      outOptions.poolPingInterval = options.poolPingInterval;\n    }\n\n    // poolPingTimeout must be an integer (>= 0)\n    if (options.poolPingTimeout !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.poolPingTimeout) &&\n    options.poolPingTimeout >= 0, 1, \"poolPingTimeout\");\n      outOptions.poolPingTimeout = options.poolPingTimeout;\n    }\n\n    // homogeneous must be a boolean (and defaults to True)\n    outOptions.homogeneous = true;\n    if (options.homogeneous !== undefined) {\n      errors.assertParamPropValue(typeof options.homogeneous === 'boolean', 1,\n        \"homogeneous\");\n      outOptions.homogeneous = options.homogeneous;\n    }\n\n    // queueTimeout must be an integer >= 0\n    if (options.queueTimeout !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.queueTimeout) &&\n        options.queueTimeout >= 0, 1, \"queueTimeout\");\n      outOptions.queueTimeout = options.queueTimeout;\n    }\n\n    // queueMax must be an integer\n    if (options.queueMax !== undefined) {\n      errors.assertParamPropValue(Number.isInteger(options.queueMax), 1,\n        \"queueMax\");\n      outOptions.queueMax = options.queueMax;\n    }\n\n    // sodaMetaDataCache must be a boolean (and defaults to True)\n    outOptions.sodaMetaDataCache = false;\n    if (options.sodaMetaDataCache !== undefined) {\n      errors.assertParamPropValue(typeof options.sodaMetaDataCache ===\n        'boolean', 1, \"sodaMetaDataCache\");\n      outOptions.sodaMetaDataCache = options.sodaMetaDataCache;\n    }\n\n    // sessionCallback must be a function or a string\n    if (options.sessionCallback !== undefined) {\n      errors.assertParamPropValue(typeof options.sessionCallback === 'string' ||\n        typeof options.sessionCallback === 'function', 1, \"sessionCallback\");\n      outOptions.sessionCallback = options.sessionCallback;\n    }\n\n    // enableStatistics must be a boolean (_enableStats is DEPRECATED)\n    outOptions.enableStatistics = false;\n    if (options.enableStatistics !== undefined) {\n      errors.assertParamPropValue(typeof options.enableStatistics ===\n        'boolean', 1, \"enableStatistics\");\n      outOptions.enableStatistics = options.enableStatistics;\n    }\n    if (!outOptions.enableStatistics && options._enableStats !== undefined) {\n      errors.assertParamPropValue(typeof options._enableStats === 'boolean', 1,\n        \"_enableStats\");\n      outOptions.enableStatistics = options._enableStats;\n    }\n\n  // check connection creation specific options\n  } else {\n\n    // newPassword must be a string\n    if (options.newPassword !== undefined) {\n      errors.assertParamPropValue(typeof options.newPassword === 'string', 1,\n        \"newPassword\");\n      outOptions.newPassword = options.newPassword;\n    }\n\n    // shardingKey must be an array of values\n    if (options.shardingKey !== undefined) {\n      const value = options.shardingKey;\n      errors.assertParamPropValue(nodbUtil.isShardingKey(value), 1,\n        \"shardingKey\");\n      outOptions.shardingKey = options.shardingKey;\n    }\n\n    // superShardingKey must be an array of values\n    if (options.superShardingKey !== undefined) {\n      const value = options.superShardingKey;\n      errors.assertParamPropValue(nodbUtil.isShardingKey(value), 1,\n        \"superShardingKey\");\n      outOptions.superShardingKey = options.superShardingKey;\n    }\n\n  }\n\n  // check access token\n  if (options.accessToken !== undefined) {\n\n    // cannot set username or password for token based authentication\n    errors.assert(outOptions.user === undefined &&\n      outOptions.password === undefined, errors.ERR_TOKEN_BASED_AUTH);\n\n    // homogenous (for pool) and externalAuth (both) must be set\n    if (inCreatePool) {\n      errors.assert(outOptions.homogeneous && outOptions.externalAuth,\n        errors.ERR_POOL_TOKEN_BASED_AUTH);\n    } else {\n      errors.assert(outOptions.externalAuth, errors.ERR_CONN_TOKEN_BASED_AUTH);\n    }\n\n    // check the token is valid\n    let accessToken;\n    if (typeof options.accessToken === 'function') {\n      outOptions.accessTokenFn = options.accessToken;\n      outOptions.accessTokenConfig = options.accessTokenConfig;\n      accessToken = await options.accessToken(false, options.accessTokenConfig);\n      if (!nodbUtil.isTokenValid(accessToken)) {\n        accessToken = await options.accessToken(true, options.accessTokenConfig);\n      }\n    } else {\n      accessToken = options.accessToken;\n    }\n    errors.assert(nodbUtil.isTokenValid(accessToken),\n      errors.ERR_TOKEN_HAS_EXPIRED);\n    if (accessToken.privateKey !== undefined) {\n      errors.assert(typeof accessToken.privateKey === 'string', errors.ERR_TOKEN_BASED_AUTH);\n      accessToken.privateKey = nodbUtil.denormalizePrivateKey(accessToken.privateKey);\n    }\n\n    // store token and privatekey\n    if (typeof accessToken === 'string') {\n      outOptions.token = accessToken;\n    } else {\n      outOptions.token = accessToken.token;\n      outOptions.privateKey = accessToken.privateKey;\n    }\n\n  }\n\n  // Check external Auth config.\n  // Allow Session User enclosed in [] for proxy authentication.\n  if (outOptions.token === undefined && outOptions.externalAuth) {\n    if (outOptions.password) {\n      errors.throwErr(errors.ERR_WRONG_CRED_FOR_EXTAUTH);\n    }\n    if (outOptions.user) {\n      if (inCreatePool) {\n        errors.throwErr(errors.ERR_WRONG_CRED_FOR_EXTAUTH);\n      } else if (outOptions.user[0] !== '[' || outOptions.user.slice(-1) !== ']') {\n        // username is not enclosed in [].\n        errors.throwErr(errors.ERR_WRONG_USER_FORMAT_EXTAUTH_PROXY);\n      }\n    }\n  }\n\n  return outOptions;\n}\n\n\n//-----------------------------------------------------------------------------\n// createPool()\n//\n// Create a pool with the specified options and return it to the caller.\n//-----------------------------------------------------------------------------\nasync function createPool(options) {\n  let poolAlias;\n\n  // check arguments\n  errors.assertArgCount(arguments, 1, 1);\n  errors.assertParamValue(nodbUtil.isObject(options), 1);\n  options = await _verifyOptions(options, true);\n  const sessionCallback = options.sessionCallback;\n  if (typeof sessionCallback === 'function')\n    delete options.sessionCallback;\n\n  // determine pool alias\n  if (options.poolAlias !== undefined) {\n    poolAlias = options.poolAlias;\n  } else if (options.poolAlias === undefined\n      && !poolCache[defaultPoolAlias]\n      && !tempUsedPoolAliases[defaultPoolAlias]) {\n    poolAlias = defaultPoolAlias;\n  }\n  if (poolCache[poolAlias] || tempUsedPoolAliases[poolAlias]) {\n    errors.throwErr(errors.ERR_POOL_WITH_ALIAS_ALREADY_EXISTS, poolAlias);\n  }\n\n  // add defaults to options, if needed\n  settings.addToOptions(options,\n    \"connectionClass\",\n    \"edition\",\n    \"events\",\n    \"externalAuth\",\n    \"stmtCacheSize\",\n    \"poolMax\",\n    \"poolMaxPerShard\",\n    \"poolMin\",\n    \"poolIncrement\",\n    \"poolTimeout\",\n    \"poolPingInterval\",\n    \"poolPingTimeout\",\n    \"queueMax\",\n    \"queueTimeout\");\n\n  // poolMax must be greater than or equal to poolMin\n  if (options.poolMin > options.poolMax) {\n    errors.throwErr(errors.ERR_INVALID_NUMBER_OF_CONNECTIONS, options.poolMax,\n      options.poolMin);\n  }\n\n  // initialize the Oracle client, if necessary\n  if (_initOracleClientArgs === undefined && !settings.thinDriverInitialized) {\n    _initializeThinDriver();\n  }\n\n  // Need to prevent another call in the same stack from succeeding, otherwise\n  // two pools could be created with the same poolAlias and the second one that\n  // comes back would overwrite the first in the cache.\n  if (poolAlias) {\n    tempUsedPoolAliases[poolAlias] = true;\n  }\n\n  // create the pool, ensuring that the temporary pool alias cache is removed\n  // once this has completed (either successfully or unsuccessfully)\n  const pool = new Pool();\n  try {\n    await pool._impl.create(options);\n  } finally {\n    if (poolAlias) {\n      delete tempUsedPoolAliases[poolAlias];\n    }\n  }\n\n  if (poolAlias) {\n    poolCache[poolAlias] = pool;\n  }\n\n  pool._setup(options, poolAlias);\n  pool._sessionCallback = sessionCallback;\n  pool.on('_afterPoolClose', () => {\n    if (pool.poolAlias) {\n      delete poolCache[pool.poolAlias];\n    }\n  });\n  if (_initOracleClientArgs === undefined) {\n    settings.thinDriverInitialized = true;\n  }\n\n  return pool;\n}\n\n\n//-----------------------------------------------------------------------------\n// getConnection()\n//\n// Gets either a standalone connection, or a connection from a pool (stored in\n// the pool cache).\n//-----------------------------------------------------------------------------\nasync function getConnection(a1) {\n  let options = {};\n  let poolAlias;\n\n  // determine if the connection should be acquired from a pool\n  errors.assertArgCount(arguments, 0, 1);\n  if (arguments.length == 0) {\n    poolAlias = defaultPoolAlias;\n  } else if (typeof a1 === 'string') {\n    poolAlias = a1;\n  } else {\n    options = a1;\n    errors.assertParamValue(nodbUtil.isObject(options), 1);\n    poolAlias = options.poolAlias;\n  }\n  if (poolAlias) {\n    const pool = poolCache[poolAlias];\n    errors.assert(pool, errors.ERR_POOL_WITH_ALIAS_NOT_FOUND, poolAlias);\n    return await pool.getConnection(options);\n  }\n\n  // create a standalone connection\n  options = await _verifyOptions(options, false);\n  settings.addToOptions(options,\n    \"connectionClass\",\n    \"edition\",\n    \"events\",\n    \"externalAuth\",\n    \"stmtCacheSize\");\n  if (_initOracleClientArgs === undefined && !settings.thinDriverInitialized) {\n    _initializeThinDriver();\n  }\n\n  const conn = new Connection();\n  conn._impl = new impl.ConnectionImpl();\n  await conn._impl.connect(options);\n  if (_initOracleClientArgs === undefined) {\n    settings.thinDriverInitialized = true;\n  }\n  return conn;\n}\n\n//-----------------------------------------------------------------------------\n// getPool()\n//\n// Returns a pool for the given alias.\n//-----------------------------------------------------------------------------\nfunction getPool(poolAlias) {\n\n  errors.assertArgCount(arguments, 0, 1);\n\n  if (poolAlias) {\n    errors.assertParamValue(typeof poolAlias === 'string' ||\n        typeof poolAlias === 'number', 1);\n  }\n\n  poolAlias = poolAlias || defaultPoolAlias;\n\n  const pool = poolCache[poolAlias];\n\n  if (!pool) {\n    errors.throwErr(errors.ERR_POOL_WITH_ALIAS_NOT_FOUND, poolAlias);\n  }\n\n  return pool;\n}\n\n//-----------------------------------------------------------------------------\n// initOracleClient()\n//\n// Initializes the Oracle Client.\n//-----------------------------------------------------------------------------\nfunction initOracleClient(arg1) {\n  let options = {};\n  errors.assertArgCount(arguments, 0, 1);\n  if (arg1 !== undefined) {\n    errors.assertParamValue(nodbUtil.isObject(arg1), 1);\n    options = {...arg1};\n    errors.assertParamPropString(options, 1, \"libDir\");\n    errors.assertParamPropString(options, 1, \"configDir\");\n    errors.assertParamPropString(options, 1, \"errorUrl\");\n    errors.assertParamPropString(options, 1, \"driverName\");\n    errors.assertParamPropString(options, 1, \"binaryDir\");\n  }\n  if (settings.thinDriverInitialized) {\n    errors.throwErr(errors.ERR_THIN_CONNECTION_ALREADY_CREATED);\n  }\n  if (_initOracleClientArgs === undefined) {\n    const oracledbCLib = _initCLib(options);\n    if (options.driverName === undefined)\n      options.driverName = constants.DEFAULT_DRIVER_NAME + \" thk\";\n    if (options.errorUrl === undefined)\n      options.errorUrl = constants.DEFAULT_ERROR_URL;\n    try {\n      oracledbCLib.initOracleClient(options, impl, settings);\n    } catch (err) {\n      const newErr = errors.transformErr(err);\n      if (newErr.code === \"DPI-1047\") {\n        newErr.message += \"\\n\" + nodbUtil.getInstallHelp();\n      }\n      throw newErr;\n    }\n    _initOracleClientArgs = arg1 || {};\n  } else if (!util.isDeepStrictEqual(_initOracleClientArgs, options)) {\n    errors.throwErr(errors.ERR_INIT_ORACLE_CLIENT_ARGS);\n  }\n\n  // driver mode initialization\n  // _initOracleClientArgs is populated and thin connection not created\n  settings.thin = false;\n}\n\n\n//-----------------------------------------------------------------------------\n// shutdown()\n//\n// Shuts down the database.\n//-----------------------------------------------------------------------------\nasync function shutdown(a1, a2) {\n  let connAttr = {};\n  let shutdownMode = constants.SHUTDOWN_MODE_DEFAULT;\n\n  // verify the number and types of arguments\n  errors.assertArgCount(arguments, 0, 2);\n  if (arguments.length == 2) {\n    errors.assertParamValue(typeof a1 === 'object', 1);\n    errors.assertParamValue(typeof a2 === 'number', 2);\n    connAttr = a1;\n    shutdownMode = a2;\n  } else if (arguments.length == 1) {\n    errors.assertParamValue(typeof a1 === 'object', 1);\n    connAttr = a1;\n  }\n\n  // only look for the keys that are used for shutting down the database\n  // use SYSOPER privilege\n  const dbConfig = {\n    user: connAttr.user,\n    password: connAttr.password,\n    connectString: connAttr.connectString,\n    connectionString: connAttr.connectionString,\n    externalAuth: connAttr.externalAuth,\n    privilege: constants.SYSOPER\n  };\n\n  const conn = await this.getConnection(dbConfig);\n  await conn.shutdown(shutdownMode);\n  if (shutdownMode != this.SHUTDOWN_MODE_ABORT) {\n    await conn.execute(\"ALTER DATABASE CLOSE\");\n    await conn.execute(\"ALTER DATABASE DISMOUNT\");\n    await conn.shutdown(this.SHUTDOWN_MODE_FINAL);\n  }\n  await conn.close();\n}\n\n\n//-----------------------------------------------------------------------------\n// startup()\n//\n// Starts up the database.\n//-----------------------------------------------------------------------------\nasync function startup(a1, a2) {\n  let connAttr = {};\n  let startupAttr = {};\n\n  // verify the number and types of arguments\n  errors.assertArgCount(arguments, 0, 2);\n  if (arguments.length == 2) {\n    errors.assertParamValue(typeof a1 === 'object', 1);\n    errors.assertParamValue(typeof a2 === 'object', 2);\n    connAttr = a1;\n    startupAttr = a2;\n  } else if (arguments.length == 1) {\n    errors.assertParamValue(typeof a1 === 'object', 1);\n    connAttr = a1;\n  }\n\n  // only look for the keys that are used for starting up the database\n  // use SYSOPER and SYSPRELIM privileges\n  const dbConfig = {\n    user: connAttr.user,\n    password: connAttr.password,\n    connectString: connAttr.connectString,\n    connectionString: connAttr.connectionString,\n    externalAuth: connAttr.externalAuth,\n    privilege: this.SYSOPER | this.SYSPRELIM\n  };\n\n  let conn = await this.getConnection(dbConfig);\n  await conn.startup(startupAttr);\n  await conn.close();\n\n  dbConfig.privilege = this.SYSOPER;\n  conn = await this.getConnection(dbConfig);\n  await conn.execute(\"ALTER DATABASE MOUNT\");\n  await conn.execute(\"ALTER DATABASE OPEN\");\n  await conn.close();\n}\n\n// module exports\nmodule.exports = {\n\n  // classes\n  AqDeqOptions,\n  AqEnqOptions,\n  AqMessage,\n  AqQueue,\n  BaseDbObject,\n  Connection,\n  JsonId: types.JsonId,\n  Lob,\n  Pool,\n  PoolStatistics,\n  ResultSet,\n  SodaDatabase,\n  SodaCollection,\n  SodaDocCursor,\n  SodaDocument,\n  SodaOperation,\n\n  // top-level functions\n  getConnection: nodbUtil.callbackify(getConnection),\n  createPool: nodbUtil.callbackify(createPool),\n  getPool,\n  initOracleClient,\n  shutdown: nodbUtil.callbackify(shutdown),\n  startup: nodbUtil.callbackify(startup),\n\n  // CQN operation codes\n  CQN_OPCODE_ALL_OPS: constants.CQN_OPCODE_ALL_OPS,\n  CQN_OPCODE_ALL_ROWS: constants.CQN_OPCODE_ALL_ROWS,\n  CQN_OPCODE_ALTER: constants.CQN_OPCODE_ALTER,\n  CQN_OPCODE_DELETE: constants.CQN_OPCODE_DELETE,\n  CQN_OPCODE_DROP: constants.CQN_OPCODE_DROP,\n  CQN_OPCODE_INSERT: constants.CQN_OPCODE_INSERT,\n  CQN_OPCODE_UPDATE: constants.CQN_OPCODE_UPDATE,\n\n  // database types\n  DB_TYPE_BFILE: types.DB_TYPE_BFILE,\n  DB_TYPE_BINARY_DOUBLE: types.DB_TYPE_BINARY_DOUBLE,\n  DB_TYPE_BINARY_FLOAT: types.DB_TYPE_BINARY_FLOAT,\n  DB_TYPE_BINARY_INTEGER: types.DB_TYPE_BINARY_INTEGER,\n  DB_TYPE_BLOB: types.DB_TYPE_BLOB,\n  DB_TYPE_BOOLEAN: types.DB_TYPE_BOOLEAN,\n  DB_TYPE_CHAR: types.DB_TYPE_CHAR,\n  DB_TYPE_CLOB: types.DB_TYPE_CLOB,\n  DB_TYPE_CURSOR: types.DB_TYPE_CURSOR,\n  DB_TYPE_DATE: types.DB_TYPE_DATE,\n  DB_TYPE_INTERVAL_DS: types.DB_TYPE_INTERVAL_DS,\n  DB_TYPE_INTERVAL_YM: types.DB_TYPE_INTERVAL_YM,\n  DB_TYPE_JSON: types.DB_TYPE_JSON,\n  DB_TYPE_LONG: types.DB_TYPE_LONG,\n  DB_TYPE_LONG_NVARCHAR: types.DB_TYPE_LONG_NVARCHAR,\n  DB_TYPE_LONG_RAW: types.DB_TYPE_LONG_RAW,\n  DB_TYPE_NCHAR: types.DB_TYPE_NCHAR,\n  DB_TYPE_NCLOB: types.DB_TYPE_NCLOB,\n  DB_TYPE_NUMBER: types.DB_TYPE_NUMBER,\n  DB_TYPE_NVARCHAR: types.DB_TYPE_NVARCHAR,\n  DB_TYPE_OBJECT: types.DB_TYPE_OBJECT,\n  DB_TYPE_RAW: types.DB_TYPE_RAW,\n  DB_TYPE_ROWID: types.DB_TYPE_ROWID,\n  DB_TYPE_TIMESTAMP: types.DB_TYPE_TIMESTAMP,\n  DB_TYPE_TIMESTAMP_LTZ: types.DB_TYPE_TIMESTAMP_LTZ,\n  DB_TYPE_TIMESTAMP_TZ: types.DB_TYPE_TIMESTAMP_TZ,\n  DB_TYPE_VARCHAR: types.DB_TYPE_VARCHAR,\n  DB_TYPE_XMLTYPE: types.DB_TYPE_XMLTYPE,\n  DB_TYPE_VECTOR: types.DB_TYPE_VECTOR,\n\n  // fetchInfo type defaulting\n  DEFAULT: constants.DEFAULT,\n\n  // statement types\n  STMT_TYPE_UNKNOWN: constants.STMT_TYPE_UNKNOWN,\n  STMT_TYPE_SELECT: constants.STMT_TYPE_SELECT,\n  STMT_TYPE_UPDATE: constants.STMT_TYPE_UPDATE,\n  STMT_TYPE_DELETE: constants.STMT_TYPE_DELETE,\n  STMT_TYPE_INSERT: constants.STMT_TYPE_INSERT,\n  STMT_TYPE_CREATE: constants.STMT_TYPE_CREATE,\n  STMT_TYPE_DROP: constants.STMT_TYPE_DROP,\n  STMT_TYPE_ALTER: constants.STMT_TYPE_ALTER,\n  STMT_TYPE_BEGIN: constants.STMT_TYPE_BEGIN,\n  STMT_TYPE_DECLARE: constants.STMT_TYPE_DECLARE,\n  STMT_TYPE_CALL: constants.STMT_TYPE_CALL,\n  STMT_TYPE_EXPLAIN_PLAN: constants.STMT_TYPE_EXPLAIN_PLAN,\n  STMT_TYPE_MERGE: constants.STMT_TYPE_MERGE,\n  STMT_TYPE_ROLLBACK: constants.STMT_TYPE_ROLLBACK,\n  STMT_TYPE_COMMIT: constants.STMT_TYPE_COMMIT,\n\n  // shutdown modes\n  SHUTDOWN_MODE_DEFAULT: constants.SHUTDOWN_MODE_DEFAULT,\n  SHUTDOWN_MODE_TRANSACTIONAL: constants.SHUTDOWN_MODE_TRANSACTIONAL,\n  SHUTDOWN_MODE_TRANSACTIONAL_LOCAL:\n      constants.SHUTDOWN_MODE_TRANSACTIONAL_LOCAL,\n  SHUTDOWN_MODE_IMMEDIATE: constants.SHUTDOWN_MODE_IMMEDIATE,\n  SHUTDOWN_MODE_ABORT: constants.SHUTDOWN_MODE_ABORT,\n  SHUTDOWN_MODE_FINAL: constants.SHUTDOWN_MODE_FINAL,\n\n  // startup modes\n  STARTUP_MODE_DEFAULT: constants.STARTUP_MODE_DEFAULT,\n  STARTUP_MODE_FORCE: constants.STARTUP_MODE_FORCE,\n  STARTUP_MODE_RESTRICT: constants.STARTUP_MODE_RESTRICT,\n\n  // subscription event types\n  SUBSCR_EVENT_TYPE_SHUTDOWN: constants.SUBSCR_EVENT_TYPE_SHUTDOWN,\n  SUBSCR_EVENT_TYPE_SHUTDOWN_ANY: constants.SUBSCR_EVENT_TYPE_SHUTDOWN_ANY,\n  SUBSCR_EVENT_TYPE_STARTUP: constants.SUBSCR_EVENT_TYPE_STARTUP,\n  SUBSCR_EVENT_TYPE_DEREG: constants.SUBSCR_EVENT_TYPE_DEREG,\n  SUBSCR_EVENT_TYPE_OBJ_CHANGE: constants.SUBSCR_EVENT_TYPE_OBJ_CHANGE,\n  SUBSCR_EVENT_TYPE_QUERY_CHANGE: constants.SUBSCR_EVENT_TYPE_QUERY_CHANGE,\n  SUBSCR_EVENT_TYPE_AQ: constants.SUBSCR_EVENT_TYPE_AQ,\n\n  // subscription grouping classes\n  SUBSCR_GROUPING_CLASS_TIME: constants.SUBSCR_GROUPING_CLASS_TIME,\n\n  // subscription grouping types\n  SUBSCR_GROUPING_TYPE_SUMMARY: constants.SUBSCR_GROUPING_TYPE_SUMMARY,\n  SUBSCR_GROUPING_TYPE_LAST: constants.SUBSCR_GROUPING_TYPE_LAST,\n\n  // subscription namespaces\n  SUBSCR_NAMESPACE_AQ: constants.SUBSCR_NAMESPACE_AQ,\n  SUBSCR_NAMESPACE_DBCHANGE: constants.SUBSCR_NAMESPACE_DBCHANGE,\n\n  // subscription quality of service flags\n  SUBSCR_QOS_BEST_EFFORT: constants.SUBSCR_QOS_BEST_EFFORT,\n  SUBSCR_QOS_DEREG_NFY: constants.SUBSCR_QOS_DEREG_NFY,\n  SUBSCR_QOS_QUERY: constants.SUBSCR_QOS_QUERY,\n  SUBSCR_QOS_RELIABLE: constants.SUBSCR_QOS_RELIABLE,\n  SUBSCR_QOS_ROWIDS: constants.SUBSCR_QOS_ROWIDS,\n\n  // privileges\n  SYSASM: constants.SYSASM,\n  SYSBACKUP: constants.SYSBACKUP,\n  SYSDBA: constants.SYSDBA,\n  SYSDG: constants.SYSDG,\n  SYSKM: constants.SYSKM,\n  SYSOPER: constants.SYSOPER,\n  SYSPRELIM: constants.SYSPRELIM,\n  SYSRAC: constants.SYSRAC,\n\n  // bind directions\n  BIND_IN: constants.BIND_IN,\n  BIND_INOUT: constants.BIND_INOUT,\n  BIND_OUT: constants.BIND_OUT,\n\n  // outFormat values\n  OUT_FORMAT_ARRAY: constants.OUT_FORMAT_ARRAY,\n  OUT_FORMAT_OBJECT: constants.OUT_FORMAT_OBJECT,\n\n  // SODA collection creation modes\n  SODA_COLL_MAP_MODE: constants.SODA_COLL_MAP_MODE,\n\n  // pool statuses\n  POOL_STATUS_OPEN: constants.POOL_STATUS_OPEN,\n  POOL_STATUS_DRAINING: constants.POOL_STATUS_DRAINING,\n  POOL_STATUS_CLOSED: constants.POOL_STATUS_CLOSED,\n  POOL_STATUS_RECONFIGURING: constants.POOL_STATUS_RECONFIGURING,\n\n  // AQ dequeue wait options\n  AQ_DEQ_NO_WAIT: constants.AQ_DEQ_NO_WAIT,\n  AQ_DEQ_WAIT_FOREVER: constants.AQ_DEQ_WAIT_FOREVER,\n\n  // AQ dequeue modes\n  AQ_DEQ_MODE_BROWSE: constants.AQ_DEQ_MODE_BROWSE,\n  AQ_DEQ_MODE_LOCKED: constants.AQ_DEQ_MODE_LOCKED,\n  AQ_DEQ_MODE_REMOVE: constants.AQ_DEQ_MODE_REMOVE,\n  AQ_DEQ_MODE_REMOVE_NO_DATA: constants.AQ_DEQ_MODE_REMOVE_NO_DATA,\n\n  // AQ dequeue navigation flags\n  AQ_DEQ_NAV_FIRST_MSG: constants.AQ_DEQ_NAV_FIRST_MSG,\n  AQ_DEQ_NAV_NEXT_TRANSACTION: constants.AQ_DEQ_NAV_NEXT_TRANSACTION,\n  AQ_DEQ_NAV_NEXT_MSG: constants.AQ_DEQ_NAV_NEXT_MSG,\n\n  // AQ message delivery modes\n  AQ_MSG_DELIV_MODE_PERSISTENT: constants.AQ_MSG_DELIV_MODE_PERSISTENT,\n  AQ_MSG_DELIV_MODE_BUFFERED: constants.AQ_MSG_DELIV_MODE_BUFFERED,\n  AQ_MSG_DELIV_MODE_PERSISTENT_OR_BUFFERED:\n      constants.AQ_MSG_DELIV_MODE_PERSISTENT_OR_BUFFERED,\n\n  // AQ message states\n  AQ_MSG_STATE_READY: constants.AQ_MSG_STATE_READY,\n  AQ_MSG_STATE_WAITING: constants.AQ_MSG_STATE_WAITING,\n  AQ_MSG_STATE_PROCESSED: constants.AQ_MSG_STATE_PROCESSED,\n  AQ_MSG_STATE_EXPIRED: constants.AQ_MSG_STATE_EXPIRED,\n\n  // AQ visibility flags\n  AQ_VISIBILITY_IMMEDIATE: constants.AQ_VISIBILITY_IMMEDIATE,\n  AQ_VISIBILITY_ON_COMMIT: constants.AQ_VISIBILITY_ON_COMMIT,\n\n  // TPC/XA begin flags Constants\n  TPC_BEGIN_JOIN: constants.TPC_BEGIN_JOIN,\n  TPC_BEGIN_NEW: constants.TPC_BEGIN_NEW,\n  TPC_BEGIN_PROMOTE: constants.TPC_BEGIN_PROMOTE,\n  TPC_BEGIN_RESUME: constants.TPC_BEGIN_RESUME,\n\n  // TPC/XA two-phase commit flags\n  TPC_END_NORMAL: constants.TPC_END_NORMAL,\n  TPC_END_SUSPEND: constants.TPC_END_SUSPEND,\n\n  // vector types\n  VECTOR_FORMAT_FLOAT32: constants.VECTOR_FORMAT_FLOAT32,\n  VECTOR_FORMAT_FLOAT64: constants.VECTOR_FORMAT_FLOAT64,\n  VECTOR_FORMAT_INT8: constants.VECTOR_FORMAT_INT8,\n\n  // database type aliases\n  BLOB: types.DB_TYPE_BLOB,\n  BUFFER: types.DB_TYPE_RAW,\n  CLOB: types.DB_TYPE_CLOB,\n  CURSOR: types.DB_TYPE_CURSOR,\n  DATE: types.DB_TYPE_TIMESTAMP,\n  NCLOB: types.DB_TYPE_NCLOB,\n  NUMBER: types.DB_TYPE_NUMBER,\n  STRING: types.DB_TYPE_VARCHAR,\n\n  // outFormat aliases\n  ARRAY: constants.OUT_FORMAT_ARRAY,\n  OBJECT: constants.OUT_FORMAT_OBJECT,\n\n  // Instances\n  future,\n\n  // property getters\n  get autoCommit() {\n    return settings.autoCommit;\n  },\n\n  get connectionClass() {\n    return settings.connectionClass;\n  },\n\n  get dbObjectAsPojo() {\n    return settings.dbObjectAsPojo;\n  },\n\n  get edition() {\n    return settings.edition;\n  },\n\n  get errorOnConcurrentExecute() {\n    return settings.errorOnConcurrentExecute;\n  },\n\n  get events() {\n    return settings.events;\n  },\n\n  get externalAuth() {\n    return settings.externalAuth;\n  },\n\n  get fetchArraySize() {\n    return settings.fetchArraySize;\n  },\n\n  get fetchAsBuffer() {\n    return settings.fetchAsBuffer;\n  },\n\n  get fetchAsString() {\n    return settings.fetchAsString;\n  },\n\n  get fetchTypeHandler() {\n    return settings.fetchTypeHandler;\n  },\n\n  get lobPrefetchSize() {\n    return settings.lobPrefetchSize;\n  },\n\n  get maxRows() {\n    return settings.maxRows;\n  },\n\n  get oracleClientVersion() {\n    return settings.oracleClientVersion;\n  },\n\n  get oracleClientVersionString() {\n    return settings.oracleClientVersionString;\n  },\n\n  get outFormat() {\n    return settings.outFormat;\n  },\n\n  get poolIncrement() {\n    return settings.poolIncrement;\n  },\n\n  get poolMax() {\n    return settings.poolMax;\n  },\n\n  get poolMaxPerShard() {\n    return settings.poolMaxPerShard;\n  },\n\n  get poolMin() {\n    return settings.poolMin;\n  },\n\n  get poolPingInterval() {\n    return settings.poolPingInterval;\n  },\n\n  get poolPingTimeout() {\n    return settings.poolPingTimeout;\n  },\n\n  get poolTimeout() {\n    return settings.poolTimeout;\n  },\n\n  get prefetchRows() {\n    return settings.prefetchRows;\n  },\n\n  get stmtCacheSize() {\n    return settings.stmtCacheSize;\n  },\n\n  get thin() {\n    return settings.thin;\n  },\n\n  get version() {\n    return constants.VERSION_MAJOR * 10000 + constants.VERSION_MINOR * 100 +\n        constants.VERSION_PATCH;\n  },\n\n  get versionString() {\n    return constants.VERSION_STRING;\n  },\n\n  get versionSuffix() {\n    return constants.VERSION_SUFFIX;\n  },\n\n  // property setters\n  set autoCommit(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"autoCommit\");\n    settings.autoCommit = value;\n  },\n\n  set connectionClass(value) {\n    errors.assertPropValue(typeof value === 'string', \"connectionClass\");\n    settings.connectionClass = value;\n  },\n\n  set dbObjectAsPojo(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"dbObjectAsPojo\");\n    settings.dbObjectAsPojo = value;\n  },\n\n  set edition(value) {\n    errors.assertPropValue(typeof value === 'string', \"edition\");\n    settings.edition = value;\n  },\n\n  set errorOnConcurrentExecute(value) {\n    errors.assertPropValue(typeof value === 'boolean',\n      \"errorOnConcurrentExecute\");\n    settings.errorOnConcurrentExecute = value;\n  },\n\n  set events(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"events\");\n    settings.events = value;\n  },\n\n  set externalAuth(value) {\n    errors.assertPropValue(typeof value === 'boolean', \"externalAuth\");\n    settings.externalAuth = value;\n  },\n\n  set fetchArraySize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value > 0,\n      \"fetchArraySize\");\n    settings.fetchArraySize = value;\n  },\n\n  set fetchAsBuffer(value) {\n    errors.assertPropValue(Array.isArray(value), \"fetchAsBuffer\");\n    settings.createFetchTypeMap(settings.fetchAsString, value);\n    settings.fetchAsBuffer = value;\n  },\n\n  set fetchAsString(value) {\n    errors.assertPropValue(Array.isArray(value), \"fetchAsString\");\n    settings.createFetchTypeMap(value, settings.fetchAsBuffer);\n    settings.fetchAsString = value;\n  },\n\n  set fetchTypeHandler(value) {\n    if (value !== undefined) {\n      errors.assertPropValue(typeof value === 'function', \"fetchTypeHandler\");\n    }\n    settings.fetchTypeHandler = value;\n  },\n\n  set lobPrefetchSize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"lobPrefetchSize\");\n    settings.lobPrefetchSize = value;\n  },\n\n  set maxRows(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"maxRows\");\n    settings.maxRows = value;\n  },\n\n  set outFormat(value) {\n    if (value !== constants.OUT_FORMAT_ARRAY &&\n        value !== constants.OUT_FORMAT_OBJECT) {\n      errors.throwErr(errors.ERR_INVALID_PROPERTY_VALUE, \"outFormat\");\n    }\n    settings.outFormat = value;\n  },\n\n  set poolIncrement(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"poolIncrement\");\n    settings.poolIncrement = value;\n  },\n\n  set poolMax(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"poolMax\");\n    settings.poolMax = value;\n  },\n\n  set poolMaxPerShard(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"poolMaxPerShard\");\n    settings.poolMaxPerShard = value;\n  },\n\n  set poolMin(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0, \"poolMin\");\n    settings.poolMin = value;\n  },\n\n  set poolPingInterval(value) {\n    errors.assertPropValue(Number.isInteger(value) && value < 2 ** 31 &&\n        value >= (-2) ** 31, \"poolPingInterval\");\n    settings.poolPingInterval = value;\n  },\n\n  set poolPingTimeout(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"poolPingTimeout\");\n    settings.poolPingTimeout = value;\n  },\n\n  set poolTimeout(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"poolTimeout\");\n    settings.poolTimeout = value;\n  },\n\n  set prefetchRows(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"prefetchRows\");\n    settings.prefetchRows = value;\n  },\n\n  set stmtCacheSize(value) {\n    errors.assertPropValue(Number.isInteger(value) && value >= 0,\n      \"stmtCacheSize\");\n    settings.stmtCacheSize = value;\n  },\n\n};\n", "// Copyright (c) 2015, 2023, Oracle and/or its affiliates.\n\n//-----------------------------------------------------------------------------\n//\n// This software is dual-licensed to you under the Universal Permissive License\n// (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl and Apache License\n// 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose\n// either license.\n//\n// If you elect to accept the software under the Apache License, Version 2.0,\n// the following applies:\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n//-----------------------------------------------------------------------------\n\nmodule.exports = require('./lib/oracledb.js');\n"],
  "mappings": "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AU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,mBAAmB,UAAU,sBAAsB;AAAA,MAC3F,CAAC,UAAU,mBAAmB,UAAU,m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",
  "names": ["require_constants", "require_buffer", "Buffer", "Buffer", "require_util", "Buffer", "process", "require_lob", "Buffer", "Buffer", "encoder", "require_aqDeqOptions", "Buffer", "require_aqEnqOptions", "require_aqMessage", "process", "require_resultset", "Buffer", "outValue", "require_dbObject", "result", "require_aqQueue", "Buffer", "require_sodaDocument", "require_sodaDocCursor", "require_sodaOperation", "require_sodaCollection", "require_sodaDatabase", "Buffer", "require_connection", "Buffer", "process", "impl", "process", "require_pool", "require_constants", "Buffer", "Buffer", "Buffer", "Buffer", "require_lob", "Buffer", "require_dbObject", "Buffer", "Buffer", "numRowsFetched", "Buffer", "Buffer", "chunk", "buf", "require_constants", "require_packet", "Buffer", "Buffer", "process", "require_util", "listsize", "i", "process", "i", "Buffer", "process", "err", "Buffer", "Buffer", "salt", "Buffer", "process", "require_protocol", "require_connection", "Buffer", "process", "module", "require_pool", "conn", "process", "require_oracledb"]
}
